Microsoft (R) Macro Assembler Version 14.13.26129.0	    04/03/18 20:42:29
main.asm						     Page 1 - 1


				;// Main.asm - The file that contains the main game loop and launcher
				;// Authors: Thomas and Ben
				;// Since: 3/16/18

				.386
				.model stdcall, flat
				.stack 4096
				include irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				include characterHeader.inc
			      C ;// structure of character object
 0000005C		      C character struct 
			      C 
 00000000  00000000	      C xPos           DWORD 0
 00000004  00000000	      C yPos           DWORD 0
 00000008  00000010 [	      C characterName  db    16 dup (?)
	    00
	   ]
 2800000B  00000000	      C level          DWORD 0
 2800000F  00000000	      C exp            DWORD 0
 28000013  00000000	      C expToNext      DWORD 0
 28000017  00000000	      C gold           DWORD 0
			      C 
 2800001B  00000001	      C brawn          DWORD 1 ;//Primary Attributes
 2800001F  00000001	      C agility        DWORD 1
 28000023  00000001	      C mind           DWORD 1
 28000027  00000001	      C fortune        DWORD 1
			      C 
 2800002B  00000000	      C hpMax          DWORD 0
 2800002F  00000000	      C hp             DWORD 0
 28000033  00000000	      C damageMin      DWORD 0
 28000037  00000000	      C damageMax      DWORD 0
			      C 
 2800003B  00000000	      C weaponCode      DWORD 0
 2800003F  00000000	      C weaponBuyValue  DWORD 0
 28000043  00000000	      C weaponSellValue DWORD 0
 28000047  00000000	      C weaponDamage    DWORD 0
			      C 
			      C 
 2800004B  00000000	      C defence        DWORD 0
			      C 
			      C character ends
			      C 
				include enemyHeader.inc
			      C ;// structure of enemy object
 00000020		      C enemy struct 
			      C 
 00000000  00000008 [	      C enemyName  db    8 dup (?)
	    00
	   ]
			      C 
 07230003  00000000	      C hpMax          DWORD 0
 07230007  00000000	      C hp             DWORD 0
 0723000B  00000000	      C damageMin      DWORD 0
 0723000F  00000000	      C damageMax      DWORD 0
 07230013  00000000	      C defence        DWORD 0
 07230017  00000000	      C expReward      DWORD 0
			      C 
			      C enemy ends
			      C 
				include itemHeader.inc
			      C ;// structure of item object
			      C 
 0000001C		      C item struc
			      C 
 00000000  00000000	      C itemCode  DWORD NULL
 00000004  00000000	      C buyValue  DWORD ?
 00000008  00000000	      C sellValue DWORD ?
 0000000C  00000000	      C prev      DWORD NULL
 00000010  00000000	      C next      DWORD NULL
			      C 
 00000014  00000000	      C combatValue DWORD NULL ;// attack for weapons defense for armor
 00000018  00000000	      C itemType  DWORD NULL
			      C 
			      C item ends
			      C 

 00000000			.data
				include getItemName.inc
			      C ;// gets items name based off code and prints it
 00000000 72 6F 70 65 00      C itemName1 byte "rope" , 0 , 10, 0
	   0A 00
 00000007 67 75 6E 00 0A      C itemName2 byte "gun"  , 0 , 10, 0
	   00
 0000000D 73 77 6F 72 64      C itemName3 byte "sword", 0 , 10, 0
	   00 0A 00
 00000015 61 78 65 00 0A      C itemName4 byte "axe"  , 0 , 10, 0
	   00
			      C 
 0000001B 45 6D 70 74 79      C defaultName   byte "Empty Slot", 0 , 10, 0
	   20 53 6C 6F 74
	   00 0A 00
			      C 
			      C mGetItemName MACRO
			      C Local L
			      C 
			      C 
			      C ;//item code stored in eax
			      C 
			      C cmp eax,1
			      C je item0&L
			      C cmp eax,2
			      C je item1&L
			      C cmp eax,3
			      C je item2&L
			      C cmp eax,4
			      C je item3&L
			      C 
			      C jmp default&L
			      C 
			      C 
			      C 
			      C item0&L:
			      C 	mov edx, offset itemName1
			      C 
			      C 	jmp print&L
			      C item1&L:
			      C 	mov edx, offset itemName2
			      C 
			      C 	jmp print&L
			      C item2&L:
			      C 	mov edx, offset itemName3
			      C 	
			      C 	jmp print&L
			      C item3&L:
			      C 	mov edx, offset itemName4
			      C 	
			      C 	jmp print&L
			      C 
			      C default&L:
			      C 	mov edx, offset defaultName
			      C 
			      C print&L:
			      C 	invoke WriteString
			      C 
			      C 
			      C endm
			      C 
				include input_data.inc
 00000028 00000000	      C input_state dword ?
			      C 
				include get_input.inc
			      C _get_input macro
			      C 
			      C 	Local L
			      C 	call ReadDec
			      C 
			      C 	mov ecx, eax
			      C 
			      C 
			      C endm
			      C 

				include character.inc
			      C 
 0000002C 00000000	      C C1 character {0,0,"Name",1,0,100,0,4,4,4,4,5,5,1,3,}
	   00000000 4E 61
	   6D 65
	   0000000C [
	    00
	   ] 00000001
	   00000000
	   00000064
	   00000000
	   00000004
	   00000004
	   00000004
	   00000004
	   00000005
	   00000005
	   00000001
	   00000003
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
			      C 
 00000088 2D 2D 43 68 61      C characterSheetTitle byte "--CharacterSheet--"       , 13, 10, 0
	   72 61 63 74 65
	   72 53 68 65 65
	   74 2D 2D 0D 0A
	   00
 0000009D 78 50 6F 73 3A      C xPosTitle           byte "xPos: "                   , 0 , 10, 0
	   20 00 0A 00
 000000A6 79 50 6F 73 3A      C yPosTitle           byte "yPos: "                   , 0 , 10, 0
	   20 00 0A 00
 000000AF 4E 61 6D 65 3A      C nameTitle           byte "Name: "                   , 0 , 10, 0
	   20 00 0A 00
 000000B8 4C 65 76 65 6C      C levelTitle          byte "Level: "                  , 0 , 10, 0
	   3A 20 00 0A 00
 000000C2 45 78 70 3A 20      C expTitle            byte "Exp: "                    , 0 , 10, 0
	   00 0A 00
 000000CA 47 6F 6C 64 3A      C goldTitle           byte "Gold: "                   , 0 , 10, 0
	   20 00 0A 00
			      C 
			      C 
 000000D3 2D 2D 50 72 69      C primaryAttributesTitle byte "--Primary Attributes--", 13, 10, 0
	   6D 61 72 79 20
	   41 74 74 72 69
	   62 75 74 65 73
	   2D 2D 0D 0A 00
 000000EC 42 72 61 77 6E      C brawnTitle          byte "Brawn:"                   , 0 , 10, 0
	   3A 00 0A 00
 000000F5 41 67 69 6C 69      C agilityTitle        byte "Agility:"                 , 0 , 10, 0
	   74 79 3A 00 0A
	   00
 00000100 4D 69 6E 64 3A      C mindTitle           byte "Mind:"                    , 0 , 10, 0
	   00 0A 00
 00000108 46 6F 72 74 75      C fortuneTitle        byte "Fortune:"                 , 0 , 10, 0
	   6E 65 3A 00 0A
	   00
			      C 
 00000113 2D 2D 43 6F 6D      C combatAttributesTitle byte "--Combat Attributes--"  , 13, 10, 0
	   62 61 74 20 41
	   74 74 72 69 62
	   75 74 65 73 2D
	   2D 0D 0A 00
 0000012B 48 50 3A 00 0A      C hpTitle             byte "HP:"                      , 0 , 10, 0
	   00
 00000131 44 61 6D 61 67      C damageTitle         byte "Damage:"                  , 0 , 10, 0
	   65 3A 00 0A 00
 0000013B 44 65 66 65 6E      C defenceTitle        byte "Defence:"                 , 0 , 10, 0
	   63 65 3A 00 0A
	   00
 00000146 57 65 61 70 6F      C equippedWeaponTitle byte "Weapon:"                  , 0 , 10, 0
	   6E 3A 00 0A 00
			      C 
 00000150 45 6E 74 65 72      C command1 byte "Enter character name. Up to 15 Characters"  , 13, 10, 0
	   20 63 68 61 72
	   61 63 74 65 72
	   20 6E 61 6D 65
	   2E 20 55 70 20
	   74 6F 20 31 35
	   20 43 68 61 72
	   61 63 74 65 72
	   73 0D 0A 00
			      C 
			      C mPrintCharacterSheet MACRO ;//prints character sheet 
			      C pushAD
			      C 
			      C mov edx, offset characterSheetTitle ;//prints a header
			      C invoke WriteString
			      C 
			      C mov edx, offset xPosTitle ;// prints x position
			      C invoke WriteString
			      C mov eax, c1.xPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset yPosTitle ;// prints y position
			      C invoke WriteString
			      C mov eax, c1.yPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset nameTitle ;// prints character name
			      C invoke WriteString
			      C mov edx, offset c1.CharacterName
			      C Call WriteString
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset levelTitle ;//prints character level
			      C invoke WriteString
			      C mov eax, c1.level
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset expTitle ;//prints character exp
			      C invoke WriteString
			      C mov eax, c1.exp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.expToNext
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset goldTitle
			      C invoke WriteString
			      C mov eax, c1.Gold
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C 
			      C mov edx, offset primaryAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset brawnTitle ;//prints character brawn
			      C invoke WriteString
			      C mov eax, c1.brawn
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset agilityTitle ;//prints character agility
			      C invoke WriteString
			      C mov eax, c1.agility
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset mindTitle ;//prints character mind
			      C invoke WriteString
			      C mov eax, c1.mind
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset fortuneTitle ;//prints character fortune
			      C invoke WriteString
			      C mov eax, c1.fortune
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset hpTitle ;//prints character hp
			      C invoke WriteString
			      C mov eax, c1.hp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.hpMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset damageTitle ;//prints character damage
			      C invoke WriteString
			      C mov eax, c1.damageMin
			      C call WriteDec
			      C mov eax,'-'
			      C call WriteChar
			      C mov eax, c1.damageMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset defenceTitle ;//prints character defence
			      C invoke WriteString
			      C mov eax, c1.defence
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset equippedWeaponTitle
			      C invoke WriteString
			      C mov eax, c1.weaponCode
			      C mGetItemName
			      C 
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset continueCommand
			      C invoke WriteString
			      C _get_input
			      C call clrscr
			      C 
			      C popAD
			      C endm
			      C 
			      C ;//gets character name
			      C mGetCharacterName MACRO
			      C pushAD
			      C 
			      C mov edx, offset command1 ;//Player inputs character name
			      C invoke WriteString
			      C mov edx, offset c1.characterName
			      C mov ecx, SIZEOF c1.characterName
			      C call ReadString
			      C 
			      C call clrscr
			      C 
			      C popAD
			      C endm
			      C 
			      C ;//initializes character
			      C mInitializeCharacter MACRO ;//prints character sheet
			      C pushAD
			      C 
			      C 
			      C 
			      C inc c1.brawn   ;// sets primary attributes
			      C inc c1.agility
			      C inc c1.mind   
			      C inc c1.fortune
			      C 
			      C mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
			      C sal eax,1 ;// multiply by 2
			      C mov c1.hpMax,eax
			      C mov c1.hp,eax
			      C 
			      C mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
			      C sar eax,1;//divide by 2
			      C add eax,c1.weaponDamage
			      C mov c1.damageMin,eax
			      C mov ebx,c1.agility
			      C sar ebx,2;//divide by 4
			      C add eax,ebx
			      C mov c1.damageMax,eax
			      C 
			      C popAD
			      C endm
			      C 
			      C 
			      C 
				include enemy.inc
 0000017C 42 6F 67 6C 69      C e1 enemy{"Boglin",1,1,1,1,1,1}
	   6E
	   00000002 [
	    00
	   ] 00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
			      C 
			      C ;//initialize emeny
			      C mInitializeEnemy MACRO
			      C pushAD
			      C 
			      C mov ebx, c1.level ;//initialize enemy hp
			      C mov eax,3
			      C call RandomRange
			      C inc eax
			      C mul ebx
			      C mov e1.hpMax,eax
			      C mov e1.hp,eax
			      C 
			      C mov eax, 2 ;//initialize enemy damage
			      C call RandomRange
			      C inc eax
			      C add eax,ebx
			      C mov e1.damageMin,eax
			      C mov ecx,eax
			      C mov eax,2
			      C call RandomRange
			      C inc eax
			      C add eax,ecx
			      C mov e1.damageMax,eax
			      C 
			      C mov eax,e1.hpMax ;//initialize expReward
			      C mov ebx,10
			      C mul ebx
			      C mov e1.expReward ,eax
			      C 
			      C popAD
			      C endm
			      C 
				include combat.inc
 0000019C 00		      C escape         byte 0
 0000019D 00		      C playerDefeated byte 0
 0000019E 00		      C enemyDefeated  byte 0
			      C 
 0000019F 2D 2D 43 4F 4D      C combatMenuTitle  byte "--COMBAT--"   , 13, 10, 0
	   42 41 54 2D 2D
	   0D 0A 00
 000001AC 45 6E 65 6D 79      C enemyNameTitle   byte "Enemy Name:"  , 0 , 10, 0
	   20 4E 61 6D 65
	   3A 00 0A 00
 000001BA 45 6E 65 6D 79      C enemyHPTitle     byte "Enemy HP:"    , 0 , 10, 0
	   20 48 50 3A 00
	   0A 00
 000001C6 45 6E 65 6D 79      C enemyDamageTitle byte "Enemy Damage:", 0 , 10, 0
	   20 44 61 6D 61
	   67 65 3A 00 0A
	   00
			      C 
			      C 
 000001D6 2D 2D 43 6F 6D      C combatOptionsMenuTitle byte "--Combat Options--", 13, 10, 0
	   62 61 74 20 4F
	   70 74 69 6F 6E
	   73 2D 2D 0D 0A
	   00
 000001EB 30 3A 20 41 74      C attackTitle            byte "0: Attack"         , 13, 10, 0
	   74 61 63 6B 0D
	   0A 00
 000001F7 31 3A 20 46 6C      C fleeTitle              byte "1: Flee"           , 13, 10, 0
	   65 65 0D 0A 00
			      C 
 00000201 59 6F 75 20 45      C escapeEvent          byte "You Escaped!"          , 13, 10, 0
	   73 63 61 70 65
	   64 21 0D 0A 00
 00000210 59 6F 75 20 77      C playerDefeatedEvent  byte "You were defeated"     , 13, 10, 0
	   65 72 65 20 64
	   65 66 65 61 74
	   65 64 0D 0A 00
 00000224 59 6F 75 20 44      C enemyDefeatedEvent   byte "You Defeated the Enemy", 13, 10, 0
	   65 66 65 61 74
	   65 64 20 74 68
	   65 20 45 6E 65
	   6D 79 0D 0A 00
			      C 
			      C mCombat MACRO
			      C Local L
			      C pushAD
			      C 
			      C mInitializeEnemy
			      C 
			      C mov eax,c1.hpMax
			      C mov c1.hp,eax
			      C 
			      C mov escape        ,0 ;//combat end conditions
			      C mov playerDefeated,0
			      C mov enemyDefeated ,0
			      C 
			      C WHILE_COMBAT&L:    ;//disgusting triple & while statement
			      C cmp escape,0       ;//while &
			      C je AND_COMBAT1&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT1&L: cmp playerDefeated,0
			      C je AND_COMBAT2&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT2&L: cmp enemyDefeated,0
			      C je AND_COMBAT_TRUE&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT_TRUE&L:
			      C 	
			      C 	mov edx, offset combatMenuTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyNameTitle ;//prints enemy name
			      C 	invoke WriteString
			      C 	mov edx, offset e1.enemyName
			      C 	invoke WriteString
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyHpTitle ;//prints enemy hp
			      C 	invoke WriteString
			      C 	mov eax, e1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, e1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyDamageTitle ;//prints enemy damage
			      C 	invoke WriteString
			      C 	mov eax, e1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, e1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C 	mov edx, offset hpTitle ;//prints character hp
			      C 	invoke WriteString
			      C 	mov eax, c1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, c1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset damageTitle ;//prints character damage
			      C 	invoke WriteString
			      C 	mov eax, c1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, c1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatOptionsMenuTitle ;//prints combat Options
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset attackTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset fleeTitle
			      C 	invoke WriteString
			      C 
			      C 	_get_input
			      C 	
			      C 	call Clrscr
			      C 
			      C 	
			      C 		cmp ecx, 0 ;//switch
			      C 		je attack
			      C 		cmp ecx, 1
			      C 		je flee
			      C 	
			      C 		jmp end_switch&L
			      C 
			      C 		attack:
			      C 			mov eax,c1.damageMax;//player attacks
			      C 			mov ebx,c1.damageMin
			      C 			sub eax,ebx
			      C 			inc eax
			      C 			call RandomRange
			      C 			add eax,ebx
			      C 			sub e1.hp,eax
			      C 
			      C 			cmp e1.hp,0 ;//check to see if enemy died
			      C 			jle enemy_dead
			      C 			jmp end_switch&L
			      C 			enemy_dead:
			      C 				mov enemyDefeated,1
			      C 				jmp AND_FALSE_COMBAT&L
			      C 		flee:
			      C 			mov escape,1
			      C 			
			      C 		end_switch&L:
			      C 
			      C 			mov eax,e1.damageMax;//enemy attacks
			      C 			mov ebx,e1.damageMin
			      C 			sub eax,ebx
			      C 			inc eax
			      C 			call RandomRange
			      C 			add eax,ebx
			      C 			sub c1.hp,eax
			      C 
			      C 			cmp c1.hp,0    ;// checking to see if character died
			      C 			jle character_dead
			      C 			jmp character_not_dead
			      C 			character_dead:
			      C 				mov playerDefeated,1
			      C 			character_not_dead:
			      C 
			      C 		jmp WHILE_COMBAT&L;//default
			      C 
			      C AND_FALSE_COMBAT&L:
			      C 
			      C cmp escape,0
			      C je not_escape
			      C 
			      C mov edx, offset escapeEvent;//will print if player fleed
			      C invoke WriteString
			      C jmp eventDetermined
			      C 
			      C not_escape:
			      C cmp playerDefeated,0
			      C je not_playerDefeated
			      C 
			      C mov edx, offset playerDefeatedEvent;//will print if player was defeated
			      C invoke WriteString
			      C jmp eventDetermined
			      C 
			      C not_playerDefeated:
			      C 
			      C mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
			      C invoke WriteString
			      C 
			      C mov eax, offset t1 ;//adds axe to inventory
			      C mAddItem
			      C 
			      C mov eax, c1.level
			      C mov ecx,10
			      C mul ecx
			      C call RandomRange
			      C mov ebx,c1.gold
			      C add ebx,eax
			      C mov c1.gold,ebx
			      C 
			      C mov eax,e1.expReward ;//rewarding player exp
			      C add c1.exp,eax
			      C 
			      C eventDetermined:
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C 
			      C 
			      C call Clrscr
			      C 
			      C popAD
			      C endm
			      C 
				include levelUp.inc
			      C ;//level up class
 0000023D 4E 6F 74 20 65      C notEnoughResponse byte "Not enough experience", 13, 10, 0
	   6E 6F 75 67 68
	   20 65 78 70 65
	   72 69 65 6E 63
	   65 0D 0A 00
 00000255 59 6F 75 20 6C      C leveledUpResponse byte "You leveled up!"      , 13, 10, 0
	   65 76 65 6C 65
	   64 20 75 70 21
	   0D 0A 00
			      C 
			      C mLevelUp MACRO
			      C pushAD
			      C 
			      C mov eax,c1.exp
			      C mov ebx,c1.expToNext
			      C cmp eax,ebx
			      C jl notEnough
			      C 
			      C inc c1.level
			      C mInitializeCharacter
			      C 
			      C mov eax,c1.exp
			      C mov ebx,c1.expToNext
			      C sub eax,ebx
			      C mov c1.exp,eax
			      C 
			      C mov edx,offset leveledUpResponse
			      C invoke WriteString
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C jmp leveledUp
			      C 
			      C notEnough:
			      C 
			      C mov edx,offset notEnoughResponse
			      C invoke WriteString
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C 
			      C 
			      C leveledUp:
			      C 
			      C call Clrscr
			      C 
			      C popAD
			      C endm
			      C 
				include inventory.inc
			      C ;//inventory using linked list
			      C ;//linked list of 10 items 
			      C 
 00000267 00000000	      C i10 item {0,0,0,i9,null}
	   00000000
	   00000000
	   00000283 R
	   00000000
	   00000000
	   00000000
 00000283 00000000	      C i9 item {0,0,0,i8,i10}
	   00000000
	   00000000
	   0000029F R
	   00000267 R
	   00000000
	   00000000
 0000029F 00000000	      C i8 item {0,0,0,i7,i9}
	   00000000
	   00000000
	   000002BB R
	   00000283 R
	   00000000
	   00000000
 000002BB 00000000	      C i7 item {0,0,0,i6,i8}
	   00000000
	   00000000
	   000002D7 R
	   0000029F R
	   00000000
	   00000000
 000002D7 00000000	      C i6 item {0,0,0,i5,i7}
	   00000000
	   00000000
	   000002F3 R
	   000002BB R
	   00000000
	   00000000
 000002F3 00000000	      C i5 item {0,0,0,i4,i6}
	   00000000
	   00000000
	   0000030F R
	   000002D7 R
	   00000000
	   00000000
 0000030F 00000000	      C i4 item {0,0,0,i3,i5}
	   00000000
	   00000000
	   0000032B R
	   000002F3 R
	   00000000
	   00000000
 0000032B 00000001	      C i3 item {1,1,2,i2,i4,5,"W"}
	   00000001
	   00000002
	   00000347 R
	   0000030F R
	   00000005
	   00000057
 00000347 00000002	      C i2 item {2,1,2,i1,i3,10,"W"}
	   00000001
	   00000002
	   00000363 R
	   0000032B R
	   0000000A
	   00000057
 00000363 00000003	      C i1 item {3,1,2,null,i2,3,"A"}
	   00000001
	   00000002
	   00000000
	   00000347 R
	   00000003
	   00000041
			      C 
 0000037F 00000004	      C t1 item {4,1,2,NULL,NULL,3}
	   00000001
	   00000002
	   00000000
	   00000000
	   00000003
	   00000000
			      C 
 0000039B  00000008 [	      C tempString  db    8 dup (?)
	    00
	   ]
			      C 
 000003A3 2D 2D 53 65 6C      C selectItemTitle byte "--Select an Item--", 13, 10, 0
	   65 63 74 20 61
	   6E 20 49 74 65
	   6D 2D 2D 0D 0A
	   00
			      C 
			      C 
 000003B8 31 20 44 69 73      C discardTitle byte "1 Discard: "   , 13, 10, 0
	   63 61 72 64 3A
	   20 0D 0A 00
 000003C6 32 20 45 71 75      C equipTitle   byte "2 Equip: "     , 13, 10, 0
	   69 70 3A 20 0D
	   0A 00
 000003D2 33 20 49 74 65      C infoTitle    byte "3 Item Info "  , 13, 10, 0
	   6D 20 49 6E 66
	   6F 20 0D 0A 00
			      C 
 000003E1 49 74 65 6D 20      C itemNameTitle        byte "Item Name: "      , 0, 10, 0
	   4E 61 6D 65 3A
	   20 00 0A 00
 000003EF 53 65 6C 6C 20      C itemSellValueTitle   byte "Sell Value: "     , 0, 10, 0
	   56 61 6C 75 65
	   3A 20 00 0A 00
 000003FE 42 75 79 20 56      C itemBuyValueTitle    byte "Buy Value: "      , 0, 10, 0
	   61 6C 75 65 3A
	   20 00 0A 00
 0000040C 43 6F 6D 62 61      C itemCombatValueTitle byte "Combat Value:"    , 0, 10, 0
	   74 20 56 61 6C
	   75 65 3A 00 0A
	   00
 0000041C 49 74 65 6D 20      C itemType             byte "Item Type:   "    , 0, 10, 0
	   54 79 70 65 3A
	   20 20 20 00 0A
	   00
			      C 
 0000042C 49 4E 56 45 4E      C inventoryFullTitle   byte "INVENTORY FULL"   , 0, 10, 0
	   54 4F 52 59 20
	   46 55 4C 4C 00
	   0A 00
			      C 
			      C ;//displays inventory
			      C mDisplayInventory MACRO
			      C Local L
			      C pushAD
			      C 
			      C xor ecx,ecx
			      C DO1&L:
			      C 
			      C mov eax,ecx
			      C call WriteDec
			      C mov eax, ':'
			      C call WriteChar
			      C mov eax, [ebx].item.itemCode
			      C mGetItemName
			      C mov edx,offset blank
			      C call WriteString
			      C 
			      C mov eBx,[ebx].item.next
			      C 
			      C inc ecx
			      C cmp ebx,null
			      C jne DO1&L
			      C 
			      C popAD
			      C endm
			      C 
			      C mInventory MACRO
			      C 
			      C mov edx, offset selectItemTitle
			      C call WriteString
			      C 
			      C mov eBx, offset i1
			      C mDisplayInventory
			      C _get_input
			      C 
			      C cmp ecx,0
			      C 	je item0
			      C cmp ecx,1
			      C 	je item1
			      C cmp ecx,2
			      C 	je item2
			      C cmp ecx,3
			      C 	je item3
			      C cmp ecx,4
			      C 	je item4
			      C cmp ecx,5
			      C 	je item5
			      C cmp ecx,6
			      C 	je item6
			      C cmp ecx,7
			      C 	je item7
			      C cmp ecx,8
			      C 	je item8
			      C cmp ecx,9
			      C 	je item9
			      C 
			      C item0:
			      C 	mov ebx,offset i1 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item1:
			      C 	mov ebx,offset i2 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item2:
			      C 	mov ebx,offset i3 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item3:
			      C 	mov ebx,offset i4 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item4:
			      C 	mov ebx,offset i5 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item5:
			      C 	mov ebx,offset i6 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item6:
			      C 	mov ebx,offset i7 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item7:
			      C 	mov ebx,offset i8 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item8:
			      C 	mov ebx,offset i9 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item9:
			      C 	mov ebx,offset i10 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C 
			      C endInventory:
			      C 
			      C call clrscr
			      C endm
			      C 
			      C mitemOptions MACRO
			      C local L
			      C 
			      C mov edx, offset exitTitle
			      C call WriteString
			      C mov edx, offset discardTitle
			      C call WriteString
			      C mov edx, offset equipTitle
			      C call WriteString
			      C mov edx, offset infoTitle
			      C call WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx,909
			      C je exit&L
			      C cmp ecx,1
			      C je removeItem&L
			      C cmp ecx,2
			      C je equipItem&L
			      C cmp ecx,3
			      C je infoItem&L
			      C jmp endCase&L
			      C 
			      C exit&L:
			      C 	jmp endCase&L
			      C removeItem&L:
			      C 	mRemoveItem
			      C 	jmp endCase&L
			      C equipItem&L:
			      C 	mEquip
			      C 	jmp endCase&L
			      C infoItem&L:
			      C 	call clrscr
			      C 	mDisplayItemInfo
			      C 	mov eax,2000
			      C 	call Delay
			      C 
			      C endCase&L:
			      C 
			      C endm
			      C 
			      C ;//remove an item from inventory
			      C mRemoveItem MACRO
			      C 
			      C ;//ebx is item being removed
			      C 
			      C mov [ebx].item.itemCode,null
			      C mov [ebx].item.sellValue,0
			      C mov [ebx].item.buyValue,0
			      C 
			      C endm;//mRemoveItem
			      C 
			      C ;//equips item
			      C mEquip MACRO
			      C Local L
			      C 
			      C ;//ebx is item being equipped
			      C 
			      C cmp c1.weaponCode,0
			      C je notEquipped&L
			      C 
			      C mov edx,ebx
			      C mDequip
			      C mov ebx,edx
			      C 
			      C notEquipped&L:
			      C mov edx, [ebx].item.itemCode
			      C mov c1.weaponCode, edx
			      C mov edx, [ebx].item.combatValue
			      C mov c1.weaponDamage, edx
			      C mov edx, [ebx].item.buyValue
			      C mov c1.weaponBuyValue,edx
			      C mov edx,[ebx].item.sellValue
			      C mov c1.weaponsellValue,edx
			      C mRemoveItem
			      C mInitializeCharacter
			      C 
			      C endm;//mEquip
			      C 
			      C ;//displays item Info
			      C mDisplayItemInfo MACRO
			      C ;ebx is item Info
			      C 
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemBuyValueTitle ;displays buy value
			      C call WriteString
			      C mov eax, [ebx].item.buyValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemSellValueTitle ;displays sell value 
			      C call WriteString
			      C mov eax, [ebx].item.SellValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemCombatValueTitle ;displays combat value
			      C call WriteString
			      C mov eax, [ebx].item.combatValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C endm
			      C 
			      C mDequip MACRO
			      C Local L
			      C 
			      C cmp c1.weaponCode,0
			      C je nothingEquipped&L
			      C 
			      C mov ebx, offset i1
			      C 
			      C notEmpty&L:
			      C cmp [ebx].item.itemCode,0
			      C je isEmpty&L 
			      C cmp [ebx].item.next,null
			      C je inventoryFull&L
			      C mov ebx,[ebx].item.next
			      C jmp notEmpty&L
			      C 
			      C isEmpty&L:
			      C 
			      C mov eax, c1.weaponCode
			      C mov [ebx].item.itemCode,eax
			      C mov c1.weaponCode,0
			      C 
			      C mov eax, c1.weaponBuyValue
			      C mov [ebx].item.buyValue,eax
			      C mov c1.weaponBuyValue,0
			      C 
			      C mov eax, c1.weaponSellValue
			      C mov [ebx].item.sellValue,eax
			      C mov c1.weaponSellValue,0
			      C 
			      C mov eax, c1.weaponDamage
			      C mov [ebx].item.combatValue,eax
			      C mov c1.weaponDamage,0
			      C mInitializeCharacter
			      C jmp nothingEquipped&L
			      C 
			      C 
			      C inventoryFull&L:
			      C 
			      C mov edx, offset inventoryFullTitle
			      C invoke WriteString
			      C 
			      C mov eax, 1500
			      C call Delay
			      C call clrscr
			      C 
			      C nothingEquipped&L:
			      C 
			      C endm
			      C 
			      C mAddItem MACRO
			      C Local L
			      C ;//item is in eax
			      C 
			      C mov ebx, offset i1
			      C 
			      C notEmpty&L:
			      C cmp [ebx].item.itemCode,0
			      C je isEmpty&L 
			      C cmp [ebx].item.next,null
			      C je inventoryFull&L
			      C mov ebx,[ebx].item.next
			      C jmp notEmpty&L
			      C 
			      C isEmpty&L:
			      C 
			      C mov ecx, [eax].item.itemCode
			      C mov [ebx].item.itemCode,ecx
			      C 
			      C mov ecx, [eax].item.buyValue
			      C mov [ebx].item.buyValue,ecx
			      C 
			      C mov ecx, [eax].item.sellValue
			      C mov [ebx].item.sellValue,ecx
			      C 
			      C mov ecx, [eax].item.combatValue
			      C mov [ebx].item.combatValue,ecx
			      C 
			      C jmp end&L
			      C 
			      C inventoryFull&L:
			      C mov edx, offset inventoryFullTitle
			      C invoke WriteString
			      C 
			      C mov eax, 1500
			      C call Delay
			      C call clrscr
			      C 
			      C end&L:
			      C 
			      C endm
			      C 
			      C 
				include shop.inc
 0000043D 00000000	      C s10 item {0,0,0,s9,null}
	   00000000
	   00000000
	   00000459 R
	   00000000
	   00000000
	   00000000
 00000459 00000000	      C s9 item {0,0,0,s8,s10}
	   00000000
	   00000000
	   00000475 R
	   0000043D R
	   00000000
	   00000000
 00000475 00000000	      C s8 item {0,0,0,s7,s9}
	   00000000
	   00000000
	   00000491 R
	   00000459 R
	   00000000
	   00000000
 00000491 00000000	      C s7 item {0,0,0,s6,s8}
	   00000000
	   00000000
	   000004AD R
	   00000475 R
	   00000000
	   00000000
 000004AD 00000000	      C s6 item {0,0,0,s5,s7}
	   00000000
	   00000000
	   000004C9 R
	   00000491 R
	   00000000
	   00000000
 000004C9 00000000	      C s5 item {0,0,0,s4,s6}
	   00000000
	   00000000
	   000004E5 R
	   000004AD R
	   00000000
	   00000000
 000004E5 00000000	      C s4 item {0,0,0,s3,s5}
	   00000000
	   00000000
	   00000501 R
	   000004C9 R
	   00000000
	   00000000
 00000501 00000001	      C s3 item {1,1,2,s2,s4,5,"W"}
	   00000001
	   00000002
	   0000051D R
	   000004E5 R
	   00000005
	   00000057
 0000051D 00000001	      C s2 item {1,1,2,s1,s3,10,"W"}
	   00000001
	   00000002
	   00000539 R
	   00000501 R
	   0000000A
	   00000057
 00000539 00000003	      C s1 item {3,1,2,null,s2,3,"A"}
	   00000001
	   00000002
	   00000000
	   0000051D R
	   00000003
	   00000041
			      C 
 00000555 2D 2D 53 48 4F      C shopMenuTitle    byte "--SHOP--"        , 13, 10, 0
	   50 2D 2D 0D 0A
	   00
			      C 
 00000560 31 30 20 53 77      C sellModeTitle byte "10 Switch to Sell Mode" , 13, 10, 0
	   69 74 63 68 20
	   74 6F 20 53 65
	   6C 6C 20 4D 6F
	   64 65 0D 0A 00
 00000579 32 20 42 75 79      C buyTitle      byte "2 Buy:"                 , 13, 10, 0
	   3A 0D 0A 00
			      C 
 00000582 31 20 53 65 6C      C sellTitle  byte "1 Sell:"  , 13, 10, 0
	   6C 3A 0D 0A 00
			      C 
 0000058C 4E 6F 74 20 45      C notEnoughGoldTitle byte "Not Enough Gold" , 13, 10, 0
	   6E 6F 75 67 68
	   20 47 6F 6C 64
	   0D 0A 00
			      C 
			      C mShop MACRO
			      C Local L
			      C 
			      C mov edx, offset shopMenuTitle
			      C invoke WriteString
			      C mov edx, offset exitTitle
			      C invoke WriteString
			      C 
			      C mov ebx, offset s1;//moving first item to read linked list
			      C mDisplayInventory
			      C 
			      C mov edx,offset sellModeTitle
			      C invoke WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx,909
			      C je exitShop
			      C cmp ecx,1
			      C 	je item1&L
			      C cmp ecx,2
			      C 	je item2&L
			      C cmp ecx,3
			      C 	je item3&L
			      C cmp ecx,4
			      C 	je item4&L
			      C cmp ecx,5
			      C 	je item5&L
			      C cmp ecx,6
			      C 	je item6&L
			      C cmp ecx,7
			      C 	je item7&L
			      C cmp ecx,8
			      C 	je item8&L
			      C cmp ecx,9
			      C 	je item9&L
			      C cmp ecx,10
			      C 	je sellMode
			      C jmp exitShop
			      C 
			      C item0&L:
			      C 	mov ebx,offset s1 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item1&L:
			      C 	mov ebx,offset s2 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item2&L:
			      C 	mov ebx,offset s3 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item3&L:
			      C 	mov ebx,offset s4 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item4&L:
			      C 	mov ebx,offset s5 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item5&L:
			      C 	mov ebx,offset s6 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item6&L:
			      C 	mov ebx,offset s7 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item7&L:
			      C 	mov ebx,offset s8 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item8&L:
			      C 	mov ebx,offset s9 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp endInventory
			      C item9&L:
			      C 	mov ebx,offset s10 ;//storing item for use
			      C sellMode:
			      C 	call clrscr
			      C 	mSellMode
			      C 	
			      C 
			      C jmp endInventory
			      C 
			      C 
			      C exitShop:
			      C Call clrscr
			      C 
			      C endm
			      C 
			      C mBuyOptions MACRO
			      C local L
			      C mov edx, offset exitTitle
			      C mov edx, offset buyTitle
			      C call WriteString
			      C mov edx, offset infoTitle
			      C call WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx,909
			      C je exit&L
			      C 
			      C cmp ecx,2
			      C je buyItem&L
			      C cmp ecx,3
			      C je infoItem&L
			      C jmp endCase&L
			      C 
			      C exit&L:
			      C 	jmp endCase&L
			      C buyItem&L:
			      C 
			      C 	mov edx, c1.gold 
			      C 	mov eax, [ebx].item.buyValue
			      C 	cmp edx,eax
			      C 	jb notEnoughGold&L
			      C 
			      C 	sub c1.gold,eax ;//decrease yout gold
			      C 
			      C 	mov eax,ebx ;//moving for add
			      C 	mov edx,ebx ;//storing for remove
			      C 	mAddItem    ;//adding item to inventory
			      C 	mov ebx,edx ;//moving for remove
			      C 	mRemoveItem ;//removing item from shop
			      C 
			      C 	jmp endCase&L
			      C 
			      C 	notEnoughGold&L:
			      C 
			      C 	call clrscr
			      C 	mov edx, offset notEnoughGoldTitle
			      C 	invoke WriteString
			      C 	mov eax,2000
			      C 	call Delay
			      C 
			      C 	jmp endCase&L
			      C 
			      C infoItem&L:
			      C 	call clrscr
			      C 	mDisplayItemInfo
			      C 	mov eax,2000
			      C 	call Delay
			      C 
			      C endCase&L:
			      C 
			      C endm
			      C 
			      C mSellMode MACRO
			      C Local L
			      C 
			      C mov ebx, offset i1
			      C 
			      C mDisplayInventory
			      C _get_input
			      C 
			      C cmp ecx,0
			      C 	je item0&L
			      C cmp ecx,1
			      C 	je item1&L
			      C cmp ecx,2
			      C 	je item2&L
			      C cmp ecx,3
			      C 	je item3&L
			      C cmp ecx,4
			      C 	je item4&L
			      C cmp ecx,5
			      C 	je item5&L
			      C cmp ecx,6
			      C 	je item6&L
			      C cmp ecx,7
			      C 	je item7&L
			      C cmp ecx,8
			      C 	je item8&L
			      C cmp ecx,9
			      C 	je item9&L
			      C 
			      C item0&L:
			      C 	mov ebx,offset i1 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item1&L:
			      C 	mov ebx,offset i2 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item2&L:
			      C 	mov ebx,offset i3 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item3&L:
			      C 	mov ebx,offset i4 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item4&L:
			      C 	mov ebx,offset i5 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item5&L:
			      C 	mov ebx,offset i6 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item6&L:
			      C 	mov ebx,offset i7 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item7&L:
			      C 	mov ebx,offset i8 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item8&L:
			      C 	mov ebx,offset i9 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C item9&L:
			      C 	mov ebx,offset i10 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp endInventory&L
			      C 
			      C endInventory&L:
			      C 
			      C endm
			      C 
			      C mSellOptions MACRO
			      C Local L
			      C call clrscr
			      C 
			      C mov edx, offset sellTitle
			      C invoke WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx, 1
			      C je doSell&L
			      C 
			      C doSell&L:
			      C mov eax,[ebx].item.sellValue
			      C mov edx,c1.gold
			      C add edx,eax
			      C mov c1.gold,edx
			      C 
			      C mRemoveItem
			      C 
			      C endm
			      C 
			      C 

				WriteDec proto
				ReadDec proto
				ExitProcess proto, dwExitCode:dword

 0000059E 4D 61 69 6E 20	mainMenuTitle    byte "Main Menu"        , 13, 10, 0
	   4D 65 6E 75 0D
	   0A 00
 000005AA 39 30 39 20 51	quitTitle        byte "909 Quit"           , 13, 10, 0
	   75 69 74 0D 0A
	   00
 000005B5 31 20 43 68 61	characterSheet   byte "1 Character Sheet", 13, 10, 0
	   72 61 63 74 65
	   72 20 53 68 65
	   65 74 0D 0A 00
 000005C9 32 20 43 6F 6D	combatTitle      byte "2 Combat"         , 13, 10, 0
	   62 61 74 0D 0A
	   00
 000005D4 33 20 4C 65 76	levelUpTitle     byte "3 Level Up"       , 13, 10, 0
	   65 6C 20 55 70
	   0D 0A 00
 000005E1 34 20 49 6E 76	inventoryTitle   byte "4 Inventory"      , 13, 10, 0
	   65 6E 74 6F 72
	   79 0D 0A 00
 000005EF 35 20 44 65 71	dequipTitle      byte "5 Dequip"         , 13, 10, 0
	   75 69 70 0D 0A
	   00
 000005FA 36 20 53 68 6F	shopTitle        byte "6 Shop"           , 13, 10, 0
	   70 0D 0A 00

 00000603 50 72 65 73 73	continueCommand byte "Press Enter to Continue",13, 10, 0
	   20 45 6E 74 65
	   72 20 74 6F 20
	   43 6F 6E 74 69
	   6E 75 65 0D 0A
	   00

 0000061D 39 30 39 20 45	exitTitle    byte "909 Exit: ", 13, 10, 0
	   78 69 74 3A 20
	   0D 0A 00

 0000062A 20 0D 0A 00		blank byte " ", 13, 10, 0




 00000000			.code

 00000000			main proc

				mGetCharacterName
 00000000  60		     1	pushAD
 00000001  BA 00000150 R     1	mov edx, offset command1 ;//Player inputs character name
 00000006  E8 00000000 E   *	    call   WriteString
 0000000B  BA 00000034 R     1	mov edx, offset c1.characterName
 00000010  B9 00000010	     1	mov ecx, SIZEOF c1.characterName
 00000015  E8 00000000 E     1	call ReadString
 0000001A  E8 00000000 E     1	call clrscr
 0000001F  61		     1	popAD
				mInitializeCharacter
 00000020  60		     1	pushAD
 00000021  FF 05 00000054 R  1	inc c1.brawn   ;// sets primary attributes
 00000027  FF 05 00000058 R  1	inc c1.agility
 0000002D  FF 05 0000005C R  1	inc c1.mind   
 00000033  FF 05 00000060 R  1	inc c1.fortune
 00000039  A1 00000054 R     1	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 0000003E  D1 E0	     1	sal eax,1 ;// multiply by 2
 00000040  A3 00000064 R     1	mov c1.hpMax,eax
 00000045  A3 00000068 R     1	mov c1.hp,eax
 0000004A  A1 00000054 R     1	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000004F  D1 F8	     1	sar eax,1;//divide by 2
 00000051  03 05 00000080 R  1	add eax,c1.weaponDamage
 00000057  A3 0000006C R     1	mov c1.damageMin,eax
 0000005C  8B 1D 00000058 R  1	mov ebx,c1.agility
 00000062  C1 FB 02	     1	sar ebx,2;//divide by 4
 00000065  03 C3	     1	add eax,ebx
 00000067  A3 00000070 R     1	mov c1.damageMax,eax
 0000006C  61		     1	popAD

 0000006D  B9 00000001		mov ecx, 1
 00000072			while_main:						;//while( ecx != 0 )

					
 00000072  BA 0000059E R		mov edx, offset mainMenuTitle ;//Main Menu Display Start
 00000077  E8 00000000 E		call WriteString
 0000007C  BA 000005AA R			mov edx, offset quitTitle
 00000081  E8 00000000 E			call WriteString
 00000086  BA 000005B5 R			mov edx, offset characterSheet
 0000008B  E8 00000000 E			call WriteString
 00000090  BA 000005C9 R			mov edx, offset combatTitle
 00000095  E8 00000000 E			call WriteString
 0000009A  BA 000005D4 R			mov edx, offset levelUpTitle
 0000009F  E8 00000000 E			call WriteString
 000000A4  BA 000005E1 R			mov edx, offset inventoryTitle
 000000A9  E8 00000000 E			call WriteString
 000000AE  BA 000005EF R			mov edx, offset dequipTitle
 000000B3  E8 00000000 E			call WriteString
 000000B8  BA 000005FA R			mov edx, offset shopTitle
 000000BD  E8 00000000 E			call WriteString

						_get_input
 000000C2  E8 00000000 E     1		call ReadDec
 000000C7  8B C8	     1		mov ecx, eax

 000000C9  E8 00000000 E			call Clrscr

 000000CE  81 F9 0000038D		cmp ecx, 909;//switch
 000000D4  0F 84 00002F55		je endwhile_main
 000000DA  83 F9 01			cmp ecx, 1
 000000DD  74 32			je character_sheet
 000000DF  83 F9 02			cmp ecx, 2
 000000E2  0F 84 0000027B		je combat
 000000E8  83 F9 03			cmp ecx, 3
 000000EB  0F 84 0000056B		je levelUp
 000000F1  83 F9 04			cmp ecx, 4
 000000F4  0F 84 0000060C		je inventory
 000000FA  83 F9 05			cmp ecx, 5
 000000FD  0F 84 00001DFC		je dequip
 00000103  83 F9 06			cmp ecx, 6
 00000106  0F 84 00001ECD		je shop
 0000010C  E9 00002F19			jmp end_switch

 00000111				character_sheet:
						mPrintCharacterSheet
 00000111  60		     1	pushAD
 00000112  BA 00000088 R     1	mov edx, offset characterSheetTitle ;//prints a header
 00000117  E8 00000000 E   *	    call   WriteString
 0000011C  BA 0000009D R     1	mov edx, offset xPosTitle ;// prints x position
 00000121  E8 00000000 E   *	    call   WriteString
 00000126  A1 0000002C R     1	mov eax, c1.xPos
 0000012B  E8 00000000 E     1	call WriteDec
 00000130  BA 0000062A R     1	mov edx, offset blank
 00000135  E8 00000000 E   *	    call   WriteString
 0000013A  BA 000000A6 R     1	mov edx, offset yPosTitle ;// prints y position
 0000013F  E8 00000000 E   *	    call   WriteString
 00000144  A1 00000030 R     1	mov eax, c1.yPos
 00000149  E8 00000000 E     1	call WriteDec
 0000014E  BA 0000062A R     1	mov edx, offset blank
 00000153  E8 00000000 E   *	    call   WriteString
 00000158  BA 000000AF R     1	mov edx, offset nameTitle ;// prints character name
 0000015D  E8 00000000 E   *	    call   WriteString
 00000162  BA 00000034 R     1	mov edx, offset c1.CharacterName
 00000167  E8 00000000 E     1	Call WriteString
 0000016C  BA 0000062A R     1	mov edx, offset blank
 00000171  E8 00000000 E   *	    call   WriteString
 00000176  BA 000000B8 R     1	mov edx, offset levelTitle ;//prints character level
 0000017B  E8 00000000 E   *	    call   WriteString
 00000180  A1 00000044 R     1	mov eax, c1.level
 00000185  E8 00000000 E     1	call WriteDec
 0000018A  BA 0000062A R     1	mov edx, offset blank
 0000018F  E8 00000000 E   *	    call   WriteString
 00000194  BA 000000C2 R     1	mov edx, offset expTitle ;//prints character exp
 00000199  E8 00000000 E   *	    call   WriteString
 0000019E  A1 00000048 R     1	mov eax, c1.exp
 000001A3  E8 00000000 E     1	call WriteDec
 000001A8  B8 0000002F	     1	mov eax,'/'
 000001AD  E8 00000000 E     1	call WriteChar
 000001B2  A1 0000004C R     1	mov eax, c1.expToNext
 000001B7  E8 00000000 E     1	call WriteDec
 000001BC  BA 0000062A R     1	mov edx, offset blank
 000001C1  E8 00000000 E   *	    call   WriteString
 000001C6  BA 000000CA R     1	mov edx, offset goldTitle
 000001CB  E8 00000000 E   *	    call   WriteString
 000001D0  A1 00000050 R     1	mov eax, c1.Gold
 000001D5  E8 00000000 E     1	call WriteDec
 000001DA  BA 0000062A R     1	mov edx, offset blank
 000001DF  E8 00000000 E   *	    call   WriteString
 000001E4  BA 000000D3 R     1	mov edx, offset primaryAttributesTitle ;//prints primary attributes header
 000001E9  E8 00000000 E   *	    call   WriteString
 000001EE  BA 000000EC R     1	mov edx, offset brawnTitle ;//prints character brawn
 000001F3  E8 00000000 E   *	    call   WriteString
 000001F8  A1 00000054 R     1	mov eax, c1.brawn
 000001FD  E8 00000000 E     1	call WriteDec
 00000202  BA 0000062A R     1	mov edx, offset blank
 00000207  E8 00000000 E   *	    call   WriteString
 0000020C  BA 000000F5 R     1	mov edx, offset agilityTitle ;//prints character agility
 00000211  E8 00000000 E   *	    call   WriteString
 00000216  A1 00000058 R     1	mov eax, c1.agility
 0000021B  E8 00000000 E     1	call WriteDec
 00000220  BA 0000062A R     1	mov edx, offset blank
 00000225  E8 00000000 E   *	    call   WriteString
 0000022A  BA 00000100 R     1	mov edx, offset mindTitle ;//prints character mind
 0000022F  E8 00000000 E   *	    call   WriteString
 00000234  A1 0000005C R     1	mov eax, c1.mind
 00000239  E8 00000000 E     1	call WriteDec
 0000023E  BA 0000062A R     1	mov edx, offset blank
 00000243  E8 00000000 E   *	    call   WriteString
 00000248  BA 00000108 R     1	mov edx, offset fortuneTitle ;//prints character fortune
 0000024D  E8 00000000 E   *	    call   WriteString
 00000252  A1 00000060 R     1	mov eax, c1.fortune
 00000257  E8 00000000 E     1	call WriteDec
 0000025C  BA 0000062A R     1	mov edx, offset blank
 00000261  E8 00000000 E   *	    call   WriteString
 00000266  BA 00000113 R     1	mov edx, offset combatAttributesTitle ;//prints primary attributes header
 0000026B  E8 00000000 E   *	    call   WriteString
 00000270  BA 0000012B R     1	mov edx, offset hpTitle ;//prints character hp
 00000275  E8 00000000 E   *	    call   WriteString
 0000027A  A1 00000068 R     1	mov eax, c1.hp
 0000027F  E8 00000000 E     1	call WriteDec
 00000284  B8 0000002F	     1	mov eax,'/'
 00000289  E8 00000000 E     1	call WriteChar
 0000028E  A1 00000064 R     1	mov eax, c1.hpMax
 00000293  E8 00000000 E     1	call WriteDec
 00000298  BA 0000062A R     1	mov edx, offset blank
 0000029D  E8 00000000 E   *	    call   WriteString
 000002A2  BA 00000131 R     1	mov edx, offset damageTitle ;//prints character damage
 000002A7  E8 00000000 E   *	    call   WriteString
 000002AC  A1 0000006C R     1	mov eax, c1.damageMin
 000002B1  E8 00000000 E     1	call WriteDec
 000002B6  B8 0000002D	     1	mov eax,'-'
 000002BB  E8 00000000 E     1	call WriteChar
 000002C0  A1 00000070 R     1	mov eax, c1.damageMax
 000002C5  E8 00000000 E     1	call WriteDec
 000002CA  BA 0000062A R     1	mov edx, offset blank
 000002CF  E8 00000000 E   *	    call   WriteString
 000002D4  BA 0000013B R     1	mov edx, offset defenceTitle ;//prints character defence
 000002D9  E8 00000000 E   *	    call   WriteString
 000002DE  A1 00000084 R     1	mov eax, c1.defence
 000002E3  E8 00000000 E     1	call WriteDec
 000002E8  BA 0000062A R     1	mov edx, offset blank
 000002ED  E8 00000000 E   *	    call   WriteString
 000002F2  BA 00000146 R     1	mov edx, offset equippedWeaponTitle
 000002F7  E8 00000000 E   *	    call   WriteString
 000002FC  A1 00000074 R     1	mov eax, c1.weaponCode
 00000301  83 F8 01	     2	cmp eax,1
 00000304  74 11	     2	je item0??0001
 00000306  83 F8 02	     2	cmp eax,2
 00000309  74 13	     2	je item1??0001
 0000030B  83 F8 03	     2	cmp eax,3
 0000030E  74 15	     2	je item2??0001
 00000310  83 F8 04	     2	cmp eax,4
 00000313  74 17	     2	je item3??0001
 00000315  EB 1C	     2	jmp default??0001
 00000317		     2	item0??0001:
 00000317  BA 00000000 R     2		mov edx, offset itemName1
 0000031C  EB 1A	     2		jmp print??0001
 0000031E		     2	item1??0001:
 0000031E  BA 00000007 R     2		mov edx, offset itemName2
 00000323  EB 13	     2		jmp print??0001
 00000325		     2	item2??0001:
 00000325  BA 0000000D R     2		mov edx, offset itemName3
 0000032A  EB 0C	     2		jmp print??0001
 0000032C		     2	item3??0001:
 0000032C  BA 00000015 R     2		mov edx, offset itemName4
 00000331  EB 05	     2		jmp print??0001
 00000333		     2	default??0001:
 00000333  BA 0000001B R     2		mov edx, offset defaultName
 00000338		     2	print??0001:
 00000338  E8 00000000 E   *	    call   WriteString
 0000033D  BA 0000062A R     1	mov edx, offset blank
 00000342  E8 00000000 E   *	    call   WriteString
 00000347  BA 00000603 R     1	mov edx, offset continueCommand
 0000034C  E8 00000000 E   *	    call   WriteString
 00000351  E8 00000000 E     2		call ReadDec
 00000356  8B C8	     2		mov ecx, eax
 00000358  E8 00000000 E     1	call clrscr
 0000035D  61		     1	popAD
 0000035E  E9 00002CC7				jmp end_switch
 00000363				combat:
						mCombat
 00000363  60		     1	pushAD
 00000364  60		     2	pushAD
 00000365  8B 1D 00000044 R  2	mov ebx, c1.level ;//initialize enemy hp
 0000036B  B8 00000003	     2	mov eax,3
 00000370  E8 00000000 E     2	call RandomRange
 00000375  40		     2	inc eax
 00000376  F7 E3	     2	mul ebx
 00000378  A3 00000184 R     2	mov e1.hpMax,eax
 0000037D  A3 00000188 R     2	mov e1.hp,eax
 00000382  B8 00000002	     2	mov eax, 2 ;//initialize enemy damage
 00000387  E8 00000000 E     2	call RandomRange
 0000038C  40		     2	inc eax
 0000038D  03 C3	     2	add eax,ebx
 0000038F  A3 0000018C R     2	mov e1.damageMin,eax
 00000394  8B C8	     2	mov ecx,eax
 00000396  B8 00000002	     2	mov eax,2
 0000039B  E8 00000000 E     2	call RandomRange
 000003A0  40		     2	inc eax
 000003A1  03 C1	     2	add eax,ecx
 000003A3  A3 00000190 R     2	mov e1.damageMax,eax
 000003A8  A1 00000184 R     2	mov eax,e1.hpMax ;//initialize expReward
 000003AD  BB 0000000A	     2	mov ebx,10
 000003B2  F7 E3	     2	mul ebx
 000003B4  A3 00000198 R     2	mov e1.expReward ,eax
 000003B9  61		     2	popAD
 000003BA  A1 00000064 R     1	mov eax,c1.hpMax
 000003BF  A3 00000068 R     1	mov c1.hp,eax
 000003C4  C6 05 0000019C R  1	mov escape        ,0 ;//combat end conditions
	   00
 000003CB  C6 05 0000019D R  1	mov playerDefeated,0
	   00
 000003D2  C6 05 0000019E R  1	mov enemyDefeated ,0
	   00
 000003D9		     1	WHILE_COMBAT??0003:    ;//disgusting triple & while statement
 000003D9  80 3D 0000019C R  1	cmp escape,0       ;//while &
	   00
 000003E0  74 05	     1	je AND_COMBAT1??0003
 000003E2  E9 000001B4	     1	jmp AND_FALSE_COMBAT??0003
 000003E7  80 3D 0000019D R  1	AND_COMBAT1??0003: cmp playerDefeated,0
	   00
 000003EE  74 05	     1	je AND_COMBAT2??0003
 000003F0  E9 000001A6	     1	jmp AND_FALSE_COMBAT??0003
 000003F5  80 3D 0000019E R  1	AND_COMBAT2??0003: cmp enemyDefeated,0
	   00
 000003FC  74 05	     1	je AND_COMBAT_TRUE??0003
 000003FE  E9 00000198	     1	jmp AND_FALSE_COMBAT??0003
 00000403		     1	AND_COMBAT_TRUE??0003:
 00000403  BA 0000019F R     1		mov edx, offset combatMenuTitle
 00000408  E8 00000000 E   *	    call   WriteString
 0000040D  BA 000001AC R     1		mov edx, offset enemyNameTitle ;//prints enemy name
 00000412  E8 00000000 E   *	    call   WriteString
 00000417  BA 0000017C R     1		mov edx, offset e1.enemyName
 0000041C  E8 00000000 E   *	    call   WriteString
 00000421  BA 0000062A R     1		mov edx, offset blank
 00000426  E8 00000000 E   *	    call   WriteString
 0000042B  BA 000001BA R     1		mov edx, offset enemyHpTitle ;//prints enemy hp
 00000430  E8 00000000 E   *	    call   WriteString
 00000435  A1 00000188 R     1		mov eax, e1.hp
 0000043A  E8 00000000 E     1		call WriteDec
 0000043F  B8 0000002F	     1		mov eax,'/'
 00000444  E8 00000000 E     1		call WriteChar
 00000449  A1 00000184 R     1		mov eax, e1.hpMax
 0000044E  E8 00000000 E     1		call WriteDec
 00000453  BA 0000062A R     1		mov edx, offset blank
 00000458  E8 00000000 E   *	    call   WriteString
 0000045D  BA 000001C6 R     1		mov edx, offset enemyDamageTitle ;//prints enemy damage
 00000462  E8 00000000 E   *	    call   WriteString
 00000467  A1 0000018C R     1		mov eax, e1.damageMin
 0000046C  E8 00000000 E     1		call WriteDec
 00000471  B8 0000002D	     1		mov eax,'-'
 00000476  E8 00000000 E     1		call WriteChar
 0000047B  A1 00000190 R     1		mov eax, e1.damageMax
 00000480  E8 00000000 E     1		call WriteDec
 00000485  BA 0000062A R     1		mov edx, offset blank
 0000048A  E8 00000000 E   *	    call   WriteString
 0000048F  BA 00000113 R     1		mov edx, offset combatAttributesTitle ;//prints primary attributes header
 00000494  E8 00000000 E   *	    call   WriteString
 00000499  BA 0000012B R     1		mov edx, offset hpTitle ;//prints character hp
 0000049E  E8 00000000 E   *	    call   WriteString
 000004A3  A1 00000068 R     1		mov eax, c1.hp
 000004A8  E8 00000000 E     1		call WriteDec
 000004AD  B8 0000002F	     1		mov eax,'/'
 000004B2  E8 00000000 E     1		call WriteChar
 000004B7  A1 00000064 R     1		mov eax, c1.hpMax
 000004BC  E8 00000000 E     1		call WriteDec
 000004C1  BA 0000062A R     1		mov edx, offset blank
 000004C6  E8 00000000 E   *	    call   WriteString
 000004CB  BA 00000131 R     1		mov edx, offset damageTitle ;//prints character damage
 000004D0  E8 00000000 E   *	    call   WriteString
 000004D5  A1 0000006C R     1		mov eax, c1.damageMin
 000004DA  E8 00000000 E     1		call WriteDec
 000004DF  B8 0000002D	     1		mov eax,'-'
 000004E4  E8 00000000 E     1		call WriteChar
 000004E9  A1 00000070 R     1		mov eax, c1.damageMax
 000004EE  E8 00000000 E     1		call WriteDec
 000004F3  BA 0000062A R     1		mov edx, offset blank
 000004F8  E8 00000000 E   *	    call   WriteString
 000004FD  BA 000001D6 R     1		mov edx, offset combatOptionsMenuTitle ;//prints combat Options
 00000502  E8 00000000 E   *	    call   WriteString
 00000507  BA 000001EB R     1		mov edx,offset attackTitle
 0000050C  E8 00000000 E   *	    call   WriteString
 00000511  BA 000001F7 R     1		mov edx,offset fleeTitle
 00000516  E8 00000000 E   *	    call   WriteString
 0000051B  E8 00000000 E     2		call ReadDec
 00000520  8B C8	     2		mov ecx, eax
 00000522  E8 00000000 E     1		call Clrscr
 00000527  83 F9 00	     1			cmp ecx, 0 ;//switch
 0000052A  74 07	     1			je attack
 0000052C  83 F9 01	     1			cmp ecx, 1
 0000052F  74 31	     1			je flee
 00000531  EB 36	     1			jmp end_switch??0003
 00000533		     1			attack:
 00000533  A1 00000070 R     1				mov eax,c1.damageMax;//player attacks
 00000538  8B 1D 0000006C R  1				mov ebx,c1.damageMin
 0000053E  2B C3	     1				sub eax,ebx
 00000540  40		     1				inc eax
 00000541  E8 00000000 E     1				call RandomRange
 00000546  03 C3	     1				add eax,ebx
 00000548  29 05 00000188 R  1				sub e1.hp,eax
 0000054E  83 3D 00000188 R  1				cmp e1.hp,0 ;//check to see if enemy died
	   00
 00000555  7E 02	     1				jle enemy_dead
 00000557  EB 10	     1				jmp end_switch??0003
 00000559		     1				enemy_dead:
 00000559  C6 05 0000019E R  1					mov enemyDefeated,1
	   01
 00000560  EB 39	     1					jmp AND_FALSE_COMBAT??0003
 00000562		     1			flee:
 00000562  C6 05 0000019C R  1				mov escape,1
	   01
 00000569		     1			end_switch??0003:
 00000569  A1 00000190 R     1				mov eax,e1.damageMax;//enemy attacks
 0000056E  8B 1D 0000018C R  1				mov ebx,e1.damageMin
 00000574  2B C3	     1				sub eax,ebx
 00000576  40		     1				inc eax
 00000577  E8 00000000 E     1				call RandomRange
 0000057C  03 C3	     1				add eax,ebx
 0000057E  29 05 00000068 R  1				sub c1.hp,eax
 00000584  83 3D 00000068 R  1				cmp c1.hp,0    ;// checking to see if character died
	   00
 0000058B  7E 02	     1				jle character_dead
 0000058D  EB 07	     1				jmp character_not_dead
 0000058F		     1				character_dead:
 0000058F  C6 05 0000019D R  1					mov playerDefeated,1
	   01
 00000596		     1				character_not_dead:
 00000596  E9 FFFFFE3E	     1			jmp WHILE_COMBAT??0003;//default
 0000059B		     1	AND_FALSE_COMBAT??0003:
 0000059B  80 3D 0000019C R  1	cmp escape,0
	   00
 000005A2  74 0F	     1	je not_escape
 000005A4  BA 00000201 R     1	mov edx, offset escapeEvent;//will print if player fleed
 000005A9  E8 00000000 E   *	    call   WriteString
 000005AE  E9 00000094	     1	jmp eventDetermined
 000005B3		     1	not_escape:
 000005B3  80 3D 0000019D R  1	cmp playerDefeated,0
	   00
 000005BA  74 0C	     1	je not_playerDefeated
 000005BC  BA 00000210 R     1	mov edx, offset playerDefeatedEvent;//will print if player was defeated
 000005C1  E8 00000000 E   *	    call   WriteString
 000005C6  EB 7F	     1	jmp eventDetermined
 000005C8		     1	not_playerDefeated:
 000005C8  BA 00000224 R     1	mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
 000005CD  E8 00000000 E   *	    call   WriteString
 000005D2  B8 0000037F R     1	mov eax, offset t1 ;//adds axe to inventory
 000005D7  BB 00000363 R     2	mov ebx, offset i1
 000005DC		     2	notEmpty??0005:
 000005DC  83 3B 00	     2	cmp [ebx].item.itemCode,0
 000005DF  74 0B	     2	je isEmpty??0005 
 000005E1  83 7B 10 00	     2	cmp [ebx].item.next,null
 000005E5  74 1D	     2	je inventoryFull??0005
 000005E7  8B 5B 10	     2	mov ebx,[ebx].item.next
 000005EA  EB F0	     2	jmp notEmpty??0005
 000005EC		     2	isEmpty??0005:
 000005EC  8B 08	     2	mov ecx, [eax].item.itemCode
 000005EE  89 0B	     2	mov [ebx].item.itemCode,ecx
 000005F0  8B 48 04	     2	mov ecx, [eax].item.buyValue
 000005F3  89 4B 04	     2	mov [ebx].item.buyValue,ecx
 000005F6  8B 48 08	     2	mov ecx, [eax].item.sellValue
 000005F9  89 4B 08	     2	mov [ebx].item.sellValue,ecx
 000005FC  8B 48 14	     2	mov ecx, [eax].item.combatValue
 000005FF  89 4B 14	     2	mov [ebx].item.combatValue,ecx
 00000602  EB 19	     2	jmp end??0005
 00000604		     2	inventoryFull??0005:
 00000604  BA 0000042C R     2	mov edx, offset inventoryFullTitle
 00000609  E8 00000000 E   *	    call   WriteString
 0000060E  B8 000005DC	     2	mov eax, 1500
 00000613  E8 00000000 E     2	call Delay
 00000618  E8 00000000 E     2	call clrscr
 0000061D		     2	end??0005:
 0000061D  A1 00000044 R     1	mov eax, c1.level
 00000622  B9 0000000A	     1	mov ecx,10
 00000627  F7 E1	     1	mul ecx
 00000629  E8 00000000 E     1	call RandomRange
 0000062E  8B 1D 00000050 R  1	mov ebx,c1.gold
 00000634  03 D8	     1	add ebx,eax
 00000636  89 1D 00000050 R  1	mov c1.gold,ebx
 0000063C  A1 00000198 R     1	mov eax,e1.expReward ;//rewarding player exp
 00000641  01 05 00000048 R  1	add c1.exp,eax
 00000647		     1	eventDetermined:
 00000647  B8 000007D0	     1	mov eax,2000
 0000064C  E8 00000000 E     1	call Delay
 00000651  E8 00000000 E     1	call Clrscr
 00000656  61		     1	popAD
 00000657  E9 000029CE				jmp end_switch
 0000065C				levelUp:
						mLevelUp
 0000065C  60		     1	pushAD
 0000065D  A1 00000048 R     1	mov eax,c1.exp
 00000662  8B 1D 0000004C R  1	mov ebx,c1.expToNext
 00000668  3B C3	     1	cmp eax,ebx
 0000066A  7C 7B	     1	jl notEnough
 0000066C  FF 05 00000044 R  1	inc c1.level
 00000672  60		     2	pushAD

 00000673  FF 05 00000054 R  2	inc c1.brawn   ;// sets primary attributes
 00000679  FF 05 00000058 R  2	inc c1.agility
 0000067F  FF 05 0000005C R  2	inc c1.mind   
 00000685  FF 05 00000060 R  2	inc c1.fortune
 0000068B  A1 00000054 R     2	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000690  D1 E0	     2	sal eax,1 ;// multiply by 2
 00000692  A3 00000064 R     2	mov c1.hpMax,eax
 00000697  A3 00000068 R     2	mov c1.hp,eax
 0000069C  A1 00000054 R     2	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000006A1  D1 F8	     2	sar eax,1;//divide by 2
 000006A3  03 05 00000080 R  2	add eax,c1.weaponDamage
 000006A9  A3 0000006C R     2	mov c1.damageMin,eax
 000006AE  8B 1D 00000058 R  2	mov ebx,c1.agility
 000006B4  C1 FB 02	     2	sar ebx,2;//divide by 4
 000006B7  03 C3	     2	add eax,ebx
 000006B9  A3 00000070 R     2	mov c1.damageMax,eax
 000006BE  61		     2	popAD
 000006BF  A1 00000048 R     1	mov eax,c1.exp
 000006C4  8B 1D 0000004C R  1	mov ebx,c1.expToNext
 000006CA  2B C3	     1	sub eax,ebx
 000006CC  A3 00000048 R     1	mov c1.exp,eax
 000006D1  BA 00000255 R     1	mov edx,offset leveledUpResponse
 000006D6  E8 00000000 E   *	    call   WriteString
 000006DB  B8 000007D0	     1	mov eax,2000
 000006E0  E8 00000000 E     1	call Delay
 000006E5  EB 14	     1	jmp leveledUp
 000006E7		     1	notEnough:
 000006E7  BA 0000023D R     1	mov edx,offset notEnoughResponse
 000006EC  E8 00000000 E   *	    call   WriteString
 000006F1  B8 000007D0	     1	mov eax,2000
 000006F6  E8 00000000 E     1	call Delay
 000006FB		     1	leveledUp:
 000006FB  E8 00000000 E     1	call Clrscr
 00000700  61		     1	popAD
 00000701  E9 00002924				jmp end_switch
 00000706				inventory:
						mInventory
 00000706  BA 000003A3 R     1	mov edx, offset selectItemTitle
 0000070B  E8 00000000 E     1	call WriteString
 00000710  BB 00000363 R     1	mov eBx, offset i1
 00000715  60		     2	pushAD
 00000716  33 C9	     2	xor ecx,ecx
 00000718		     2	DO1??0006:
 00000718  8B C1	     2	mov eax,ecx
 0000071A  E8 00000000 E     2	call WriteDec
 0000071F  B8 0000003A	     2	mov eax, ':'
 00000724  E8 00000000 E     2	call WriteChar
 00000729  8B 03	     2	mov eax, [ebx].item.itemCode
 0000072B  83 F8 01	     3	cmp eax,1
 0000072E  74 11	     3	je item0??0007
 00000730  83 F8 02	     3	cmp eax,2
 00000733  74 13	     3	je item1??0007
 00000735  83 F8 03	     3	cmp eax,3
 00000738  74 15	     3	je item2??0007
 0000073A  83 F8 04	     3	cmp eax,4
 0000073D  74 17	     3	je item3??0007
 0000073F  EB 1C	     3	jmp default??0007
 00000741		     3	item0??0007:
 00000741  BA 00000000 R     3		mov edx, offset itemName1
 00000746  EB 1A	     3		jmp print??0007
 00000748		     3	item1??0007:
 00000748  BA 00000007 R     3		mov edx, offset itemName2
 0000074D  EB 13	     3		jmp print??0007
 0000074F		     3	item2??0007:
 0000074F  BA 0000000D R     3		mov edx, offset itemName3
 00000754  EB 0C	     3		jmp print??0007
 00000756		     3	item3??0007:
 00000756  BA 00000015 R     3		mov edx, offset itemName4
 0000075B  EB 05	     3		jmp print??0007
 0000075D		     3	default??0007:
 0000075D  BA 0000001B R     3		mov edx, offset defaultName
 00000762		     3	print??0007:
 00000762  E8 00000000 E   *	    call   WriteString
 00000767  BA 0000062A R     2	mov edx,offset blank
 0000076C  E8 00000000 E     2	call WriteString
 00000771  8B 5B 10	     2	mov eBx,[ebx].item.next
 00000774  41		     2	inc ecx
 00000775  83 FB 00	     2	cmp ebx,null
 00000778  75 9E	     2	jne DO1??0006
 0000077A  61		     2	popAD
 0000077B  E8 00000000 E     2		call ReadDec
 00000780  8B C8	     2		mov ecx, eax
 00000782  83 F9 00	     1	cmp ecx,0
 00000785  74 51	     1		je item0
 00000787  83 F9 01	     1	cmp ecx,1
 0000078A  0F 84 00000298    1		je item1
 00000790  83 F9 02	     1	cmp ecx,2
 00000793  0F 84 000004DF    1		je item2
 00000799  83 F9 03	     1	cmp ecx,3
 0000079C  0F 84 00000726    1		je item3
 000007A2  83 F9 04	     1	cmp ecx,4
 000007A5  0F 84 0000096D    1		je item4
 000007AB  83 F9 05	     1	cmp ecx,5
 000007AE  0F 84 00000BB4    1		je item5
 000007B4  83 F9 06	     1	cmp ecx,6
 000007B7  0F 84 00000DFB    1		je item6
 000007BD  83 F9 07	     1	cmp ecx,7
 000007C0  0F 84 00001042    1		je item7
 000007C6  83 F9 08	     1	cmp ecx,8
 000007C9  0F 84 00001289    1		je item8
 000007CF  83 F9 09	     1	cmp ecx,9
 000007D2  0F 84 000014D0    1		je item9
 000007D8		     1	item0:
 000007D8  BB 00000363 R     1		mov ebx,offset i1 ;//storing item for use
 000007DD  BA 0000061D R     2	mov edx, offset exitTitle
 000007E2  E8 00000000 E     2	call WriteString
 000007E7  BA 000003B8 R     2	mov edx, offset discardTitle
 000007EC  E8 00000000 E     2	call WriteString
 000007F1  BA 000003C6 R     2	mov edx, offset equipTitle
 000007F6  E8 00000000 E     2	call WriteString
 000007FB  BA 000003D2 R     2	mov edx, offset infoTitle
 00000800  E8 00000000 E     2	call WriteString
 00000805  E8 00000000 E     3		call ReadDec
 0000080A  8B C8	     3		mov ecx, eax
 0000080C  81 F9 0000038D    2	cmp ecx,909
 00000812  74 18	     2	je exit??0009
 00000814  83 F9 01	     2	cmp ecx,1
 00000817  74 18	     2	je removeItem??0009
 00000819  83 F9 02	     2	cmp ecx,2
 0000081C  74 2C	     2	je equipItem??0009
 0000081E  83 F9 03	     2	cmp ecx,3
 00000821  0F 84 0000018F    2	je infoItem??0009
 00000827  E9 000001F7	     2	jmp endCase??0009
 0000082C		     2	exit??0009:
 0000082C  E9 000001F2	     2		jmp endCase??0009
 00000831		     2	removeItem??0009:
 00000831  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000837  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000083E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000845  E9 000001D9	     2		jmp endCase??0009
 0000084A		     2	equipItem??0009:
 0000084A  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00000851  0F 84 000000D9    3	je notEquipped??000B
 00000857  8B D3	     3	mov edx,ebx
 00000859  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 00000860  0F 84 000000C8    4	je nothingEquipped??000C
 00000866  BB 00000363 R     4	mov ebx, offset i1
 0000086B		     4	notEmpty??000C:
 0000086B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 0000086E  74 0F	     4	je isEmpty??000C 
 00000870  83 7B 10 00	     4	cmp [ebx].item.next,null
 00000874  0F 84 0000009B    4	je inventoryFull??000C
 0000087A  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000087D  EB EC	     4	jmp notEmpty??000C
 0000087F		     4	isEmpty??000C:
 0000087F  A1 00000074 R     4	mov eax, c1.weaponCode
 00000884  89 03	     4	mov [ebx].item.itemCode,eax
 00000886  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 00000890  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 00000895  89 43 04	     4	mov [ebx].item.buyValue,eax
 00000898  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 000008A2  A1 0000007C R     4	mov eax, c1.weaponSellValue
 000008A7  89 43 08	     4	mov [ebx].item.sellValue,eax
 000008AA  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 000008B4  A1 00000080 R     4	mov eax, c1.weaponDamage
 000008B9  89 43 14	     4	mov [ebx].item.combatValue,eax
 000008BC  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 000008C6  60		     5	pushAD
 000008C7  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 000008CD  FF 05 00000058 R  5	inc c1.agility
 000008D3  FF 05 0000005C R  5	inc c1.mind   
 000008D9  FF 05 00000060 R  5	inc c1.fortune
 000008DF  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000008E4  D1 E0	     5	sal eax,1 ;// multiply by 2
 000008E6  A3 00000064 R     5	mov c1.hpMax,eax
 000008EB  A3 00000068 R     5	mov c1.hp,eax
 000008F0  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000008F5  D1 F8	     5	sar eax,1;//divide by 2
 000008F7  03 05 00000080 R  5	add eax,c1.weaponDamage
 000008FD  A3 0000006C R     5	mov c1.damageMin,eax
 00000902  8B 1D 00000058 R  5	mov ebx,c1.agility
 00000908  C1 FB 02	     5	sar ebx,2;//divide by 4
 0000090B  03 C3	     5	add eax,ebx
 0000090D  A3 00000070 R     5	mov c1.damageMax,eax
 00000912  61		     5	popAD
 00000913  EB 19	     4	jmp nothingEquipped??000C
 00000915		     4	inventoryFull??000C:
 00000915  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 0000091A  E8 00000000 E   *	    call   WriteString
 0000091F  B8 000005DC	     4	mov eax, 1500
 00000924  E8 00000000 E     4	call Delay
 00000929  E8 00000000 E     4	call clrscr
 0000092E		     4	nothingEquipped??000C:
 0000092E  8B DA	     3	mov ebx,edx
 00000930		     3	notEquipped??000B:
 00000930  8B 13	     3	mov edx, [ebx].item.itemCode
 00000932  89 15 00000074 R  3	mov c1.weaponCode, edx
 00000938  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000093B  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00000941  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000944  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 0000094A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 0000094D  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00000953  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000959  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000960  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000967  60		     4	pushAD
 00000968  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 0000096E  FF 05 00000058 R  4	inc c1.agility
 00000974  FF 05 0000005C R  4	inc c1.mind   
 0000097A  FF 05 00000060 R  4	inc c1.fortune
 00000980  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000985  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000987  A3 00000064 R     4	mov c1.hpMax,eax
 0000098C  A3 00000068 R     4	mov c1.hp,eax
 00000991  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000996  D1 F8	     4	sar eax,1;//divide by 2
 00000998  03 05 00000080 R  4	add eax,c1.weaponDamage
 0000099E  A3 0000006C R     4	mov c1.damageMin,eax
 000009A3  8B 1D 00000058 R  4	mov ebx,c1.agility
 000009A9  C1 FB 02	     4	sar ebx,2;//divide by 4
 000009AC  03 C3	     4	add eax,ebx
 000009AE  A3 00000070 R     4	mov c1.damageMax,eax
 000009B3  61		     4	popAD
 000009B4  EB 6D	     2		jmp endCase??0009
 000009B6		     2	infoItem??0009:
 000009B6  E8 00000000 E     2		call clrscr
 000009BB  BA 0000062A R     3	mov edx, offset blank
 000009C0  E8 00000000 E     3	call WriteString
 000009C5  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000009CA  E8 00000000 E     3	call WriteString
 000009CF  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000009D2  E8 00000000 E     3	call WriteDec
 000009D7  BA 0000062A R     3	mov edx, offset blank
 000009DC  E8 00000000 E     3	call WriteString
 000009E1  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000009E6  E8 00000000 E     3	call WriteString
 000009EB  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000009EE  E8 00000000 E     3	call WriteDec
 000009F3  BA 0000062A R     3	mov edx, offset blank
 000009F8  E8 00000000 E     3	call WriteString
 000009FD  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000A02  E8 00000000 E     3	call WriteString
 00000A07  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000A0A  E8 00000000 E     3	call WriteDec
 00000A0F  BA 0000062A R     3	mov edx, offset blank
 00000A14  E8 00000000 E     3	call WriteString
 00000A19  B8 000007D0	     2		mov eax,2000
 00000A1E  E8 00000000 E     2		call Delay
 00000A23		     2	endCase??0009:
 00000A23  E9 000014CD	     1		jmp endInventory
 00000A28		     1	item1:
 00000A28  BB 00000347 R     1		mov ebx,offset i2 ;//storing item for use
 00000A2D  BA 0000061D R     2	mov edx, offset exitTitle
 00000A32  E8 00000000 E     2	call WriteString
 00000A37  BA 000003B8 R     2	mov edx, offset discardTitle
 00000A3C  E8 00000000 E     2	call WriteString
 00000A41  BA 000003C6 R     2	mov edx, offset equipTitle
 00000A46  E8 00000000 E     2	call WriteString
 00000A4B  BA 000003D2 R     2	mov edx, offset infoTitle
 00000A50  E8 00000000 E     2	call WriteString
 00000A55  E8 00000000 E     3		call ReadDec
 00000A5A  8B C8	     3		mov ecx, eax
 00000A5C  81 F9 0000038D    2	cmp ecx,909
 00000A62  74 18	     2	je exit??000D
 00000A64  83 F9 01	     2	cmp ecx,1
 00000A67  74 18	     2	je removeItem??000D
 00000A69  83 F9 02	     2	cmp ecx,2
 00000A6C  74 2C	     2	je equipItem??000D
 00000A6E  83 F9 03	     2	cmp ecx,3
 00000A71  0F 84 0000018F    2	je infoItem??000D
 00000A77  E9 000001F7	     2	jmp endCase??000D
 00000A7C		     2	exit??000D:
 00000A7C  E9 000001F2	     2		jmp endCase??000D
 00000A81		     2	removeItem??000D:
 00000A81  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000A87  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000A8E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000A95  E9 000001D9	     2		jmp endCase??000D
 00000A9A		     2	equipItem??000D:
 00000A9A  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00000AA1  0F 84 000000D9    3	je notEquipped??000F
 00000AA7  8B D3	     3	mov edx,ebx
 00000AA9  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 00000AB0  0F 84 000000C8    4	je nothingEquipped??0010
 00000AB6  BB 00000363 R     4	mov ebx, offset i1
 00000ABB		     4	notEmpty??0010:
 00000ABB  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00000ABE  74 0F	     4	je isEmpty??0010 
 00000AC0  83 7B 10 00	     4	cmp [ebx].item.next,null
 00000AC4  0F 84 0000009B    4	je inventoryFull??0010
 00000ACA  8B 5B 10	     4	mov ebx,[ebx].item.next
 00000ACD  EB EC	     4	jmp notEmpty??0010
 00000ACF		     4	isEmpty??0010:
 00000ACF  A1 00000074 R     4	mov eax, c1.weaponCode
 00000AD4  89 03	     4	mov [ebx].item.itemCode,eax
 00000AD6  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 00000AE0  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 00000AE5  89 43 04	     4	mov [ebx].item.buyValue,eax
 00000AE8  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 00000AF2  A1 0000007C R     4	mov eax, c1.weaponSellValue
 00000AF7  89 43 08	     4	mov [ebx].item.sellValue,eax
 00000AFA  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 00000B04  A1 00000080 R     4	mov eax, c1.weaponDamage
 00000B09  89 43 14	     4	mov [ebx].item.combatValue,eax
 00000B0C  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 00000B16  60		     5	pushAD
 00000B17  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 00000B1D  FF 05 00000058 R  5	inc c1.agility
 00000B23  FF 05 0000005C R  5	inc c1.mind   
 00000B29  FF 05 00000060 R  5	inc c1.fortune
 00000B2F  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000B34  D1 E0	     5	sal eax,1 ;// multiply by 2
 00000B36  A3 00000064 R     5	mov c1.hpMax,eax
 00000B3B  A3 00000068 R     5	mov c1.hp,eax
 00000B40  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000B45  D1 F8	     5	sar eax,1;//divide by 2
 00000B47  03 05 00000080 R  5	add eax,c1.weaponDamage
 00000B4D  A3 0000006C R     5	mov c1.damageMin,eax
 00000B52  8B 1D 00000058 R  5	mov ebx,c1.agility
 00000B58  C1 FB 02	     5	sar ebx,2;//divide by 4
 00000B5B  03 C3	     5	add eax,ebx
 00000B5D  A3 00000070 R     5	mov c1.damageMax,eax
 00000B62  61		     5	popAD
 00000B63  EB 19	     4	jmp nothingEquipped??0010
 00000B65		     4	inventoryFull??0010:
 00000B65  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 00000B6A  E8 00000000 E   *	    call   WriteString
 00000B6F  B8 000005DC	     4	mov eax, 1500
 00000B74  E8 00000000 E     4	call Delay
 00000B79  E8 00000000 E     4	call clrscr
 00000B7E		     4	nothingEquipped??0010:
 00000B7E  8B DA	     3	mov ebx,edx
 00000B80		     3	notEquipped??000F:
 00000B80  8B 13	     3	mov edx, [ebx].item.itemCode
 00000B82  89 15 00000074 R  3	mov c1.weaponCode, edx
 00000B88  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000B8B  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00000B91  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000B94  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 00000B9A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000B9D  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00000BA3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000BA9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000BB0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000BB7  60		     4	pushAD
 00000BB8  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 00000BBE  FF 05 00000058 R  4	inc c1.agility
 00000BC4  FF 05 0000005C R  4	inc c1.mind   
 00000BCA  FF 05 00000060 R  4	inc c1.fortune
 00000BD0  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000BD5  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000BD7  A3 00000064 R     4	mov c1.hpMax,eax
 00000BDC  A3 00000068 R     4	mov c1.hp,eax
 00000BE1  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000BE6  D1 F8	     4	sar eax,1;//divide by 2
 00000BE8  03 05 00000080 R  4	add eax,c1.weaponDamage
 00000BEE  A3 0000006C R     4	mov c1.damageMin,eax
 00000BF3  8B 1D 00000058 R  4	mov ebx,c1.agility
 00000BF9  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000BFC  03 C3	     4	add eax,ebx
 00000BFE  A3 00000070 R     4	mov c1.damageMax,eax
 00000C03  61		     4	popAD
 00000C04  EB 6D	     2		jmp endCase??000D
 00000C06		     2	infoItem??000D:
 00000C06  E8 00000000 E     2		call clrscr
 00000C0B  BA 0000062A R     3	mov edx, offset blank
 00000C10  E8 00000000 E     3	call WriteString
 00000C15  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000C1A  E8 00000000 E     3	call WriteString
 00000C1F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000C22  E8 00000000 E     3	call WriteDec
 00000C27  BA 0000062A R     3	mov edx, offset blank
 00000C2C  E8 00000000 E     3	call WriteString
 00000C31  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000C36  E8 00000000 E     3	call WriteString
 00000C3B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000C3E  E8 00000000 E     3	call WriteDec
 00000C43  BA 0000062A R     3	mov edx, offset blank
 00000C48  E8 00000000 E     3	call WriteString
 00000C4D  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000C52  E8 00000000 E     3	call WriteString
 00000C57  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000C5A  E8 00000000 E     3	call WriteDec
 00000C5F  BA 0000062A R     3	mov edx, offset blank
 00000C64  E8 00000000 E     3	call WriteString
 00000C69  B8 000007D0	     2		mov eax,2000
 00000C6E  E8 00000000 E     2		call Delay
 00000C73		     2	endCase??000D:
 00000C73  E9 0000127D	     1		jmp endInventory
 00000C78		     1	item2:
 00000C78  BB 0000032B R     1		mov ebx,offset i3 ;//storing item for use
 00000C7D  BA 0000061D R     2	mov edx, offset exitTitle
 00000C82  E8 00000000 E     2	call WriteString
 00000C87  BA 000003B8 R     2	mov edx, offset discardTitle
 00000C8C  E8 00000000 E     2	call WriteString
 00000C91  BA 000003C6 R     2	mov edx, offset equipTitle
 00000C96  E8 00000000 E     2	call WriteString
 00000C9B  BA 000003D2 R     2	mov edx, offset infoTitle
 00000CA0  E8 00000000 E     2	call WriteString
 00000CA5  E8 00000000 E     3		call ReadDec
 00000CAA  8B C8	     3		mov ecx, eax
 00000CAC  81 F9 0000038D    2	cmp ecx,909
 00000CB2  74 18	     2	je exit??0011
 00000CB4  83 F9 01	     2	cmp ecx,1
 00000CB7  74 18	     2	je removeItem??0011
 00000CB9  83 F9 02	     2	cmp ecx,2
 00000CBC  74 2C	     2	je equipItem??0011
 00000CBE  83 F9 03	     2	cmp ecx,3
 00000CC1  0F 84 0000018F    2	je infoItem??0011
 00000CC7  E9 000001F7	     2	jmp endCase??0011
 00000CCC		     2	exit??0011:
 00000CCC  E9 000001F2	     2		jmp endCase??0011
 00000CD1		     2	removeItem??0011:
 00000CD1  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000CD7  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000CDE  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000CE5  E9 000001D9	     2		jmp endCase??0011
 00000CEA		     2	equipItem??0011:
 00000CEA  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00000CF1  0F 84 000000D9    3	je notEquipped??0013
 00000CF7  8B D3	     3	mov edx,ebx
 00000CF9  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 00000D00  0F 84 000000C8    4	je nothingEquipped??0014
 00000D06  BB 00000363 R     4	mov ebx, offset i1
 00000D0B		     4	notEmpty??0014:
 00000D0B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00000D0E  74 0F	     4	je isEmpty??0014 
 00000D10  83 7B 10 00	     4	cmp [ebx].item.next,null
 00000D14  0F 84 0000009B    4	je inventoryFull??0014
 00000D1A  8B 5B 10	     4	mov ebx,[ebx].item.next
 00000D1D  EB EC	     4	jmp notEmpty??0014
 00000D1F		     4	isEmpty??0014:
 00000D1F  A1 00000074 R     4	mov eax, c1.weaponCode
 00000D24  89 03	     4	mov [ebx].item.itemCode,eax
 00000D26  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 00000D30  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 00000D35  89 43 04	     4	mov [ebx].item.buyValue,eax
 00000D38  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 00000D42  A1 0000007C R     4	mov eax, c1.weaponSellValue
 00000D47  89 43 08	     4	mov [ebx].item.sellValue,eax
 00000D4A  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 00000D54  A1 00000080 R     4	mov eax, c1.weaponDamage
 00000D59  89 43 14	     4	mov [ebx].item.combatValue,eax
 00000D5C  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 00000D66  60		     5	pushAD
 00000D67  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 00000D6D  FF 05 00000058 R  5	inc c1.agility
 00000D73  FF 05 0000005C R  5	inc c1.mind   
 00000D79  FF 05 00000060 R  5	inc c1.fortune
 00000D7F  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000D84  D1 E0	     5	sal eax,1 ;// multiply by 2
 00000D86  A3 00000064 R     5	mov c1.hpMax,eax
 00000D8B  A3 00000068 R     5	mov c1.hp,eax
 00000D90  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000D95  D1 F8	     5	sar eax,1;//divide by 2
 00000D97  03 05 00000080 R  5	add eax,c1.weaponDamage
 00000D9D  A3 0000006C R     5	mov c1.damageMin,eax
 00000DA2  8B 1D 00000058 R  5	mov ebx,c1.agility
 00000DA8  C1 FB 02	     5	sar ebx,2;//divide by 4
 00000DAB  03 C3	     5	add eax,ebx
 00000DAD  A3 00000070 R     5	mov c1.damageMax,eax
 00000DB2  61		     5	popAD
 00000DB3  EB 19	     4	jmp nothingEquipped??0014
 00000DB5		     4	inventoryFull??0014:
 00000DB5  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 00000DBA  E8 00000000 E   *	    call   WriteString
 00000DBF  B8 000005DC	     4	mov eax, 1500
 00000DC4  E8 00000000 E     4	call Delay
 00000DC9  E8 00000000 E     4	call clrscr
 00000DCE		     4	nothingEquipped??0014:
 00000DCE  8B DA	     3	mov ebx,edx
 00000DD0		     3	notEquipped??0013:
 00000DD0  8B 13	     3	mov edx, [ebx].item.itemCode
 00000DD2  89 15 00000074 R  3	mov c1.weaponCode, edx
 00000DD8  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000DDB  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00000DE1  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000DE4  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 00000DEA  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000DED  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00000DF3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000DF9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000E00  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000E07  60		     4	pushAD
 00000E08  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 00000E0E  FF 05 00000058 R  4	inc c1.agility
 00000E14  FF 05 0000005C R  4	inc c1.mind   
 00000E1A  FF 05 00000060 R  4	inc c1.fortune
 00000E20  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000E25  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000E27  A3 00000064 R     4	mov c1.hpMax,eax
 00000E2C  A3 00000068 R     4	mov c1.hp,eax
 00000E31  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000E36  D1 F8	     4	sar eax,1;//divide by 2
 00000E38  03 05 00000080 R  4	add eax,c1.weaponDamage
 00000E3E  A3 0000006C R     4	mov c1.damageMin,eax
 00000E43  8B 1D 00000058 R  4	mov ebx,c1.agility
 00000E49  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000E4C  03 C3	     4	add eax,ebx
 00000E4E  A3 00000070 R     4	mov c1.damageMax,eax
 00000E53  61		     4	popAD
 00000E54  EB 6D	     2		jmp endCase??0011
 00000E56		     2	infoItem??0011:
 00000E56  E8 00000000 E     2		call clrscr
 00000E5B  BA 0000062A R     3	mov edx, offset blank
 00000E60  E8 00000000 E     3	call WriteString
 00000E65  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000E6A  E8 00000000 E     3	call WriteString
 00000E6F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000E72  E8 00000000 E     3	call WriteDec
 00000E77  BA 0000062A R     3	mov edx, offset blank
 00000E7C  E8 00000000 E     3	call WriteString
 00000E81  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000E86  E8 00000000 E     3	call WriteString
 00000E8B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000E8E  E8 00000000 E     3	call WriteDec
 00000E93  BA 0000062A R     3	mov edx, offset blank
 00000E98  E8 00000000 E     3	call WriteString
 00000E9D  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000EA2  E8 00000000 E     3	call WriteString
 00000EA7  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000EAA  E8 00000000 E     3	call WriteDec
 00000EAF  BA 0000062A R     3	mov edx, offset blank
 00000EB4  E8 00000000 E     3	call WriteString
 00000EB9  B8 000007D0	     2		mov eax,2000
 00000EBE  E8 00000000 E     2		call Delay
 00000EC3		     2	endCase??0011:
 00000EC3  E9 0000102D	     1		jmp endInventory
 00000EC8		     1	item3:
 00000EC8  BB 0000030F R     1		mov ebx,offset i4 ;//storing item for use
 00000ECD  BA 0000061D R     2	mov edx, offset exitTitle
 00000ED2  E8 00000000 E     2	call WriteString
 00000ED7  BA 000003B8 R     2	mov edx, offset discardTitle
 00000EDC  E8 00000000 E     2	call WriteString
 00000EE1  BA 000003C6 R     2	mov edx, offset equipTitle
 00000EE6  E8 00000000 E     2	call WriteString
 00000EEB  BA 000003D2 R     2	mov edx, offset infoTitle
 00000EF0  E8 00000000 E     2	call WriteString
 00000EF5  E8 00000000 E     3		call ReadDec
 00000EFA  8B C8	     3		mov ecx, eax
 00000EFC  81 F9 0000038D    2	cmp ecx,909
 00000F02  74 18	     2	je exit??0015
 00000F04  83 F9 01	     2	cmp ecx,1
 00000F07  74 18	     2	je removeItem??0015
 00000F09  83 F9 02	     2	cmp ecx,2
 00000F0C  74 2C	     2	je equipItem??0015
 00000F0E  83 F9 03	     2	cmp ecx,3
 00000F11  0F 84 0000018F    2	je infoItem??0015
 00000F17  E9 000001F7	     2	jmp endCase??0015
 00000F1C		     2	exit??0015:
 00000F1C  E9 000001F2	     2		jmp endCase??0015
 00000F21		     2	removeItem??0015:
 00000F21  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000F27  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000F2E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000F35  E9 000001D9	     2		jmp endCase??0015
 00000F3A		     2	equipItem??0015:
 00000F3A  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00000F41  0F 84 000000D9    3	je notEquipped??0017
 00000F47  8B D3	     3	mov edx,ebx
 00000F49  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 00000F50  0F 84 000000C8    4	je nothingEquipped??0018
 00000F56  BB 00000363 R     4	mov ebx, offset i1
 00000F5B		     4	notEmpty??0018:
 00000F5B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00000F5E  74 0F	     4	je isEmpty??0018 
 00000F60  83 7B 10 00	     4	cmp [ebx].item.next,null
 00000F64  0F 84 0000009B    4	je inventoryFull??0018
 00000F6A  8B 5B 10	     4	mov ebx,[ebx].item.next
 00000F6D  EB EC	     4	jmp notEmpty??0018
 00000F6F		     4	isEmpty??0018:
 00000F6F  A1 00000074 R     4	mov eax, c1.weaponCode
 00000F74  89 03	     4	mov [ebx].item.itemCode,eax
 00000F76  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 00000F80  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 00000F85  89 43 04	     4	mov [ebx].item.buyValue,eax
 00000F88  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 00000F92  A1 0000007C R     4	mov eax, c1.weaponSellValue
 00000F97  89 43 08	     4	mov [ebx].item.sellValue,eax
 00000F9A  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 00000FA4  A1 00000080 R     4	mov eax, c1.weaponDamage
 00000FA9  89 43 14	     4	mov [ebx].item.combatValue,eax
 00000FAC  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 00000FB6  60		     5	pushAD
 00000FB7  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 00000FBD  FF 05 00000058 R  5	inc c1.agility
 00000FC3  FF 05 0000005C R  5	inc c1.mind   
 00000FC9  FF 05 00000060 R  5	inc c1.fortune
 00000FCF  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000FD4  D1 E0	     5	sal eax,1 ;// multiply by 2
 00000FD6  A3 00000064 R     5	mov c1.hpMax,eax
 00000FDB  A3 00000068 R     5	mov c1.hp,eax
 00000FE0  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000FE5  D1 F8	     5	sar eax,1;//divide by 2
 00000FE7  03 05 00000080 R  5	add eax,c1.weaponDamage
 00000FED  A3 0000006C R     5	mov c1.damageMin,eax
 00000FF2  8B 1D 00000058 R  5	mov ebx,c1.agility
 00000FF8  C1 FB 02	     5	sar ebx,2;//divide by 4
 00000FFB  03 C3	     5	add eax,ebx
 00000FFD  A3 00000070 R     5	mov c1.damageMax,eax
 00001002  61		     5	popAD
 00001003  EB 19	     4	jmp nothingEquipped??0018
 00001005		     4	inventoryFull??0018:
 00001005  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 0000100A  E8 00000000 E   *	    call   WriteString
 0000100F  B8 000005DC	     4	mov eax, 1500
 00001014  E8 00000000 E     4	call Delay
 00001019  E8 00000000 E     4	call clrscr
 0000101E		     4	nothingEquipped??0018:
 0000101E  8B DA	     3	mov ebx,edx
 00001020		     3	notEquipped??0017:
 00001020  8B 13	     3	mov edx, [ebx].item.itemCode
 00001022  89 15 00000074 R  3	mov c1.weaponCode, edx
 00001028  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000102B  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00001031  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001034  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 0000103A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 0000103D  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00001043  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001049  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001050  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001057  60		     4	pushAD
 00001058  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 0000105E  FF 05 00000058 R  4	inc c1.agility
 00001064  FF 05 0000005C R  4	inc c1.mind   
 0000106A  FF 05 00000060 R  4	inc c1.fortune
 00001070  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001075  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001077  A3 00000064 R     4	mov c1.hpMax,eax
 0000107C  A3 00000068 R     4	mov c1.hp,eax
 00001081  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001086  D1 F8	     4	sar eax,1;//divide by 2
 00001088  03 05 00000080 R  4	add eax,c1.weaponDamage
 0000108E  A3 0000006C R     4	mov c1.damageMin,eax
 00001093  8B 1D 00000058 R  4	mov ebx,c1.agility
 00001099  C1 FB 02	     4	sar ebx,2;//divide by 4
 0000109C  03 C3	     4	add eax,ebx
 0000109E  A3 00000070 R     4	mov c1.damageMax,eax
 000010A3  61		     4	popAD
 000010A4  EB 6D	     2		jmp endCase??0015
 000010A6		     2	infoItem??0015:
 000010A6  E8 00000000 E     2		call clrscr
 000010AB  BA 0000062A R     3	mov edx, offset blank
 000010B0  E8 00000000 E     3	call WriteString
 000010B5  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000010BA  E8 00000000 E     3	call WriteString
 000010BF  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000010C2  E8 00000000 E     3	call WriteDec
 000010C7  BA 0000062A R     3	mov edx, offset blank
 000010CC  E8 00000000 E     3	call WriteString
 000010D1  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000010D6  E8 00000000 E     3	call WriteString
 000010DB  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000010DE  E8 00000000 E     3	call WriteDec
 000010E3  BA 0000062A R     3	mov edx, offset blank
 000010E8  E8 00000000 E     3	call WriteString
 000010ED  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000010F2  E8 00000000 E     3	call WriteString
 000010F7  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000010FA  E8 00000000 E     3	call WriteDec
 000010FF  BA 0000062A R     3	mov edx, offset blank
 00001104  E8 00000000 E     3	call WriteString
 00001109  B8 000007D0	     2		mov eax,2000
 0000110E  E8 00000000 E     2		call Delay
 00001113		     2	endCase??0015:
 00001113  E9 00000DDD	     1		jmp endInventory
 00001118		     1	item4:
 00001118  BB 000002F3 R     1		mov ebx,offset i5 ;//storing item for use
 0000111D  BA 0000061D R     2	mov edx, offset exitTitle
 00001122  E8 00000000 E     2	call WriteString
 00001127  BA 000003B8 R     2	mov edx, offset discardTitle
 0000112C  E8 00000000 E     2	call WriteString
 00001131  BA 000003C6 R     2	mov edx, offset equipTitle
 00001136  E8 00000000 E     2	call WriteString
 0000113B  BA 000003D2 R     2	mov edx, offset infoTitle
 00001140  E8 00000000 E     2	call WriteString
 00001145  E8 00000000 E     3		call ReadDec
 0000114A  8B C8	     3		mov ecx, eax
 0000114C  81 F9 0000038D    2	cmp ecx,909
 00001152  74 18	     2	je exit??0019
 00001154  83 F9 01	     2	cmp ecx,1
 00001157  74 18	     2	je removeItem??0019
 00001159  83 F9 02	     2	cmp ecx,2
 0000115C  74 2C	     2	je equipItem??0019
 0000115E  83 F9 03	     2	cmp ecx,3
 00001161  0F 84 0000018F    2	je infoItem??0019
 00001167  E9 000001F7	     2	jmp endCase??0019
 0000116C		     2	exit??0019:
 0000116C  E9 000001F2	     2		jmp endCase??0019
 00001171		     2	removeItem??0019:
 00001171  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001177  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000117E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001185  E9 000001D9	     2		jmp endCase??0019
 0000118A		     2	equipItem??0019:
 0000118A  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00001191  0F 84 000000D9    3	je notEquipped??001B
 00001197  8B D3	     3	mov edx,ebx
 00001199  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 000011A0  0F 84 000000C8    4	je nothingEquipped??001C
 000011A6  BB 00000363 R     4	mov ebx, offset i1
 000011AB		     4	notEmpty??001C:
 000011AB  83 3B 00	     4	cmp [ebx].item.itemCode,0
 000011AE  74 0F	     4	je isEmpty??001C 
 000011B0  83 7B 10 00	     4	cmp [ebx].item.next,null
 000011B4  0F 84 0000009B    4	je inventoryFull??001C
 000011BA  8B 5B 10	     4	mov ebx,[ebx].item.next
 000011BD  EB EC	     4	jmp notEmpty??001C
 000011BF		     4	isEmpty??001C:
 000011BF  A1 00000074 R     4	mov eax, c1.weaponCode
 000011C4  89 03	     4	mov [ebx].item.itemCode,eax
 000011C6  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 000011D0  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 000011D5  89 43 04	     4	mov [ebx].item.buyValue,eax
 000011D8  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 000011E2  A1 0000007C R     4	mov eax, c1.weaponSellValue
 000011E7  89 43 08	     4	mov [ebx].item.sellValue,eax
 000011EA  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 000011F4  A1 00000080 R     4	mov eax, c1.weaponDamage
 000011F9  89 43 14	     4	mov [ebx].item.combatValue,eax
 000011FC  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 00001206  60		     5	pushAD
 00001207  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 0000120D  FF 05 00000058 R  5	inc c1.agility
 00001213  FF 05 0000005C R  5	inc c1.mind   
 00001219  FF 05 00000060 R  5	inc c1.fortune
 0000121F  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001224  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001226  A3 00000064 R     5	mov c1.hpMax,eax
 0000122B  A3 00000068 R     5	mov c1.hp,eax
 00001230  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001235  D1 F8	     5	sar eax,1;//divide by 2
 00001237  03 05 00000080 R  5	add eax,c1.weaponDamage
 0000123D  A3 0000006C R     5	mov c1.damageMin,eax
 00001242  8B 1D 00000058 R  5	mov ebx,c1.agility
 00001248  C1 FB 02	     5	sar ebx,2;//divide by 4
 0000124B  03 C3	     5	add eax,ebx
 0000124D  A3 00000070 R     5	mov c1.damageMax,eax
 00001252  61		     5	popAD
 00001253  EB 19	     4	jmp nothingEquipped??001C
 00001255		     4	inventoryFull??001C:
 00001255  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 0000125A  E8 00000000 E   *	    call   WriteString
 0000125F  B8 000005DC	     4	mov eax, 1500
 00001264  E8 00000000 E     4	call Delay
 00001269  E8 00000000 E     4	call clrscr
 0000126E		     4	nothingEquipped??001C:
 0000126E  8B DA	     3	mov ebx,edx
 00001270		     3	notEquipped??001B:
 00001270  8B 13	     3	mov edx, [ebx].item.itemCode
 00001272  89 15 00000074 R  3	mov c1.weaponCode, edx
 00001278  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000127B  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00001281  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001284  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 0000128A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 0000128D  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00001293  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001299  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 000012A0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000012A7  60		     4	pushAD
 000012A8  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 000012AE  FF 05 00000058 R  4	inc c1.agility
 000012B4  FF 05 0000005C R  4	inc c1.mind   
 000012BA  FF 05 00000060 R  4	inc c1.fortune
 000012C0  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000012C5  D1 E0	     4	sal eax,1 ;// multiply by 2
 000012C7  A3 00000064 R     4	mov c1.hpMax,eax
 000012CC  A3 00000068 R     4	mov c1.hp,eax
 000012D1  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000012D6  D1 F8	     4	sar eax,1;//divide by 2
 000012D8  03 05 00000080 R  4	add eax,c1.weaponDamage
 000012DE  A3 0000006C R     4	mov c1.damageMin,eax
 000012E3  8B 1D 00000058 R  4	mov ebx,c1.agility
 000012E9  C1 FB 02	     4	sar ebx,2;//divide by 4
 000012EC  03 C3	     4	add eax,ebx
 000012EE  A3 00000070 R     4	mov c1.damageMax,eax
 000012F3  61		     4	popAD
 000012F4  EB 6D	     2		jmp endCase??0019
 000012F6		     2	infoItem??0019:
 000012F6  E8 00000000 E     2		call clrscr
 000012FB  BA 0000062A R     3	mov edx, offset blank
 00001300  E8 00000000 E     3	call WriteString
 00001305  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000130A  E8 00000000 E     3	call WriteString
 0000130F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001312  E8 00000000 E     3	call WriteDec
 00001317  BA 0000062A R     3	mov edx, offset blank
 0000131C  E8 00000000 E     3	call WriteString
 00001321  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001326  E8 00000000 E     3	call WriteString
 0000132B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 0000132E  E8 00000000 E     3	call WriteDec
 00001333  BA 0000062A R     3	mov edx, offset blank
 00001338  E8 00000000 E     3	call WriteString
 0000133D  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001342  E8 00000000 E     3	call WriteString
 00001347  8B 43 14	     3	mov eax, [ebx].item.combatValue
 0000134A  E8 00000000 E     3	call WriteDec
 0000134F  BA 0000062A R     3	mov edx, offset blank
 00001354  E8 00000000 E     3	call WriteString
 00001359  B8 000007D0	     2		mov eax,2000
 0000135E  E8 00000000 E     2		call Delay
 00001363		     2	endCase??0019:
 00001363  E9 00000B8D	     1		jmp endInventory
 00001368		     1	item5:
 00001368  BB 000002D7 R     1		mov ebx,offset i6 ;//storing item for use
 0000136D  BA 0000061D R     2	mov edx, offset exitTitle
 00001372  E8 00000000 E     2	call WriteString
 00001377  BA 000003B8 R     2	mov edx, offset discardTitle
 0000137C  E8 00000000 E     2	call WriteString
 00001381  BA 000003C6 R     2	mov edx, offset equipTitle
 00001386  E8 00000000 E     2	call WriteString
 0000138B  BA 000003D2 R     2	mov edx, offset infoTitle
 00001390  E8 00000000 E     2	call WriteString
 00001395  E8 00000000 E     3		call ReadDec
 0000139A  8B C8	     3		mov ecx, eax
 0000139C  81 F9 0000038D    2	cmp ecx,909
 000013A2  74 18	     2	je exit??001D
 000013A4  83 F9 01	     2	cmp ecx,1
 000013A7  74 18	     2	je removeItem??001D
 000013A9  83 F9 02	     2	cmp ecx,2
 000013AC  74 2C	     2	je equipItem??001D
 000013AE  83 F9 03	     2	cmp ecx,3
 000013B1  0F 84 0000018F    2	je infoItem??001D
 000013B7  E9 000001F7	     2	jmp endCase??001D
 000013BC		     2	exit??001D:
 000013BC  E9 000001F2	     2		jmp endCase??001D
 000013C1		     2	removeItem??001D:
 000013C1  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000013C7  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000013CE  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000013D5  E9 000001D9	     2		jmp endCase??001D
 000013DA		     2	equipItem??001D:
 000013DA  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 000013E1  0F 84 000000D9    3	je notEquipped??001F
 000013E7  8B D3	     3	mov edx,ebx
 000013E9  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 000013F0  0F 84 000000C8    4	je nothingEquipped??0020
 000013F6  BB 00000363 R     4	mov ebx, offset i1
 000013FB		     4	notEmpty??0020:
 000013FB  83 3B 00	     4	cmp [ebx].item.itemCode,0
 000013FE  74 0F	     4	je isEmpty??0020 
 00001400  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001404  0F 84 0000009B    4	je inventoryFull??0020
 0000140A  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000140D  EB EC	     4	jmp notEmpty??0020
 0000140F		     4	isEmpty??0020:
 0000140F  A1 00000074 R     4	mov eax, c1.weaponCode
 00001414  89 03	     4	mov [ebx].item.itemCode,eax
 00001416  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 00001420  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 00001425  89 43 04	     4	mov [ebx].item.buyValue,eax
 00001428  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 00001432  A1 0000007C R     4	mov eax, c1.weaponSellValue
 00001437  89 43 08	     4	mov [ebx].item.sellValue,eax
 0000143A  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 00001444  A1 00000080 R     4	mov eax, c1.weaponDamage
 00001449  89 43 14	     4	mov [ebx].item.combatValue,eax
 0000144C  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 00001456  60		     5	pushAD
 00001457  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 0000145D  FF 05 00000058 R  5	inc c1.agility
 00001463  FF 05 0000005C R  5	inc c1.mind   
 00001469  FF 05 00000060 R  5	inc c1.fortune
 0000146F  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001474  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001476  A3 00000064 R     5	mov c1.hpMax,eax
 0000147B  A3 00000068 R     5	mov c1.hp,eax
 00001480  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001485  D1 F8	     5	sar eax,1;//divide by 2
 00001487  03 05 00000080 R  5	add eax,c1.weaponDamage
 0000148D  A3 0000006C R     5	mov c1.damageMin,eax
 00001492  8B 1D 00000058 R  5	mov ebx,c1.agility
 00001498  C1 FB 02	     5	sar ebx,2;//divide by 4
 0000149B  03 C3	     5	add eax,ebx
 0000149D  A3 00000070 R     5	mov c1.damageMax,eax
 000014A2  61		     5	popAD
 000014A3  EB 19	     4	jmp nothingEquipped??0020
 000014A5		     4	inventoryFull??0020:
 000014A5  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 000014AA  E8 00000000 E   *	    call   WriteString
 000014AF  B8 000005DC	     4	mov eax, 1500
 000014B4  E8 00000000 E     4	call Delay
 000014B9  E8 00000000 E     4	call clrscr
 000014BE		     4	nothingEquipped??0020:
 000014BE  8B DA	     3	mov ebx,edx
 000014C0		     3	notEquipped??001F:
 000014C0  8B 13	     3	mov edx, [ebx].item.itemCode
 000014C2  89 15 00000074 R  3	mov c1.weaponCode, edx
 000014C8  8B 53 14	     3	mov edx, [ebx].item.combatValue
 000014CB  89 15 00000080 R  3	mov c1.weaponDamage, edx
 000014D1  8B 53 04	     3	mov edx, [ebx].item.buyValue
 000014D4  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 000014DA  8B 53 08	     3	mov edx,[ebx].item.sellValue
 000014DD  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 000014E3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 000014E9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 000014F0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000014F7  60		     4	pushAD
 000014F8  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 000014FE  FF 05 00000058 R  4	inc c1.agility
 00001504  FF 05 0000005C R  4	inc c1.mind   
 0000150A  FF 05 00000060 R  4	inc c1.fortune
 00001510  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001515  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001517  A3 00000064 R     4	mov c1.hpMax,eax
 0000151C  A3 00000068 R     4	mov c1.hp,eax
 00001521  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001526  D1 F8	     4	sar eax,1;//divide by 2
 00001528  03 05 00000080 R  4	add eax,c1.weaponDamage
 0000152E  A3 0000006C R     4	mov c1.damageMin,eax
 00001533  8B 1D 00000058 R  4	mov ebx,c1.agility
 00001539  C1 FB 02	     4	sar ebx,2;//divide by 4
 0000153C  03 C3	     4	add eax,ebx
 0000153E  A3 00000070 R     4	mov c1.damageMax,eax
 00001543  61		     4	popAD
 00001544  EB 6D	     2		jmp endCase??001D
 00001546		     2	infoItem??001D:
 00001546  E8 00000000 E     2		call clrscr
 0000154B  BA 0000062A R     3	mov edx, offset blank
 00001550  E8 00000000 E     3	call WriteString
 00001555  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000155A  E8 00000000 E     3	call WriteString
 0000155F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001562  E8 00000000 E     3	call WriteDec
 00001567  BA 0000062A R     3	mov edx, offset blank
 0000156C  E8 00000000 E     3	call WriteString
 00001571  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001576  E8 00000000 E     3	call WriteString
 0000157B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 0000157E  E8 00000000 E     3	call WriteDec
 00001583  BA 0000062A R     3	mov edx, offset blank
 00001588  E8 00000000 E     3	call WriteString
 0000158D  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001592  E8 00000000 E     3	call WriteString
 00001597  8B 43 14	     3	mov eax, [ebx].item.combatValue
 0000159A  E8 00000000 E     3	call WriteDec
 0000159F  BA 0000062A R     3	mov edx, offset blank
 000015A4  E8 00000000 E     3	call WriteString
 000015A9  B8 000007D0	     2		mov eax,2000
 000015AE  E8 00000000 E     2		call Delay
 000015B3		     2	endCase??001D:
 000015B3  E9 0000093D	     1		jmp endInventory
 000015B8		     1	item6:
 000015B8  BB 000002BB R     1		mov ebx,offset i7 ;//storing item for use
 000015BD  BA 0000061D R     2	mov edx, offset exitTitle
 000015C2  E8 00000000 E     2	call WriteString
 000015C7  BA 000003B8 R     2	mov edx, offset discardTitle
 000015CC  E8 00000000 E     2	call WriteString
 000015D1  BA 000003C6 R     2	mov edx, offset equipTitle
 000015D6  E8 00000000 E     2	call WriteString
 000015DB  BA 000003D2 R     2	mov edx, offset infoTitle
 000015E0  E8 00000000 E     2	call WriteString
 000015E5  E8 00000000 E     3		call ReadDec
 000015EA  8B C8	     3		mov ecx, eax
 000015EC  81 F9 0000038D    2	cmp ecx,909
 000015F2  74 18	     2	je exit??0021
 000015F4  83 F9 01	     2	cmp ecx,1
 000015F7  74 18	     2	je removeItem??0021
 000015F9  83 F9 02	     2	cmp ecx,2
 000015FC  74 2C	     2	je equipItem??0021
 000015FE  83 F9 03	     2	cmp ecx,3
 00001601  0F 84 0000018F    2	je infoItem??0021
 00001607  E9 000001F7	     2	jmp endCase??0021
 0000160C		     2	exit??0021:
 0000160C  E9 000001F2	     2		jmp endCase??0021
 00001611		     2	removeItem??0021:
 00001611  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001617  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000161E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001625  E9 000001D9	     2		jmp endCase??0021
 0000162A		     2	equipItem??0021:
 0000162A  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00001631  0F 84 000000D9    3	je notEquipped??0023
 00001637  8B D3	     3	mov edx,ebx
 00001639  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 00001640  0F 84 000000C8    4	je nothingEquipped??0024
 00001646  BB 00000363 R     4	mov ebx, offset i1
 0000164B		     4	notEmpty??0024:
 0000164B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 0000164E  74 0F	     4	je isEmpty??0024 
 00001650  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001654  0F 84 0000009B    4	je inventoryFull??0024
 0000165A  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000165D  EB EC	     4	jmp notEmpty??0024
 0000165F		     4	isEmpty??0024:
 0000165F  A1 00000074 R     4	mov eax, c1.weaponCode
 00001664  89 03	     4	mov [ebx].item.itemCode,eax
 00001666  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 00001670  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 00001675  89 43 04	     4	mov [ebx].item.buyValue,eax
 00001678  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 00001682  A1 0000007C R     4	mov eax, c1.weaponSellValue
 00001687  89 43 08	     4	mov [ebx].item.sellValue,eax
 0000168A  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 00001694  A1 00000080 R     4	mov eax, c1.weaponDamage
 00001699  89 43 14	     4	mov [ebx].item.combatValue,eax
 0000169C  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 000016A6  60		     5	pushAD
 000016A7  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 000016AD  FF 05 00000058 R  5	inc c1.agility
 000016B3  FF 05 0000005C R  5	inc c1.mind   
 000016B9  FF 05 00000060 R  5	inc c1.fortune
 000016BF  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000016C4  D1 E0	     5	sal eax,1 ;// multiply by 2
 000016C6  A3 00000064 R     5	mov c1.hpMax,eax
 000016CB  A3 00000068 R     5	mov c1.hp,eax
 000016D0  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000016D5  D1 F8	     5	sar eax,1;//divide by 2
 000016D7  03 05 00000080 R  5	add eax,c1.weaponDamage
 000016DD  A3 0000006C R     5	mov c1.damageMin,eax
 000016E2  8B 1D 00000058 R  5	mov ebx,c1.agility
 000016E8  C1 FB 02	     5	sar ebx,2;//divide by 4
 000016EB  03 C3	     5	add eax,ebx
 000016ED  A3 00000070 R     5	mov c1.damageMax,eax
 000016F2  61		     5	popAD
 000016F3  EB 19	     4	jmp nothingEquipped??0024
 000016F5		     4	inventoryFull??0024:
 000016F5  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 000016FA  E8 00000000 E   *	    call   WriteString
 000016FF  B8 000005DC	     4	mov eax, 1500
 00001704  E8 00000000 E     4	call Delay
 00001709  E8 00000000 E     4	call clrscr
 0000170E		     4	nothingEquipped??0024:
 0000170E  8B DA	     3	mov ebx,edx
 00001710		     3	notEquipped??0023:
 00001710  8B 13	     3	mov edx, [ebx].item.itemCode
 00001712  89 15 00000074 R  3	mov c1.weaponCode, edx
 00001718  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000171B  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00001721  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001724  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 0000172A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 0000172D  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00001733  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001739  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001740  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001747  60		     4	pushAD
 00001748  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 0000174E  FF 05 00000058 R  4	inc c1.agility
 00001754  FF 05 0000005C R  4	inc c1.mind   
 0000175A  FF 05 00000060 R  4	inc c1.fortune
 00001760  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001765  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001767  A3 00000064 R     4	mov c1.hpMax,eax
 0000176C  A3 00000068 R     4	mov c1.hp,eax
 00001771  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001776  D1 F8	     4	sar eax,1;//divide by 2
 00001778  03 05 00000080 R  4	add eax,c1.weaponDamage
 0000177E  A3 0000006C R     4	mov c1.damageMin,eax
 00001783  8B 1D 00000058 R  4	mov ebx,c1.agility
 00001789  C1 FB 02	     4	sar ebx,2;//divide by 4
 0000178C  03 C3	     4	add eax,ebx
 0000178E  A3 00000070 R     4	mov c1.damageMax,eax
 00001793  61		     4	popAD
 00001794  EB 6D	     2		jmp endCase??0021
 00001796		     2	infoItem??0021:
 00001796  E8 00000000 E     2		call clrscr
 0000179B  BA 0000062A R     3	mov edx, offset blank
 000017A0  E8 00000000 E     3	call WriteString
 000017A5  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000017AA  E8 00000000 E     3	call WriteString
 000017AF  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000017B2  E8 00000000 E     3	call WriteDec
 000017B7  BA 0000062A R     3	mov edx, offset blank
 000017BC  E8 00000000 E     3	call WriteString
 000017C1  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000017C6  E8 00000000 E     3	call WriteString
 000017CB  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000017CE  E8 00000000 E     3	call WriteDec
 000017D3  BA 0000062A R     3	mov edx, offset blank
 000017D8  E8 00000000 E     3	call WriteString
 000017DD  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000017E2  E8 00000000 E     3	call WriteString
 000017E7  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000017EA  E8 00000000 E     3	call WriteDec
 000017EF  BA 0000062A R     3	mov edx, offset blank
 000017F4  E8 00000000 E     3	call WriteString
 000017F9  B8 000007D0	     2		mov eax,2000
 000017FE  E8 00000000 E     2		call Delay
 00001803		     2	endCase??0021:
 00001803  E9 000006ED	     1		jmp endInventory
 00001808		     1	item7:
 00001808  BB 0000029F R     1		mov ebx,offset i8 ;//storing item for use
 0000180D  BA 0000061D R     2	mov edx, offset exitTitle
 00001812  E8 00000000 E     2	call WriteString
 00001817  BA 000003B8 R     2	mov edx, offset discardTitle
 0000181C  E8 00000000 E     2	call WriteString
 00001821  BA 000003C6 R     2	mov edx, offset equipTitle
 00001826  E8 00000000 E     2	call WriteString
 0000182B  BA 000003D2 R     2	mov edx, offset infoTitle
 00001830  E8 00000000 E     2	call WriteString
 00001835  E8 00000000 E     3		call ReadDec
 0000183A  8B C8	     3		mov ecx, eax
 0000183C  81 F9 0000038D    2	cmp ecx,909
 00001842  74 18	     2	je exit??0025
 00001844  83 F9 01	     2	cmp ecx,1
 00001847  74 18	     2	je removeItem??0025
 00001849  83 F9 02	     2	cmp ecx,2
 0000184C  74 2C	     2	je equipItem??0025
 0000184E  83 F9 03	     2	cmp ecx,3
 00001851  0F 84 0000018F    2	je infoItem??0025
 00001857  E9 000001F7	     2	jmp endCase??0025
 0000185C		     2	exit??0025:
 0000185C  E9 000001F2	     2		jmp endCase??0025
 00001861		     2	removeItem??0025:
 00001861  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001867  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000186E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001875  E9 000001D9	     2		jmp endCase??0025
 0000187A		     2	equipItem??0025:
 0000187A  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00001881  0F 84 000000D9    3	je notEquipped??0027
 00001887  8B D3	     3	mov edx,ebx
 00001889  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 00001890  0F 84 000000C8    4	je nothingEquipped??0028
 00001896  BB 00000363 R     4	mov ebx, offset i1
 0000189B		     4	notEmpty??0028:
 0000189B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 0000189E  74 0F	     4	je isEmpty??0028 
 000018A0  83 7B 10 00	     4	cmp [ebx].item.next,null
 000018A4  0F 84 0000009B    4	je inventoryFull??0028
 000018AA  8B 5B 10	     4	mov ebx,[ebx].item.next
 000018AD  EB EC	     4	jmp notEmpty??0028
 000018AF		     4	isEmpty??0028:
 000018AF  A1 00000074 R     4	mov eax, c1.weaponCode
 000018B4  89 03	     4	mov [ebx].item.itemCode,eax
 000018B6  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 000018C0  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 000018C5  89 43 04	     4	mov [ebx].item.buyValue,eax
 000018C8  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 000018D2  A1 0000007C R     4	mov eax, c1.weaponSellValue
 000018D7  89 43 08	     4	mov [ebx].item.sellValue,eax
 000018DA  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 000018E4  A1 00000080 R     4	mov eax, c1.weaponDamage
 000018E9  89 43 14	     4	mov [ebx].item.combatValue,eax
 000018EC  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 000018F6  60		     5	pushAD
 000018F7  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 000018FD  FF 05 00000058 R  5	inc c1.agility
 00001903  FF 05 0000005C R  5	inc c1.mind   
 00001909  FF 05 00000060 R  5	inc c1.fortune
 0000190F  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001914  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001916  A3 00000064 R     5	mov c1.hpMax,eax
 0000191B  A3 00000068 R     5	mov c1.hp,eax
 00001920  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001925  D1 F8	     5	sar eax,1;//divide by 2
 00001927  03 05 00000080 R  5	add eax,c1.weaponDamage
 0000192D  A3 0000006C R     5	mov c1.damageMin,eax
 00001932  8B 1D 00000058 R  5	mov ebx,c1.agility
 00001938  C1 FB 02	     5	sar ebx,2;//divide by 4
 0000193B  03 C3	     5	add eax,ebx
 0000193D  A3 00000070 R     5	mov c1.damageMax,eax
 00001942  61		     5	popAD
 00001943  EB 19	     4	jmp nothingEquipped??0028
 00001945		     4	inventoryFull??0028:
 00001945  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 0000194A  E8 00000000 E   *	    call   WriteString
 0000194F  B8 000005DC	     4	mov eax, 1500
 00001954  E8 00000000 E     4	call Delay
 00001959  E8 00000000 E     4	call clrscr
 0000195E		     4	nothingEquipped??0028:
 0000195E  8B DA	     3	mov ebx,edx
 00001960		     3	notEquipped??0027:
 00001960  8B 13	     3	mov edx, [ebx].item.itemCode
 00001962  89 15 00000074 R  3	mov c1.weaponCode, edx
 00001968  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000196B  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00001971  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001974  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 0000197A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 0000197D  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00001983  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001989  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001990  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001997  60		     4	pushAD
 00001998  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 0000199E  FF 05 00000058 R  4	inc c1.agility
 000019A4  FF 05 0000005C R  4	inc c1.mind   
 000019AA  FF 05 00000060 R  4	inc c1.fortune
 000019B0  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000019B5  D1 E0	     4	sal eax,1 ;// multiply by 2
 000019B7  A3 00000064 R     4	mov c1.hpMax,eax
 000019BC  A3 00000068 R     4	mov c1.hp,eax
 000019C1  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000019C6  D1 F8	     4	sar eax,1;//divide by 2
 000019C8  03 05 00000080 R  4	add eax,c1.weaponDamage
 000019CE  A3 0000006C R     4	mov c1.damageMin,eax
 000019D3  8B 1D 00000058 R  4	mov ebx,c1.agility
 000019D9  C1 FB 02	     4	sar ebx,2;//divide by 4
 000019DC  03 C3	     4	add eax,ebx
 000019DE  A3 00000070 R     4	mov c1.damageMax,eax
 000019E3  61		     4	popAD
 000019E4  EB 6D	     2		jmp endCase??0025
 000019E6		     2	infoItem??0025:
 000019E6  E8 00000000 E     2		call clrscr
 000019EB  BA 0000062A R     3	mov edx, offset blank
 000019F0  E8 00000000 E     3	call WriteString
 000019F5  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000019FA  E8 00000000 E     3	call WriteString
 000019FF  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001A02  E8 00000000 E     3	call WriteDec
 00001A07  BA 0000062A R     3	mov edx, offset blank
 00001A0C  E8 00000000 E     3	call WriteString
 00001A11  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001A16  E8 00000000 E     3	call WriteString
 00001A1B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00001A1E  E8 00000000 E     3	call WriteDec
 00001A23  BA 0000062A R     3	mov edx, offset blank
 00001A28  E8 00000000 E     3	call WriteString
 00001A2D  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001A32  E8 00000000 E     3	call WriteString
 00001A37  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00001A3A  E8 00000000 E     3	call WriteDec
 00001A3F  BA 0000062A R     3	mov edx, offset blank
 00001A44  E8 00000000 E     3	call WriteString
 00001A49  B8 000007D0	     2		mov eax,2000
 00001A4E  E8 00000000 E     2		call Delay
 00001A53		     2	endCase??0025:
 00001A53  E9 0000049D	     1		jmp endInventory
 00001A58		     1	item8:
 00001A58  BB 00000283 R     1		mov ebx,offset i9 ;//storing item for use
 00001A5D  BA 0000061D R     2	mov edx, offset exitTitle
 00001A62  E8 00000000 E     2	call WriteString
 00001A67  BA 000003B8 R     2	mov edx, offset discardTitle
 00001A6C  E8 00000000 E     2	call WriteString
 00001A71  BA 000003C6 R     2	mov edx, offset equipTitle
 00001A76  E8 00000000 E     2	call WriteString
 00001A7B  BA 000003D2 R     2	mov edx, offset infoTitle
 00001A80  E8 00000000 E     2	call WriteString
 00001A85  E8 00000000 E     3		call ReadDec
 00001A8A  8B C8	     3		mov ecx, eax
 00001A8C  81 F9 0000038D    2	cmp ecx,909
 00001A92  74 18	     2	je exit??0029
 00001A94  83 F9 01	     2	cmp ecx,1
 00001A97  74 18	     2	je removeItem??0029
 00001A99  83 F9 02	     2	cmp ecx,2
 00001A9C  74 2C	     2	je equipItem??0029
 00001A9E  83 F9 03	     2	cmp ecx,3
 00001AA1  0F 84 0000018F    2	je infoItem??0029
 00001AA7  E9 000001F7	     2	jmp endCase??0029
 00001AAC		     2	exit??0029:
 00001AAC  E9 000001F2	     2		jmp endCase??0029
 00001AB1		     2	removeItem??0029:
 00001AB1  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001AB7  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00001ABE  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001AC5  E9 000001D9	     2		jmp endCase??0029
 00001ACA		     2	equipItem??0029:
 00001ACA  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00001AD1  0F 84 000000D9    3	je notEquipped??002B
 00001AD7  8B D3	     3	mov edx,ebx
 00001AD9  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 00001AE0  0F 84 000000C8    4	je nothingEquipped??002C
 00001AE6  BB 00000363 R     4	mov ebx, offset i1
 00001AEB		     4	notEmpty??002C:
 00001AEB  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00001AEE  74 0F	     4	je isEmpty??002C 
 00001AF0  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001AF4  0F 84 0000009B    4	je inventoryFull??002C
 00001AFA  8B 5B 10	     4	mov ebx,[ebx].item.next
 00001AFD  EB EC	     4	jmp notEmpty??002C
 00001AFF		     4	isEmpty??002C:
 00001AFF  A1 00000074 R     4	mov eax, c1.weaponCode
 00001B04  89 03	     4	mov [ebx].item.itemCode,eax
 00001B06  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 00001B10  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 00001B15  89 43 04	     4	mov [ebx].item.buyValue,eax
 00001B18  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 00001B22  A1 0000007C R     4	mov eax, c1.weaponSellValue
 00001B27  89 43 08	     4	mov [ebx].item.sellValue,eax
 00001B2A  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 00001B34  A1 00000080 R     4	mov eax, c1.weaponDamage
 00001B39  89 43 14	     4	mov [ebx].item.combatValue,eax
 00001B3C  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 00001B46  60		     5	pushAD
 00001B47  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 00001B4D  FF 05 00000058 R  5	inc c1.agility
 00001B53  FF 05 0000005C R  5	inc c1.mind   
 00001B59  FF 05 00000060 R  5	inc c1.fortune
 00001B5F  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001B64  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001B66  A3 00000064 R     5	mov c1.hpMax,eax
 00001B6B  A3 00000068 R     5	mov c1.hp,eax
 00001B70  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001B75  D1 F8	     5	sar eax,1;//divide by 2
 00001B77  03 05 00000080 R  5	add eax,c1.weaponDamage
 00001B7D  A3 0000006C R     5	mov c1.damageMin,eax
 00001B82  8B 1D 00000058 R  5	mov ebx,c1.agility
 00001B88  C1 FB 02	     5	sar ebx,2;//divide by 4
 00001B8B  03 C3	     5	add eax,ebx
 00001B8D  A3 00000070 R     5	mov c1.damageMax,eax
 00001B92  61		     5	popAD
 00001B93  EB 19	     4	jmp nothingEquipped??002C
 00001B95		     4	inventoryFull??002C:
 00001B95  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 00001B9A  E8 00000000 E   *	    call   WriteString
 00001B9F  B8 000005DC	     4	mov eax, 1500
 00001BA4  E8 00000000 E     4	call Delay
 00001BA9  E8 00000000 E     4	call clrscr
 00001BAE		     4	nothingEquipped??002C:
 00001BAE  8B DA	     3	mov ebx,edx
 00001BB0		     3	notEquipped??002B:
 00001BB0  8B 13	     3	mov edx, [ebx].item.itemCode
 00001BB2  89 15 00000074 R  3	mov c1.weaponCode, edx
 00001BB8  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00001BBB  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00001BC1  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001BC4  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 00001BCA  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00001BCD  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00001BD3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001BD9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001BE0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001BE7  60		     4	pushAD
 00001BE8  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 00001BEE  FF 05 00000058 R  4	inc c1.agility
 00001BF4  FF 05 0000005C R  4	inc c1.mind   
 00001BFA  FF 05 00000060 R  4	inc c1.fortune
 00001C00  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001C05  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001C07  A3 00000064 R     4	mov c1.hpMax,eax
 00001C0C  A3 00000068 R     4	mov c1.hp,eax
 00001C11  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001C16  D1 F8	     4	sar eax,1;//divide by 2
 00001C18  03 05 00000080 R  4	add eax,c1.weaponDamage
 00001C1E  A3 0000006C R     4	mov c1.damageMin,eax
 00001C23  8B 1D 00000058 R  4	mov ebx,c1.agility
 00001C29  C1 FB 02	     4	sar ebx,2;//divide by 4
 00001C2C  03 C3	     4	add eax,ebx
 00001C2E  A3 00000070 R     4	mov c1.damageMax,eax
 00001C33  61		     4	popAD
 00001C34  EB 6D	     2		jmp endCase??0029
 00001C36		     2	infoItem??0029:
 00001C36  E8 00000000 E     2		call clrscr
 00001C3B  BA 0000062A R     3	mov edx, offset blank
 00001C40  E8 00000000 E     3	call WriteString
 00001C45  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00001C4A  E8 00000000 E     3	call WriteString
 00001C4F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001C52  E8 00000000 E     3	call WriteDec
 00001C57  BA 0000062A R     3	mov edx, offset blank
 00001C5C  E8 00000000 E     3	call WriteString
 00001C61  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001C66  E8 00000000 E     3	call WriteString
 00001C6B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00001C6E  E8 00000000 E     3	call WriteDec
 00001C73  BA 0000062A R     3	mov edx, offset blank
 00001C78  E8 00000000 E     3	call WriteString
 00001C7D  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001C82  E8 00000000 E     3	call WriteString
 00001C87  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00001C8A  E8 00000000 E     3	call WriteDec
 00001C8F  BA 0000062A R     3	mov edx, offset blank
 00001C94  E8 00000000 E     3	call WriteString
 00001C99  B8 000007D0	     2		mov eax,2000
 00001C9E  E8 00000000 E     2		call Delay
 00001CA3		     2	endCase??0029:
 00001CA3  E9 0000024D	     1		jmp endInventory
 00001CA8		     1	item9:
 00001CA8  BB 00000267 R     1		mov ebx,offset i10 ;//storing item for use
 00001CAD  BA 0000061D R     2	mov edx, offset exitTitle
 00001CB2  E8 00000000 E     2	call WriteString
 00001CB7  BA 000003B8 R     2	mov edx, offset discardTitle
 00001CBC  E8 00000000 E     2	call WriteString
 00001CC1  BA 000003C6 R     2	mov edx, offset equipTitle
 00001CC6  E8 00000000 E     2	call WriteString
 00001CCB  BA 000003D2 R     2	mov edx, offset infoTitle
 00001CD0  E8 00000000 E     2	call WriteString
 00001CD5  E8 00000000 E     3		call ReadDec
 00001CDA  8B C8	     3		mov ecx, eax
 00001CDC  81 F9 0000038D    2	cmp ecx,909
 00001CE2  74 18	     2	je exit??002D
 00001CE4  83 F9 01	     2	cmp ecx,1
 00001CE7  74 18	     2	je removeItem??002D
 00001CE9  83 F9 02	     2	cmp ecx,2
 00001CEC  74 2C	     2	je equipItem??002D
 00001CEE  83 F9 03	     2	cmp ecx,3
 00001CF1  0F 84 0000018F    2	je infoItem??002D
 00001CF7  E9 000001F7	     2	jmp endCase??002D
 00001CFC		     2	exit??002D:
 00001CFC  E9 000001F2	     2		jmp endCase??002D
 00001D01		     2	removeItem??002D:
 00001D01  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001D07  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00001D0E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001D15  E9 000001D9	     2		jmp endCase??002D
 00001D1A		     2	equipItem??002D:
 00001D1A  83 3D 00000074 R  3	cmp c1.weaponCode,0
	   00
 00001D21  0F 84 000000D9    3	je notEquipped??002F
 00001D27  8B D3	     3	mov edx,ebx
 00001D29  83 3D 00000074 R  4	cmp c1.weaponCode,0
	   00
 00001D30  0F 84 000000C8    4	je nothingEquipped??0030
 00001D36  BB 00000363 R     4	mov ebx, offset i1
 00001D3B		     4	notEmpty??0030:
 00001D3B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00001D3E  74 0F	     4	je isEmpty??0030 
 00001D40  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001D44  0F 84 0000009B    4	je inventoryFull??0030
 00001D4A  8B 5B 10	     4	mov ebx,[ebx].item.next
 00001D4D  EB EC	     4	jmp notEmpty??0030
 00001D4F		     4	isEmpty??0030:
 00001D4F  A1 00000074 R     4	mov eax, c1.weaponCode
 00001D54  89 03	     4	mov [ebx].item.itemCode,eax
 00001D56  C7 05 00000074 R  4	mov c1.weaponCode,0
	   00000000
 00001D60  A1 00000078 R     4	mov eax, c1.weaponBuyValue
 00001D65  89 43 04	     4	mov [ebx].item.buyValue,eax
 00001D68  C7 05 00000078 R  4	mov c1.weaponBuyValue,0
	   00000000
 00001D72  A1 0000007C R     4	mov eax, c1.weaponSellValue
 00001D77  89 43 08	     4	mov [ebx].item.sellValue,eax
 00001D7A  C7 05 0000007C R  4	mov c1.weaponSellValue,0
	   00000000
 00001D84  A1 00000080 R     4	mov eax, c1.weaponDamage
 00001D89  89 43 14	     4	mov [ebx].item.combatValue,eax
 00001D8C  C7 05 00000080 R  4	mov c1.weaponDamage,0
	   00000000
 00001D96  60		     5	pushAD
 00001D97  FF 05 00000054 R  5	inc c1.brawn   ;// sets primary attributes
 00001D9D  FF 05 00000058 R  5	inc c1.agility
 00001DA3  FF 05 0000005C R  5	inc c1.mind   
 00001DA9  FF 05 00000060 R  5	inc c1.fortune
 00001DAF  A1 00000054 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001DB4  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001DB6  A3 00000064 R     5	mov c1.hpMax,eax
 00001DBB  A3 00000068 R     5	mov c1.hp,eax
 00001DC0  A1 00000054 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001DC5  D1 F8	     5	sar eax,1;//divide by 2
 00001DC7  03 05 00000080 R  5	add eax,c1.weaponDamage
 00001DCD  A3 0000006C R     5	mov c1.damageMin,eax
 00001DD2  8B 1D 00000058 R  5	mov ebx,c1.agility
 00001DD8  C1 FB 02	     5	sar ebx,2;//divide by 4
 00001DDB  03 C3	     5	add eax,ebx
 00001DDD  A3 00000070 R     5	mov c1.damageMax,eax
 00001DE2  61		     5	popAD
 00001DE3  EB 19	     4	jmp nothingEquipped??0030
 00001DE5		     4	inventoryFull??0030:
 00001DE5  BA 0000042C R     4	mov edx, offset inventoryFullTitle
 00001DEA  E8 00000000 E   *	    call   WriteString
 00001DEF  B8 000005DC	     4	mov eax, 1500
 00001DF4  E8 00000000 E     4	call Delay
 00001DF9  E8 00000000 E     4	call clrscr
 00001DFE		     4	nothingEquipped??0030:
 00001DFE  8B DA	     3	mov ebx,edx
 00001E00		     3	notEquipped??002F:
 00001E00  8B 13	     3	mov edx, [ebx].item.itemCode
 00001E02  89 15 00000074 R  3	mov c1.weaponCode, edx
 00001E08  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00001E0B  89 15 00000080 R  3	mov c1.weaponDamage, edx
 00001E11  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001E14  89 15 00000078 R  3	mov c1.weaponBuyValue,edx
 00001E1A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00001E1D  89 15 0000007C R  3	mov c1.weaponsellValue,edx
 00001E23  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001E29  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001E30  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001E37  60		     4	pushAD
 00001E38  FF 05 00000054 R  4	inc c1.brawn   ;// sets primary attributes
 00001E3E  FF 05 00000058 R  4	inc c1.agility
 00001E44  FF 05 0000005C R  4	inc c1.mind   
 00001E4A  FF 05 00000060 R  4	inc c1.fortune
 00001E50  A1 00000054 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001E55  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001E57  A3 00000064 R     4	mov c1.hpMax,eax
 00001E5C  A3 00000068 R     4	mov c1.hp,eax
 00001E61  A1 00000054 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001E66  D1 F8	     4	sar eax,1;//divide by 2
 00001E68  03 05 00000080 R  4	add eax,c1.weaponDamage
 00001E6E  A3 0000006C R     4	mov c1.damageMin,eax
 00001E73  8B 1D 00000058 R  4	mov ebx,c1.agility
 00001E79  C1 FB 02	     4	sar ebx,2;//divide by 4
 00001E7C  03 C3	     4	add eax,ebx
 00001E7E  A3 00000070 R     4	mov c1.damageMax,eax
 00001E83  61		     4	popAD
 00001E84  EB 6D	     2		jmp endCase??002D
 00001E86		     2	infoItem??002D:
 00001E86  E8 00000000 E     2		call clrscr
 00001E8B  BA 0000062A R     3	mov edx, offset blank
 00001E90  E8 00000000 E     3	call WriteString
 00001E95  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00001E9A  E8 00000000 E     3	call WriteString
 00001E9F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001EA2  E8 00000000 E     3	call WriteDec
 00001EA7  BA 0000062A R     3	mov edx, offset blank
 00001EAC  E8 00000000 E     3	call WriteString
 00001EB1  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001EB6  E8 00000000 E     3	call WriteString
 00001EBB  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00001EBE  E8 00000000 E     3	call WriteDec
 00001EC3  BA 0000062A R     3	mov edx, offset blank
 00001EC8  E8 00000000 E     3	call WriteString
 00001ECD  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001ED2  E8 00000000 E     3	call WriteString
 00001ED7  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00001EDA  E8 00000000 E     3	call WriteDec
 00001EDF  BA 0000062A R     3	mov edx, offset blank
 00001EE4  E8 00000000 E     3	call WriteString
 00001EE9  B8 000007D0	     2		mov eax,2000
 00001EEE  E8 00000000 E     2		call Delay
 00001EF3		     2	endCase??002D:
 00001EF3  EB 00	     1		jmp endInventory
 00001EF5		     1	endInventory:
 00001EF5  E8 00000000 E     1	call clrscr
 00001EFA  E9 0000112B				jmp end_switch
 00001EFF				dequip:
						mDequip
 00001EFF  83 3D 00000074 R  1	cmp c1.weaponCode,0
	   00
 00001F06  0F 84 000000C8    1	je nothingEquipped??0031
 00001F0C  BB 00000363 R     1	mov ebx, offset i1
 00001F11		     1	notEmpty??0031:
 00001F11  83 3B 00	     1	cmp [ebx].item.itemCode,0
 00001F14  74 0F	     1	je isEmpty??0031 
 00001F16  83 7B 10 00	     1	cmp [ebx].item.next,null
 00001F1A  0F 84 0000009B    1	je inventoryFull??0031
 00001F20  8B 5B 10	     1	mov ebx,[ebx].item.next
 00001F23  EB EC	     1	jmp notEmpty??0031
 00001F25		     1	isEmpty??0031:
 00001F25  A1 00000074 R     1	mov eax, c1.weaponCode
 00001F2A  89 03	     1	mov [ebx].item.itemCode,eax
 00001F2C  C7 05 00000074 R  1	mov c1.weaponCode,0
	   00000000
 00001F36  A1 00000078 R     1	mov eax, c1.weaponBuyValue
 00001F3B  89 43 04	     1	mov [ebx].item.buyValue,eax
 00001F3E  C7 05 00000078 R  1	mov c1.weaponBuyValue,0
	   00000000
 00001F48  A1 0000007C R     1	mov eax, c1.weaponSellValue
 00001F4D  89 43 08	     1	mov [ebx].item.sellValue,eax
 00001F50  C7 05 0000007C R  1	mov c1.weaponSellValue,0
	   00000000
 00001F5A  A1 00000080 R     1	mov eax, c1.weaponDamage
 00001F5F  89 43 14	     1	mov [ebx].item.combatValue,eax
 00001F62  C7 05 00000080 R  1	mov c1.weaponDamage,0
	   00000000
 00001F6C  60		     2	pushAD
 00001F6D  FF 05 00000054 R  2	inc c1.brawn   ;// sets primary attributes
 00001F73  FF 05 00000058 R  2	inc c1.agility
 00001F79  FF 05 0000005C R  2	inc c1.mind   
 00001F7F  FF 05 00000060 R  2	inc c1.fortune
 00001F85  A1 00000054 R     2	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001F8A  D1 E0	     2	sal eax,1 ;// multiply by 2
 00001F8C  A3 00000064 R     2	mov c1.hpMax,eax
 00001F91  A3 00000068 R     2	mov c1.hp,eax
 00001F96  A1 00000054 R     2	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001F9B  D1 F8	     2	sar eax,1;//divide by 2
 00001F9D  03 05 00000080 R  2	add eax,c1.weaponDamage
 00001FA3  A3 0000006C R     2	mov c1.damageMin,eax
 00001FA8  8B 1D 00000058 R  2	mov ebx,c1.agility
 00001FAE  C1 FB 02	     2	sar ebx,2;//divide by 4
 00001FB1  03 C3	     2	add eax,ebx
 00001FB3  A3 00000070 R     2	mov c1.damageMax,eax
 00001FB8  61		     2	popAD
 00001FB9  EB 19	     1	jmp nothingEquipped??0031
 00001FBB		     1	inventoryFull??0031:
 00001FBB  BA 0000042C R     1	mov edx, offset inventoryFullTitle
 00001FC0  E8 00000000 E   *	    call   WriteString
 00001FC5  B8 000005DC	     1	mov eax, 1500
 00001FCA  E8 00000000 E     1	call Delay
 00001FCF  E8 00000000 E     1	call clrscr
 00001FD4		     1	nothingEquipped??0031:
 00001FD4  E9 00001051				jmp end_switch
 00001FD9				shop:
						mShop
 00001FD9  BA 00000555 R     1	mov edx, offset shopMenuTitle
 00001FDE  E8 00000000 E   *	    call   WriteString
 00001FE3  BA 0000061D R     1	mov edx, offset exitTitle
 00001FE8  E8 00000000 E   *	    call   WriteString
 00001FED  BB 00000539 R     1	mov ebx, offset s1;//moving first item to read linked list
 00001FF2  60		     2	pushAD
 00001FF3  33 C9	     2	xor ecx,ecx
 00001FF5		     2	DO1??0033:
 00001FF5  8B C1	     2	mov eax,ecx
 00001FF7  E8 00000000 E     2	call WriteDec
 00001FFC  B8 0000003A	     2	mov eax, ':'
 00002001  E8 00000000 E     2	call WriteChar
 00002006  8B 03	     2	mov eax, [ebx].item.itemCode
 00002008  83 F8 01	     3	cmp eax,1
 0000200B  74 11	     3	je item0??0034
 0000200D  83 F8 02	     3	cmp eax,2
 00002010  74 13	     3	je item1??0034
 00002012  83 F8 03	     3	cmp eax,3
 00002015  74 15	     3	je item2??0034
 00002017  83 F8 04	     3	cmp eax,4
 0000201A  74 17	     3	je item3??0034
 0000201C  EB 1C	     3	jmp default??0034
 0000201E		     3	item0??0034:
 0000201E  BA 00000000 R     3		mov edx, offset itemName1
 00002023  EB 1A	     3		jmp print??0034
 00002025		     3	item1??0034:
 00002025  BA 00000007 R     3		mov edx, offset itemName2
 0000202A  EB 13	     3		jmp print??0034
 0000202C		     3	item2??0034:
 0000202C  BA 0000000D R     3		mov edx, offset itemName3
 00002031  EB 0C	     3		jmp print??0034
 00002033		     3	item3??0034:
 00002033  BA 00000015 R     3		mov edx, offset itemName4
 00002038  EB 05	     3		jmp print??0034
 0000203A		     3	default??0034:
 0000203A  BA 0000001B R     3		mov edx, offset defaultName
 0000203F		     3	print??0034:
 0000203F  E8 00000000 E   *	    call   WriteString
 00002044  BA 0000062A R     2	mov edx,offset blank
 00002049  E8 00000000 E     2	call WriteString
 0000204E  8B 5B 10	     2	mov eBx,[ebx].item.next
 00002051  41		     2	inc ecx
 00002052  83 FB 00	     2	cmp ebx,null
 00002055  75 9E	     2	jne DO1??0033
 00002057  61		     2	popAD
 00002058  BA 00000560 R     1	mov edx,offset sellModeTitle
 0000205D  E8 00000000 E   *	    call   WriteString
 00002062  E8 00000000 E     2		call ReadDec
 00002067  8B C8	     2		mov ecx, eax
 00002069  81 F9 0000038D    1	cmp ecx,909
 0000206F  0F 84 00000FAE    1	je exitShop
 00002075  83 F9 01	     1	cmp ecx,1
 00002078  0F 84 000001A0    1		je item1??0032
 0000207E  83 F9 02	     1	cmp ecx,2
 00002081  0F 84 000002E1    1		je item2??0032
 00002087  83 F9 03	     1	cmp ecx,3
 0000208A  0F 84 00000422    1		je item3??0032
 00002090  83 F9 04	     1	cmp ecx,4
 00002093  0F 84 00000563    1		je item4??0032
 00002099  83 F9 05	     1	cmp ecx,5
 0000209C  0F 84 000006A4    1		je item5??0032
 000020A2  83 F9 06	     1	cmp ecx,6
 000020A5  0F 84 000007E5    1		je item6??0032
 000020AB  83 F9 07	     1	cmp ecx,7
 000020AE  0F 84 00000926    1		je item7??0032
 000020B4  83 F9 08	     1	cmp ecx,8
 000020B7  0F 84 00000A67    1		je item8??0032
 000020BD  83 F9 09	     1	cmp ecx,9
 000020C0  0F 84 00000BA8    1		je item9??0032
 000020C6  83 F9 0A	     1	cmp ecx,10
 000020C9  0F 84 00000BA4    1		je sellMode
 000020CF  E9 00000F4F	     1	jmp exitShop
 000020D4		     1	item0??0032:
 000020D4  BB 00000539 R     1		mov ebx,offset s1 ;//storing item for use
 000020D9  BA 0000061D R     2	mov edx, offset exitTitle
 000020DE  BA 00000579 R     2	mov edx, offset buyTitle
 000020E3  E8 00000000 E     2	call WriteString
 000020E8  BA 000003D2 R     2	mov edx, offset infoTitle
 000020ED  E8 00000000 E     2	call WriteString
 000020F2  E8 00000000 E     3		call ReadDec
 000020F7  8B C8	     3		mov ecx, eax
 000020F9  81 F9 0000038D    2	cmp ecx,909
 000020FF  74 13	     2	je exit??0036
 00002101  83 F9 02	     2	cmp ecx,2
 00002104  74 13	     2	je buyItem??0036
 00002106  83 F9 03	     2	cmp ecx,3
 00002109  0F 84 0000009D    2	je infoItem??0036
 0000210F  E9 00000105	     2	jmp endCase??0036
 00002114		     2	exit??0036:
 00002114  E9 00000100	     2		jmp endCase??0036
 00002119		     2	buyItem??0036:
 00002119  8B 15 00000050 R  2		mov edx, c1.gold 
 0000211F  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002122  3B D0	     2		cmp edx,eax
 00002124  72 6B	     2		jb notEnoughGold??0036
 00002126  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 0000212C  8B C3	     2		mov eax,ebx ;//moving for add
 0000212E  8B D3	     2		mov edx,ebx ;//storing for remove
 00002130  BB 00000363 R     3	mov ebx, offset i1
 00002135		     3	notEmpty??0038:
 00002135  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002138  74 0B	     3	je isEmpty??0038 
 0000213A  83 7B 10 00	     3	cmp [ebx].item.next,null
 0000213E  74 1D	     3	je inventoryFull??0038
 00002140  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002143  EB F0	     3	jmp notEmpty??0038
 00002145		     3	isEmpty??0038:
 00002145  8B 08	     3	mov ecx, [eax].item.itemCode
 00002147  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002149  8B 48 04	     3	mov ecx, [eax].item.buyValue
 0000214C  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 0000214F  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002152  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002155  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002158  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 0000215B  EB 19	     3	jmp end??0038
 0000215D		     3	inventoryFull??0038:
 0000215D  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 00002162  E8 00000000 E   *	    call   WriteString
 00002167  B8 000005DC	     3	mov eax, 1500
 0000216C  E8 00000000 E     3	call Delay
 00002171  E8 00000000 E     3	call clrscr
 00002176		     3	end??0038:
 00002176  8B DA	     2		mov ebx,edx ;//moving for remove
 00002178  C7 03 00000000    3	mov [ebx].item.itemCode,null
 0000217E  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002185  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 0000218C  E9 00000088	     2		jmp endCase??0036
 00002191		     2		notEnoughGold??0036:
 00002191  E8 00000000 E     2		call clrscr
 00002196  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 0000219B  E8 00000000 E   *	    call   WriteString
 000021A0  B8 000007D0	     2		mov eax,2000
 000021A5  E8 00000000 E     2		call Delay
 000021AA  EB 6D	     2		jmp endCase??0036
 000021AC		     2	infoItem??0036:
 000021AC  E8 00000000 E     2		call clrscr
 000021B1  BA 0000062A R     3	mov edx, offset blank
 000021B6  E8 00000000 E     3	call WriteString
 000021BB  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000021C0  E8 00000000 E     3	call WriteString
 000021C5  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000021C8  E8 00000000 E     3	call WriteDec
 000021CD  BA 0000062A R     3	mov edx, offset blank
 000021D2  E8 00000000 E     3	call WriteString
 000021D7  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000021DC  E8 00000000 E     3	call WriteString
 000021E1  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000021E4  E8 00000000 E     3	call WriteDec
 000021E9  BA 0000062A R     3	mov edx, offset blank
 000021EE  E8 00000000 E     3	call WriteString
 000021F3  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000021F8  E8 00000000 E     3	call WriteString
 000021FD  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002200  E8 00000000 E     3	call WriteDec
 00002205  BA 0000062A R     3	mov edx, offset blank
 0000220A  E8 00000000 E     3	call WriteString
 0000220F  B8 000007D0	     2		mov eax,2000
 00002214  E8 00000000 E     2		call Delay
 00002219		     2	endCase??0036:
 00002219  E9 FFFFFCD7	     1		jmp endInventory
 0000221E		     1	item1??0032:
 0000221E  BB 0000051D R     1		mov ebx,offset s2 ;//storing item for use
 00002223  BA 0000061D R     2	mov edx, offset exitTitle
 00002228  BA 00000579 R     2	mov edx, offset buyTitle
 0000222D  E8 00000000 E     2	call WriteString
 00002232  BA 000003D2 R     2	mov edx, offset infoTitle
 00002237  E8 00000000 E     2	call WriteString
 0000223C  E8 00000000 E     3		call ReadDec
 00002241  8B C8	     3		mov ecx, eax
 00002243  81 F9 0000038D    2	cmp ecx,909
 00002249  74 13	     2	je exit??0039
 0000224B  83 F9 02	     2	cmp ecx,2
 0000224E  74 13	     2	je buyItem??0039
 00002250  83 F9 03	     2	cmp ecx,3
 00002253  0F 84 0000009D    2	je infoItem??0039
 00002259  E9 00000105	     2	jmp endCase??0039
 0000225E		     2	exit??0039:
 0000225E  E9 00000100	     2		jmp endCase??0039
 00002263		     2	buyItem??0039:
 00002263  8B 15 00000050 R  2		mov edx, c1.gold 
 00002269  8B 43 04	     2		mov eax, [ebx].item.buyValue
 0000226C  3B D0	     2		cmp edx,eax
 0000226E  72 6B	     2		jb notEnoughGold??0039
 00002270  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 00002276  8B C3	     2		mov eax,ebx ;//moving for add
 00002278  8B D3	     2		mov edx,ebx ;//storing for remove
 0000227A  BB 00000363 R     3	mov ebx, offset i1
 0000227F		     3	notEmpty??003B:
 0000227F  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002282  74 0B	     3	je isEmpty??003B 
 00002284  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002288  74 1D	     3	je inventoryFull??003B
 0000228A  8B 5B 10	     3	mov ebx,[ebx].item.next
 0000228D  EB F0	     3	jmp notEmpty??003B
 0000228F		     3	isEmpty??003B:
 0000228F  8B 08	     3	mov ecx, [eax].item.itemCode
 00002291  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002293  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002296  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002299  8B 48 08	     3	mov ecx, [eax].item.sellValue
 0000229C  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 0000229F  8B 48 14	     3	mov ecx, [eax].item.combatValue
 000022A2  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 000022A5  EB 19	     3	jmp end??003B
 000022A7		     3	inventoryFull??003B:
 000022A7  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 000022AC  E8 00000000 E   *	    call   WriteString
 000022B1  B8 000005DC	     3	mov eax, 1500
 000022B6  E8 00000000 E     3	call Delay
 000022BB  E8 00000000 E     3	call clrscr
 000022C0		     3	end??003B:
 000022C0  8B DA	     2		mov ebx,edx ;//moving for remove
 000022C2  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000022C8  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000022CF  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000022D6  E9 00000088	     2		jmp endCase??0039
 000022DB		     2		notEnoughGold??0039:
 000022DB  E8 00000000 E     2		call clrscr
 000022E0  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 000022E5  E8 00000000 E   *	    call   WriteString
 000022EA  B8 000007D0	     2		mov eax,2000
 000022EF  E8 00000000 E     2		call Delay
 000022F4  EB 6D	     2		jmp endCase??0039
 000022F6		     2	infoItem??0039:
 000022F6  E8 00000000 E     2		call clrscr
 000022FB  BA 0000062A R     3	mov edx, offset blank
 00002300  E8 00000000 E     3	call WriteString
 00002305  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000230A  E8 00000000 E     3	call WriteString
 0000230F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002312  E8 00000000 E     3	call WriteDec
 00002317  BA 0000062A R     3	mov edx, offset blank
 0000231C  E8 00000000 E     3	call WriteString
 00002321  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002326  E8 00000000 E     3	call WriteString
 0000232B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 0000232E  E8 00000000 E     3	call WriteDec
 00002333  BA 0000062A R     3	mov edx, offset blank
 00002338  E8 00000000 E     3	call WriteString
 0000233D  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002342  E8 00000000 E     3	call WriteString
 00002347  8B 43 14	     3	mov eax, [ebx].item.combatValue
 0000234A  E8 00000000 E     3	call WriteDec
 0000234F  BA 0000062A R     3	mov edx, offset blank
 00002354  E8 00000000 E     3	call WriteString
 00002359  B8 000007D0	     2		mov eax,2000
 0000235E  E8 00000000 E     2		call Delay
 00002363		     2	endCase??0039:
 00002363  E9 FFFFFB8D	     1		jmp endInventory
 00002368		     1	item2??0032:
 00002368  BB 00000501 R     1		mov ebx,offset s3 ;//storing item for use
 0000236D  BA 0000061D R     2	mov edx, offset exitTitle
 00002372  BA 00000579 R     2	mov edx, offset buyTitle
 00002377  E8 00000000 E     2	call WriteString
 0000237C  BA 000003D2 R     2	mov edx, offset infoTitle
 00002381  E8 00000000 E     2	call WriteString
 00002386  E8 00000000 E     3		call ReadDec
 0000238B  8B C8	     3		mov ecx, eax
 0000238D  81 F9 0000038D    2	cmp ecx,909
 00002393  74 13	     2	je exit??003C
 00002395  83 F9 02	     2	cmp ecx,2
 00002398  74 13	     2	je buyItem??003C
 0000239A  83 F9 03	     2	cmp ecx,3
 0000239D  0F 84 0000009D    2	je infoItem??003C
 000023A3  E9 00000105	     2	jmp endCase??003C
 000023A8		     2	exit??003C:
 000023A8  E9 00000100	     2		jmp endCase??003C
 000023AD		     2	buyItem??003C:
 000023AD  8B 15 00000050 R  2		mov edx, c1.gold 
 000023B3  8B 43 04	     2		mov eax, [ebx].item.buyValue
 000023B6  3B D0	     2		cmp edx,eax
 000023B8  72 6B	     2		jb notEnoughGold??003C
 000023BA  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 000023C0  8B C3	     2		mov eax,ebx ;//moving for add
 000023C2  8B D3	     2		mov edx,ebx ;//storing for remove
 000023C4  BB 00000363 R     3	mov ebx, offset i1
 000023C9		     3	notEmpty??003E:
 000023C9  83 3B 00	     3	cmp [ebx].item.itemCode,0
 000023CC  74 0B	     3	je isEmpty??003E 
 000023CE  83 7B 10 00	     3	cmp [ebx].item.next,null
 000023D2  74 1D	     3	je inventoryFull??003E
 000023D4  8B 5B 10	     3	mov ebx,[ebx].item.next
 000023D7  EB F0	     3	jmp notEmpty??003E
 000023D9		     3	isEmpty??003E:
 000023D9  8B 08	     3	mov ecx, [eax].item.itemCode
 000023DB  89 0B	     3	mov [ebx].item.itemCode,ecx
 000023DD  8B 48 04	     3	mov ecx, [eax].item.buyValue
 000023E0  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 000023E3  8B 48 08	     3	mov ecx, [eax].item.sellValue
 000023E6  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 000023E9  8B 48 14	     3	mov ecx, [eax].item.combatValue
 000023EC  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 000023EF  EB 19	     3	jmp end??003E
 000023F1		     3	inventoryFull??003E:
 000023F1  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 000023F6  E8 00000000 E   *	    call   WriteString
 000023FB  B8 000005DC	     3	mov eax, 1500
 00002400  E8 00000000 E     3	call Delay
 00002405  E8 00000000 E     3	call clrscr
 0000240A		     3	end??003E:
 0000240A  8B DA	     2		mov ebx,edx ;//moving for remove
 0000240C  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00002412  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002419  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002420  E9 00000088	     2		jmp endCase??003C
 00002425		     2		notEnoughGold??003C:
 00002425  E8 00000000 E     2		call clrscr
 0000242A  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 0000242F  E8 00000000 E   *	    call   WriteString
 00002434  B8 000007D0	     2		mov eax,2000
 00002439  E8 00000000 E     2		call Delay
 0000243E  EB 6D	     2		jmp endCase??003C
 00002440		     2	infoItem??003C:
 00002440  E8 00000000 E     2		call clrscr
 00002445  BA 0000062A R     3	mov edx, offset blank
 0000244A  E8 00000000 E     3	call WriteString
 0000244F  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002454  E8 00000000 E     3	call WriteString
 00002459  8B 43 04	     3	mov eax, [ebx].item.buyValue
 0000245C  E8 00000000 E     3	call WriteDec
 00002461  BA 0000062A R     3	mov edx, offset blank
 00002466  E8 00000000 E     3	call WriteString
 0000246B  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002470  E8 00000000 E     3	call WriteString
 00002475  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002478  E8 00000000 E     3	call WriteDec
 0000247D  BA 0000062A R     3	mov edx, offset blank
 00002482  E8 00000000 E     3	call WriteString
 00002487  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 0000248C  E8 00000000 E     3	call WriteString
 00002491  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002494  E8 00000000 E     3	call WriteDec
 00002499  BA 0000062A R     3	mov edx, offset blank
 0000249E  E8 00000000 E     3	call WriteString
 000024A3  B8 000007D0	     2		mov eax,2000
 000024A8  E8 00000000 E     2		call Delay
 000024AD		     2	endCase??003C:
 000024AD  E9 FFFFFA43	     1		jmp endInventory
 000024B2		     1	item3??0032:
 000024B2  BB 000004E5 R     1		mov ebx,offset s4 ;//storing item for use
 000024B7  BA 0000061D R     2	mov edx, offset exitTitle
 000024BC  BA 00000579 R     2	mov edx, offset buyTitle
 000024C1  E8 00000000 E     2	call WriteString
 000024C6  BA 000003D2 R     2	mov edx, offset infoTitle
 000024CB  E8 00000000 E     2	call WriteString
 000024D0  E8 00000000 E     3		call ReadDec
 000024D5  8B C8	     3		mov ecx, eax
 000024D7  81 F9 0000038D    2	cmp ecx,909
 000024DD  74 13	     2	je exit??003F
 000024DF  83 F9 02	     2	cmp ecx,2
 000024E2  74 13	     2	je buyItem??003F
 000024E4  83 F9 03	     2	cmp ecx,3
 000024E7  0F 84 0000009D    2	je infoItem??003F
 000024ED  E9 00000105	     2	jmp endCase??003F
 000024F2		     2	exit??003F:
 000024F2  E9 00000100	     2		jmp endCase??003F
 000024F7		     2	buyItem??003F:
 000024F7  8B 15 00000050 R  2		mov edx, c1.gold 
 000024FD  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002500  3B D0	     2		cmp edx,eax
 00002502  72 6B	     2		jb notEnoughGold??003F
 00002504  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 0000250A  8B C3	     2		mov eax,ebx ;//moving for add
 0000250C  8B D3	     2		mov edx,ebx ;//storing for remove
 0000250E  BB 00000363 R     3	mov ebx, offset i1
 00002513		     3	notEmpty??0041:
 00002513  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002516  74 0B	     3	je isEmpty??0041 
 00002518  83 7B 10 00	     3	cmp [ebx].item.next,null
 0000251C  74 1D	     3	je inventoryFull??0041
 0000251E  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002521  EB F0	     3	jmp notEmpty??0041
 00002523		     3	isEmpty??0041:
 00002523  8B 08	     3	mov ecx, [eax].item.itemCode
 00002525  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002527  8B 48 04	     3	mov ecx, [eax].item.buyValue
 0000252A  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 0000252D  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002530  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002533  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002536  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002539  EB 19	     3	jmp end??0041
 0000253B		     3	inventoryFull??0041:
 0000253B  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 00002540  E8 00000000 E   *	    call   WriteString
 00002545  B8 000005DC	     3	mov eax, 1500
 0000254A  E8 00000000 E     3	call Delay
 0000254F  E8 00000000 E     3	call clrscr
 00002554		     3	end??0041:
 00002554  8B DA	     2		mov ebx,edx ;//moving for remove
 00002556  C7 03 00000000    3	mov [ebx].item.itemCode,null
 0000255C  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002563  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 0000256A  E9 00000088	     2		jmp endCase??003F
 0000256F		     2		notEnoughGold??003F:
 0000256F  E8 00000000 E     2		call clrscr
 00002574  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 00002579  E8 00000000 E   *	    call   WriteString
 0000257E  B8 000007D0	     2		mov eax,2000
 00002583  E8 00000000 E     2		call Delay
 00002588  EB 6D	     2		jmp endCase??003F
 0000258A		     2	infoItem??003F:
 0000258A  E8 00000000 E     2		call clrscr
 0000258F  BA 0000062A R     3	mov edx, offset blank
 00002594  E8 00000000 E     3	call WriteString
 00002599  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000259E  E8 00000000 E     3	call WriteString
 000025A3  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000025A6  E8 00000000 E     3	call WriteDec
 000025AB  BA 0000062A R     3	mov edx, offset blank
 000025B0  E8 00000000 E     3	call WriteString
 000025B5  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000025BA  E8 00000000 E     3	call WriteString
 000025BF  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000025C2  E8 00000000 E     3	call WriteDec
 000025C7  BA 0000062A R     3	mov edx, offset blank
 000025CC  E8 00000000 E     3	call WriteString
 000025D1  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000025D6  E8 00000000 E     3	call WriteString
 000025DB  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000025DE  E8 00000000 E     3	call WriteDec
 000025E3  BA 0000062A R     3	mov edx, offset blank
 000025E8  E8 00000000 E     3	call WriteString
 000025ED  B8 000007D0	     2		mov eax,2000
 000025F2  E8 00000000 E     2		call Delay
 000025F7		     2	endCase??003F:
 000025F7  E9 FFFFF8F9	     1		jmp endInventory
 000025FC		     1	item4??0032:
 000025FC  BB 000004C9 R     1		mov ebx,offset s5 ;//storing item for use
 00002601  BA 0000061D R     2	mov edx, offset exitTitle
 00002606  BA 00000579 R     2	mov edx, offset buyTitle
 0000260B  E8 00000000 E     2	call WriteString
 00002610  BA 000003D2 R     2	mov edx, offset infoTitle
 00002615  E8 00000000 E     2	call WriteString
 0000261A  E8 00000000 E     3		call ReadDec
 0000261F  8B C8	     3		mov ecx, eax
 00002621  81 F9 0000038D    2	cmp ecx,909
 00002627  74 13	     2	je exit??0042
 00002629  83 F9 02	     2	cmp ecx,2
 0000262C  74 13	     2	je buyItem??0042
 0000262E  83 F9 03	     2	cmp ecx,3
 00002631  0F 84 0000009D    2	je infoItem??0042
 00002637  E9 00000105	     2	jmp endCase??0042
 0000263C		     2	exit??0042:
 0000263C  E9 00000100	     2		jmp endCase??0042
 00002641		     2	buyItem??0042:
 00002641  8B 15 00000050 R  2		mov edx, c1.gold 
 00002647  8B 43 04	     2		mov eax, [ebx].item.buyValue
 0000264A  3B D0	     2		cmp edx,eax
 0000264C  72 6B	     2		jb notEnoughGold??0042
 0000264E  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 00002654  8B C3	     2		mov eax,ebx ;//moving for add
 00002656  8B D3	     2		mov edx,ebx ;//storing for remove
 00002658  BB 00000363 R     3	mov ebx, offset i1
 0000265D		     3	notEmpty??0044:
 0000265D  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002660  74 0B	     3	je isEmpty??0044 
 00002662  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002666  74 1D	     3	je inventoryFull??0044
 00002668  8B 5B 10	     3	mov ebx,[ebx].item.next
 0000266B  EB F0	     3	jmp notEmpty??0044
 0000266D		     3	isEmpty??0044:
 0000266D  8B 08	     3	mov ecx, [eax].item.itemCode
 0000266F  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002671  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002674  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002677  8B 48 08	     3	mov ecx, [eax].item.sellValue
 0000267A  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 0000267D  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002680  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002683  EB 19	     3	jmp end??0044
 00002685		     3	inventoryFull??0044:
 00002685  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 0000268A  E8 00000000 E   *	    call   WriteString
 0000268F  B8 000005DC	     3	mov eax, 1500
 00002694  E8 00000000 E     3	call Delay
 00002699  E8 00000000 E     3	call clrscr
 0000269E		     3	end??0044:
 0000269E  8B DA	     2		mov ebx,edx ;//moving for remove
 000026A0  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000026A6  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000026AD  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000026B4  E9 00000088	     2		jmp endCase??0042
 000026B9		     2		notEnoughGold??0042:
 000026B9  E8 00000000 E     2		call clrscr
 000026BE  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 000026C3  E8 00000000 E   *	    call   WriteString
 000026C8  B8 000007D0	     2		mov eax,2000
 000026CD  E8 00000000 E     2		call Delay
 000026D2  EB 6D	     2		jmp endCase??0042
 000026D4		     2	infoItem??0042:
 000026D4  E8 00000000 E     2		call clrscr
 000026D9  BA 0000062A R     3	mov edx, offset blank
 000026DE  E8 00000000 E     3	call WriteString
 000026E3  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000026E8  E8 00000000 E     3	call WriteString
 000026ED  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000026F0  E8 00000000 E     3	call WriteDec
 000026F5  BA 0000062A R     3	mov edx, offset blank
 000026FA  E8 00000000 E     3	call WriteString
 000026FF  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002704  E8 00000000 E     3	call WriteString
 00002709  8B 43 08	     3	mov eax, [ebx].item.SellValue
 0000270C  E8 00000000 E     3	call WriteDec
 00002711  BA 0000062A R     3	mov edx, offset blank
 00002716  E8 00000000 E     3	call WriteString
 0000271B  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002720  E8 00000000 E     3	call WriteString
 00002725  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002728  E8 00000000 E     3	call WriteDec
 0000272D  BA 0000062A R     3	mov edx, offset blank
 00002732  E8 00000000 E     3	call WriteString
 00002737  B8 000007D0	     2		mov eax,2000
 0000273C  E8 00000000 E     2		call Delay
 00002741		     2	endCase??0042:
 00002741  E9 FFFFF7AF	     1		jmp endInventory
 00002746		     1	item5??0032:
 00002746  BB 000004AD R     1		mov ebx,offset s6 ;//storing item for use
 0000274B  BA 0000061D R     2	mov edx, offset exitTitle
 00002750  BA 00000579 R     2	mov edx, offset buyTitle
 00002755  E8 00000000 E     2	call WriteString
 0000275A  BA 000003D2 R     2	mov edx, offset infoTitle
 0000275F  E8 00000000 E     2	call WriteString
 00002764  E8 00000000 E     3		call ReadDec
 00002769  8B C8	     3		mov ecx, eax
 0000276B  81 F9 0000038D    2	cmp ecx,909
 00002771  74 13	     2	je exit??0045
 00002773  83 F9 02	     2	cmp ecx,2
 00002776  74 13	     2	je buyItem??0045
 00002778  83 F9 03	     2	cmp ecx,3
 0000277B  0F 84 0000009D    2	je infoItem??0045
 00002781  E9 00000105	     2	jmp endCase??0045
 00002786		     2	exit??0045:
 00002786  E9 00000100	     2		jmp endCase??0045
 0000278B		     2	buyItem??0045:
 0000278B  8B 15 00000050 R  2		mov edx, c1.gold 
 00002791  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002794  3B D0	     2		cmp edx,eax
 00002796  72 6B	     2		jb notEnoughGold??0045
 00002798  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 0000279E  8B C3	     2		mov eax,ebx ;//moving for add
 000027A0  8B D3	     2		mov edx,ebx ;//storing for remove
 000027A2  BB 00000363 R     3	mov ebx, offset i1
 000027A7		     3	notEmpty??0047:
 000027A7  83 3B 00	     3	cmp [ebx].item.itemCode,0
 000027AA  74 0B	     3	je isEmpty??0047 
 000027AC  83 7B 10 00	     3	cmp [ebx].item.next,null
 000027B0  74 1D	     3	je inventoryFull??0047
 000027B2  8B 5B 10	     3	mov ebx,[ebx].item.next
 000027B5  EB F0	     3	jmp notEmpty??0047
 000027B7		     3	isEmpty??0047:
 000027B7  8B 08	     3	mov ecx, [eax].item.itemCode
 000027B9  89 0B	     3	mov [ebx].item.itemCode,ecx
 000027BB  8B 48 04	     3	mov ecx, [eax].item.buyValue
 000027BE  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 000027C1  8B 48 08	     3	mov ecx, [eax].item.sellValue
 000027C4  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 000027C7  8B 48 14	     3	mov ecx, [eax].item.combatValue
 000027CA  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 000027CD  EB 19	     3	jmp end??0047
 000027CF		     3	inventoryFull??0047:
 000027CF  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 000027D4  E8 00000000 E   *	    call   WriteString
 000027D9  B8 000005DC	     3	mov eax, 1500
 000027DE  E8 00000000 E     3	call Delay
 000027E3  E8 00000000 E     3	call clrscr
 000027E8		     3	end??0047:
 000027E8  8B DA	     2		mov ebx,edx ;//moving for remove
 000027EA  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000027F0  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000027F7  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000027FE  E9 00000088	     2		jmp endCase??0045
 00002803		     2		notEnoughGold??0045:
 00002803  E8 00000000 E     2		call clrscr
 00002808  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 0000280D  E8 00000000 E   *	    call   WriteString
 00002812  B8 000007D0	     2		mov eax,2000
 00002817  E8 00000000 E     2		call Delay
 0000281C  EB 6D	     2		jmp endCase??0045
 0000281E		     2	infoItem??0045:
 0000281E  E8 00000000 E     2		call clrscr
 00002823  BA 0000062A R     3	mov edx, offset blank
 00002828  E8 00000000 E     3	call WriteString
 0000282D  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002832  E8 00000000 E     3	call WriteString
 00002837  8B 43 04	     3	mov eax, [ebx].item.buyValue
 0000283A  E8 00000000 E     3	call WriteDec
 0000283F  BA 0000062A R     3	mov edx, offset blank
 00002844  E8 00000000 E     3	call WriteString
 00002849  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 0000284E  E8 00000000 E     3	call WriteString
 00002853  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002856  E8 00000000 E     3	call WriteDec
 0000285B  BA 0000062A R     3	mov edx, offset blank
 00002860  E8 00000000 E     3	call WriteString
 00002865  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 0000286A  E8 00000000 E     3	call WriteString
 0000286F  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002872  E8 00000000 E     3	call WriteDec
 00002877  BA 0000062A R     3	mov edx, offset blank
 0000287C  E8 00000000 E     3	call WriteString
 00002881  B8 000007D0	     2		mov eax,2000
 00002886  E8 00000000 E     2		call Delay
 0000288B		     2	endCase??0045:
 0000288B  E9 FFFFF665	     1		jmp endInventory
 00002890		     1	item6??0032:
 00002890  BB 00000491 R     1		mov ebx,offset s7 ;//storing item for use
 00002895  BA 0000061D R     2	mov edx, offset exitTitle
 0000289A  BA 00000579 R     2	mov edx, offset buyTitle
 0000289F  E8 00000000 E     2	call WriteString
 000028A4  BA 000003D2 R     2	mov edx, offset infoTitle
 000028A9  E8 00000000 E     2	call WriteString
 000028AE  E8 00000000 E     3		call ReadDec
 000028B3  8B C8	     3		mov ecx, eax
 000028B5  81 F9 0000038D    2	cmp ecx,909
 000028BB  74 13	     2	je exit??0048
 000028BD  83 F9 02	     2	cmp ecx,2
 000028C0  74 13	     2	je buyItem??0048
 000028C2  83 F9 03	     2	cmp ecx,3
 000028C5  0F 84 0000009D    2	je infoItem??0048
 000028CB  E9 00000105	     2	jmp endCase??0048
 000028D0		     2	exit??0048:
 000028D0  E9 00000100	     2		jmp endCase??0048
 000028D5		     2	buyItem??0048:
 000028D5  8B 15 00000050 R  2		mov edx, c1.gold 
 000028DB  8B 43 04	     2		mov eax, [ebx].item.buyValue
 000028DE  3B D0	     2		cmp edx,eax
 000028E0  72 6B	     2		jb notEnoughGold??0048
 000028E2  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 000028E8  8B C3	     2		mov eax,ebx ;//moving for add
 000028EA  8B D3	     2		mov edx,ebx ;//storing for remove
 000028EC  BB 00000363 R     3	mov ebx, offset i1
 000028F1		     3	notEmpty??004A:
 000028F1  83 3B 00	     3	cmp [ebx].item.itemCode,0
 000028F4  74 0B	     3	je isEmpty??004A 
 000028F6  83 7B 10 00	     3	cmp [ebx].item.next,null
 000028FA  74 1D	     3	je inventoryFull??004A
 000028FC  8B 5B 10	     3	mov ebx,[ebx].item.next
 000028FF  EB F0	     3	jmp notEmpty??004A
 00002901		     3	isEmpty??004A:
 00002901  8B 08	     3	mov ecx, [eax].item.itemCode
 00002903  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002905  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002908  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 0000290B  8B 48 08	     3	mov ecx, [eax].item.sellValue
 0000290E  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002911  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002914  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002917  EB 19	     3	jmp end??004A
 00002919		     3	inventoryFull??004A:
 00002919  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 0000291E  E8 00000000 E   *	    call   WriteString
 00002923  B8 000005DC	     3	mov eax, 1500
 00002928  E8 00000000 E     3	call Delay
 0000292D  E8 00000000 E     3	call clrscr
 00002932		     3	end??004A:
 00002932  8B DA	     2		mov ebx,edx ;//moving for remove
 00002934  C7 03 00000000    3	mov [ebx].item.itemCode,null
 0000293A  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002941  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002948  E9 00000088	     2		jmp endCase??0048
 0000294D		     2		notEnoughGold??0048:
 0000294D  E8 00000000 E     2		call clrscr
 00002952  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 00002957  E8 00000000 E   *	    call   WriteString
 0000295C  B8 000007D0	     2		mov eax,2000
 00002961  E8 00000000 E     2		call Delay
 00002966  EB 6D	     2		jmp endCase??0048
 00002968		     2	infoItem??0048:
 00002968  E8 00000000 E     2		call clrscr
 0000296D  BA 0000062A R     3	mov edx, offset blank
 00002972  E8 00000000 E     3	call WriteString
 00002977  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000297C  E8 00000000 E     3	call WriteString
 00002981  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002984  E8 00000000 E     3	call WriteDec
 00002989  BA 0000062A R     3	mov edx, offset blank
 0000298E  E8 00000000 E     3	call WriteString
 00002993  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002998  E8 00000000 E     3	call WriteString
 0000299D  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000029A0  E8 00000000 E     3	call WriteDec
 000029A5  BA 0000062A R     3	mov edx, offset blank
 000029AA  E8 00000000 E     3	call WriteString
 000029AF  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000029B4  E8 00000000 E     3	call WriteString
 000029B9  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000029BC  E8 00000000 E     3	call WriteDec
 000029C1  BA 0000062A R     3	mov edx, offset blank
 000029C6  E8 00000000 E     3	call WriteString
 000029CB  B8 000007D0	     2		mov eax,2000
 000029D0  E8 00000000 E     2		call Delay
 000029D5		     2	endCase??0048:
 000029D5  E9 FFFFF51B	     1		jmp endInventory
 000029DA		     1	item7??0032:
 000029DA  BB 00000475 R     1		mov ebx,offset s8 ;//storing item for use
 000029DF  BA 0000061D R     2	mov edx, offset exitTitle
 000029E4  BA 00000579 R     2	mov edx, offset buyTitle
 000029E9  E8 00000000 E     2	call WriteString
 000029EE  BA 000003D2 R     2	mov edx, offset infoTitle
 000029F3  E8 00000000 E     2	call WriteString
 000029F8  E8 00000000 E     3		call ReadDec
 000029FD  8B C8	     3		mov ecx, eax
 000029FF  81 F9 0000038D    2	cmp ecx,909
 00002A05  74 13	     2	je exit??004B
 00002A07  83 F9 02	     2	cmp ecx,2
 00002A0A  74 13	     2	je buyItem??004B
 00002A0C  83 F9 03	     2	cmp ecx,3
 00002A0F  0F 84 0000009D    2	je infoItem??004B
 00002A15  E9 00000105	     2	jmp endCase??004B
 00002A1A		     2	exit??004B:
 00002A1A  E9 00000100	     2		jmp endCase??004B
 00002A1F		     2	buyItem??004B:
 00002A1F  8B 15 00000050 R  2		mov edx, c1.gold 
 00002A25  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002A28  3B D0	     2		cmp edx,eax
 00002A2A  72 6B	     2		jb notEnoughGold??004B
 00002A2C  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 00002A32  8B C3	     2		mov eax,ebx ;//moving for add
 00002A34  8B D3	     2		mov edx,ebx ;//storing for remove
 00002A36  BB 00000363 R     3	mov ebx, offset i1
 00002A3B		     3	notEmpty??004D:
 00002A3B  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002A3E  74 0B	     3	je isEmpty??004D 
 00002A40  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002A44  74 1D	     3	je inventoryFull??004D
 00002A46  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002A49  EB F0	     3	jmp notEmpty??004D
 00002A4B		     3	isEmpty??004D:
 00002A4B  8B 08	     3	mov ecx, [eax].item.itemCode
 00002A4D  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002A4F  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002A52  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002A55  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002A58  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002A5B  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002A5E  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002A61  EB 19	     3	jmp end??004D
 00002A63		     3	inventoryFull??004D:
 00002A63  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 00002A68  E8 00000000 E   *	    call   WriteString
 00002A6D  B8 000005DC	     3	mov eax, 1500
 00002A72  E8 00000000 E     3	call Delay
 00002A77  E8 00000000 E     3	call clrscr
 00002A7C		     3	end??004D:
 00002A7C  8B DA	     2		mov ebx,edx ;//moving for remove
 00002A7E  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00002A84  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002A8B  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002A92  E9 00000088	     2		jmp endCase??004B
 00002A97		     2		notEnoughGold??004B:
 00002A97  E8 00000000 E     2		call clrscr
 00002A9C  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 00002AA1  E8 00000000 E   *	    call   WriteString
 00002AA6  B8 000007D0	     2		mov eax,2000
 00002AAB  E8 00000000 E     2		call Delay
 00002AB0  EB 6D	     2		jmp endCase??004B
 00002AB2		     2	infoItem??004B:
 00002AB2  E8 00000000 E     2		call clrscr
 00002AB7  BA 0000062A R     3	mov edx, offset blank
 00002ABC  E8 00000000 E     3	call WriteString
 00002AC1  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002AC6  E8 00000000 E     3	call WriteString
 00002ACB  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002ACE  E8 00000000 E     3	call WriteDec
 00002AD3  BA 0000062A R     3	mov edx, offset blank
 00002AD8  E8 00000000 E     3	call WriteString
 00002ADD  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002AE2  E8 00000000 E     3	call WriteString
 00002AE7  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002AEA  E8 00000000 E     3	call WriteDec
 00002AEF  BA 0000062A R     3	mov edx, offset blank
 00002AF4  E8 00000000 E     3	call WriteString
 00002AF9  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002AFE  E8 00000000 E     3	call WriteString
 00002B03  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002B06  E8 00000000 E     3	call WriteDec
 00002B0B  BA 0000062A R     3	mov edx, offset blank
 00002B10  E8 00000000 E     3	call WriteString
 00002B15  B8 000007D0	     2		mov eax,2000
 00002B1A  E8 00000000 E     2		call Delay
 00002B1F		     2	endCase??004B:
 00002B1F  E9 FFFFF3D1	     1		jmp endInventory
 00002B24		     1	item8??0032:
 00002B24  BB 00000459 R     1		mov ebx,offset s9 ;//storing item for use
 00002B29  BA 0000061D R     2	mov edx, offset exitTitle
 00002B2E  BA 00000579 R     2	mov edx, offset buyTitle
 00002B33  E8 00000000 E     2	call WriteString
 00002B38  BA 000003D2 R     2	mov edx, offset infoTitle
 00002B3D  E8 00000000 E     2	call WriteString
 00002B42  E8 00000000 E     3		call ReadDec
 00002B47  8B C8	     3		mov ecx, eax
 00002B49  81 F9 0000038D    2	cmp ecx,909
 00002B4F  74 13	     2	je exit??004E
 00002B51  83 F9 02	     2	cmp ecx,2
 00002B54  74 13	     2	je buyItem??004E
 00002B56  83 F9 03	     2	cmp ecx,3
 00002B59  0F 84 0000009D    2	je infoItem??004E
 00002B5F  E9 00000105	     2	jmp endCase??004E
 00002B64		     2	exit??004E:
 00002B64  E9 00000100	     2		jmp endCase??004E
 00002B69		     2	buyItem??004E:
 00002B69  8B 15 00000050 R  2		mov edx, c1.gold 
 00002B6F  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002B72  3B D0	     2		cmp edx,eax
 00002B74  72 6B	     2		jb notEnoughGold??004E
 00002B76  29 05 00000050 R  2		sub c1.gold,eax ;//decrease yout gold
 00002B7C  8B C3	     2		mov eax,ebx ;//moving for add
 00002B7E  8B D3	     2		mov edx,ebx ;//storing for remove
 00002B80  BB 00000363 R     3	mov ebx, offset i1
 00002B85		     3	notEmpty??0050:
 00002B85  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002B88  74 0B	     3	je isEmpty??0050 
 00002B8A  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002B8E  74 1D	     3	je inventoryFull??0050
 00002B90  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002B93  EB F0	     3	jmp notEmpty??0050
 00002B95		     3	isEmpty??0050:
 00002B95  8B 08	     3	mov ecx, [eax].item.itemCode
 00002B97  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002B99  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002B9C  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002B9F  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002BA2  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002BA5  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002BA8  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002BAB  EB 19	     3	jmp end??0050
 00002BAD		     3	inventoryFull??0050:
 00002BAD  BA 0000042C R     3	mov edx, offset inventoryFullTitle
 00002BB2  E8 00000000 E   *	    call   WriteString
 00002BB7  B8 000005DC	     3	mov eax, 1500
 00002BBC  E8 00000000 E     3	call Delay
 00002BC1  E8 00000000 E     3	call clrscr
 00002BC6		     3	end??0050:
 00002BC6  8B DA	     2		mov ebx,edx ;//moving for remove
 00002BC8  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00002BCE  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002BD5  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002BDC  E9 00000088	     2		jmp endCase??004E
 00002BE1		     2		notEnoughGold??004E:
 00002BE1  E8 00000000 E     2		call clrscr
 00002BE6  BA 0000058C R     2		mov edx, offset notEnoughGoldTitle
 00002BEB  E8 00000000 E   *	    call   WriteString
 00002BF0  B8 000007D0	     2		mov eax,2000
 00002BF5  E8 00000000 E     2		call Delay
 00002BFA  EB 6D	     2		jmp endCase??004E
 00002BFC		     2	infoItem??004E:
 00002BFC  E8 00000000 E     2		call clrscr
 00002C01  BA 0000062A R     3	mov edx, offset blank
 00002C06  E8 00000000 E     3	call WriteString
 00002C0B  BA 000003FE R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002C10  E8 00000000 E     3	call WriteString
 00002C15  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002C18  E8 00000000 E     3	call WriteDec
 00002C1D  BA 0000062A R     3	mov edx, offset blank
 00002C22  E8 00000000 E     3	call WriteString
 00002C27  BA 000003EF R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002C2C  E8 00000000 E     3	call WriteString
 00002C31  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002C34  E8 00000000 E     3	call WriteDec
 00002C39  BA 0000062A R     3	mov edx, offset blank
 00002C3E  E8 00000000 E     3	call WriteString
 00002C43  BA 0000040C R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002C48  E8 00000000 E     3	call WriteString
 00002C4D  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002C50  E8 00000000 E     3	call WriteDec
 00002C55  BA 0000062A R     3	mov edx, offset blank
 00002C5A  E8 00000000 E     3	call WriteString
 00002C5F  B8 000007D0	     2		mov eax,2000
 00002C64  E8 00000000 E     2		call Delay
 00002C69		     2	endCase??004E:
 00002C69  E9 FFFFF287	     1		jmp endInventory
 00002C6E		     1	item9??0032:
 00002C6E  BB 0000043D R     1		mov ebx,offset s10 ;//storing item for use
 00002C73		     1	sellMode:
 00002C73  E8 00000000 E     1		call clrscr
 00002C78  BB 00000363 R     2	mov ebx, offset i1
 00002C7D  60		     3	pushAD
 00002C7E  33 C9	     3	xor ecx,ecx
 00002C80		     3	DO1??0052:
 00002C80  8B C1	     3	mov eax,ecx
 00002C82  E8 00000000 E     3	call WriteDec
 00002C87  B8 0000003A	     3	mov eax, ':'
 00002C8C  E8 00000000 E     3	call WriteChar
 00002C91  8B 03	     3	mov eax, [ebx].item.itemCode
 00002C93  83 F8 01	     4	cmp eax,1
 00002C96  74 11	     4	je item0??0053
 00002C98  83 F8 02	     4	cmp eax,2
 00002C9B  74 13	     4	je item1??0053
 00002C9D  83 F8 03	     4	cmp eax,3
 00002CA0  74 15	     4	je item2??0053
 00002CA2  83 F8 04	     4	cmp eax,4
 00002CA5  74 17	     4	je item3??0053
 00002CA7  EB 1C	     4	jmp default??0053
 00002CA9		     4	item0??0053:
 00002CA9  BA 00000000 R     4		mov edx, offset itemName1
 00002CAE  EB 1A	     4		jmp print??0053
 00002CB0		     4	item1??0053:
 00002CB0  BA 00000007 R     4		mov edx, offset itemName2
 00002CB5  EB 13	     4		jmp print??0053
 00002CB7		     4	item2??0053:
 00002CB7  BA 0000000D R     4		mov edx, offset itemName3
 00002CBC  EB 0C	     4		jmp print??0053
 00002CBE		     4	item3??0053:
 00002CBE  BA 00000015 R     4		mov edx, offset itemName4
 00002CC3  EB 05	     4		jmp print??0053
 00002CC5		     4	default??0053:
 00002CC5  BA 0000001B R     4		mov edx, offset defaultName
 00002CCA		     4	print??0053:
 00002CCA  E8 00000000 E   *	    call   WriteString
 00002CCF  BA 0000062A R     3	mov edx,offset blank
 00002CD4  E8 00000000 E     3	call WriteString
 00002CD9  8B 5B 10	     3	mov eBx,[ebx].item.next
 00002CDC  41		     3	inc ecx
 00002CDD  83 FB 00	     3	cmp ebx,null
 00002CE0  75 9E	     3	jne DO1??0052
 00002CE2  61		     3	popAD
 00002CE3  E8 00000000 E     3		call ReadDec
 00002CE8  8B C8	     3		mov ecx, eax
 00002CEA  83 F9 00	     2	cmp ecx,0
 00002CED  74 51	     2		je item0??0051
 00002CEF  83 F9 01	     2	cmp ecx,1
 00002CF2  0F 84 00000092    2		je item1??0051
 00002CF8  83 F9 02	     2	cmp ecx,2
 00002CFB  0F 84 000000D3    2		je item2??0051
 00002D01  83 F9 03	     2	cmp ecx,3
 00002D04  0F 84 00000114    2		je item3??0051
 00002D0A  83 F9 04	     2	cmp ecx,4
 00002D0D  0F 84 00000155    2		je item4??0051
 00002D13  83 F9 05	     2	cmp ecx,5
 00002D16  0F 84 00000196    2		je item5??0051
 00002D1C  83 F9 06	     2	cmp ecx,6
 00002D1F  0F 84 000001D7    2		je item6??0051
 00002D25  83 F9 07	     2	cmp ecx,7
 00002D28  0F 84 00000218    2		je item7??0051
 00002D2E  83 F9 08	     2	cmp ecx,8
 00002D31  0F 84 00000259    2		je item8??0051
 00002D37  83 F9 09	     2	cmp ecx,9
 00002D3A  0F 84 00000297    2		je item9??0051
 00002D40		     2	item0??0051:
 00002D40  BB 00000363 R     2		mov ebx,offset i1 ;//storing item for use
 00002D45  E8 00000000 E     3	call clrscr
 00002D4A  BA 00000582 R     3	mov edx, offset sellTitle
 00002D4F  E8 00000000 E   *	    call   WriteString
 00002D54  E8 00000000 E     4		call ReadDec
 00002D59  8B C8	     4		mov ecx, eax
 00002D5B  83 F9 01	     3	cmp ecx, 1
 00002D5E  74 00	     3	je doSell??0055
 00002D60		     3	doSell??0055:
 00002D60  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002D63  8B 15 00000050 R  3	mov edx,c1.gold
 00002D69  03 D0	     3	add edx,eax
 00002D6B  89 15 00000050 R  3	mov c1.gold,edx
 00002D71  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002D77  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002D7E  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002D85  E9 00000294	     2		jmp endInventory??0051
 00002D8A		     2	item1??0051:
 00002D8A  BB 00000347 R     2		mov ebx,offset i2 ;//storing item for use
 00002D8F  E8 00000000 E     3	call clrscr
 00002D94  BA 00000582 R     3	mov edx, offset sellTitle
 00002D99  E8 00000000 E   *	    call   WriteString
 00002D9E  E8 00000000 E     4		call ReadDec
 00002DA3  8B C8	     4		mov ecx, eax
 00002DA5  83 F9 01	     3	cmp ecx, 1
 00002DA8  74 00	     3	je doSell??0057
 00002DAA		     3	doSell??0057:
 00002DAA  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002DAD  8B 15 00000050 R  3	mov edx,c1.gold
 00002DB3  03 D0	     3	add edx,eax
 00002DB5  89 15 00000050 R  3	mov c1.gold,edx
 00002DBB  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002DC1  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002DC8  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002DCF  E9 0000024A	     2		jmp endInventory??0051
 00002DD4		     2	item2??0051:
 00002DD4  BB 0000032B R     2		mov ebx,offset i3 ;//storing item for use
 00002DD9  E8 00000000 E     3	call clrscr
 00002DDE  BA 00000582 R     3	mov edx, offset sellTitle
 00002DE3  E8 00000000 E   *	    call   WriteString
 00002DE8  E8 00000000 E     4		call ReadDec
 00002DED  8B C8	     4		mov ecx, eax
 00002DEF  83 F9 01	     3	cmp ecx, 1
 00002DF2  74 00	     3	je doSell??0059
 00002DF4		     3	doSell??0059:
 00002DF4  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002DF7  8B 15 00000050 R  3	mov edx,c1.gold
 00002DFD  03 D0	     3	add edx,eax
 00002DFF  89 15 00000050 R  3	mov c1.gold,edx
 00002E05  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002E0B  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002E12  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002E19  E9 00000200	     2		jmp endInventory??0051
 00002E1E		     2	item3??0051:
 00002E1E  BB 0000030F R     2		mov ebx,offset i4 ;//storing item for use
 00002E23  E8 00000000 E     3	call clrscr
 00002E28  BA 00000582 R     3	mov edx, offset sellTitle
 00002E2D  E8 00000000 E   *	    call   WriteString
 00002E32  E8 00000000 E     4		call ReadDec
 00002E37  8B C8	     4		mov ecx, eax
 00002E39  83 F9 01	     3	cmp ecx, 1
 00002E3C  74 00	     3	je doSell??005B
 00002E3E		     3	doSell??005B:
 00002E3E  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002E41  8B 15 00000050 R  3	mov edx,c1.gold
 00002E47  03 D0	     3	add edx,eax
 00002E49  89 15 00000050 R  3	mov c1.gold,edx
 00002E4F  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002E55  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002E5C  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002E63  E9 000001B6	     2		jmp endInventory??0051
 00002E68		     2	item4??0051:
 00002E68  BB 000002F3 R     2		mov ebx,offset i5 ;//storing item for use
 00002E6D  E8 00000000 E     3	call clrscr
 00002E72  BA 00000582 R     3	mov edx, offset sellTitle
 00002E77  E8 00000000 E   *	    call   WriteString
 00002E7C  E8 00000000 E     4		call ReadDec
 00002E81  8B C8	     4		mov ecx, eax
 00002E83  83 F9 01	     3	cmp ecx, 1
 00002E86  74 00	     3	je doSell??005D
 00002E88		     3	doSell??005D:
 00002E88  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002E8B  8B 15 00000050 R  3	mov edx,c1.gold
 00002E91  03 D0	     3	add edx,eax
 00002E93  89 15 00000050 R  3	mov c1.gold,edx
 00002E99  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002E9F  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002EA6  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002EAD  E9 0000016C	     2		jmp endInventory??0051
 00002EB2		     2	item5??0051:
 00002EB2  BB 000002D7 R     2		mov ebx,offset i6 ;//storing item for use
 00002EB7  E8 00000000 E     3	call clrscr
 00002EBC  BA 00000582 R     3	mov edx, offset sellTitle
 00002EC1  E8 00000000 E   *	    call   WriteString
 00002EC6  E8 00000000 E     4		call ReadDec
 00002ECB  8B C8	     4		mov ecx, eax
 00002ECD  83 F9 01	     3	cmp ecx, 1
 00002ED0  74 00	     3	je doSell??005F
 00002ED2		     3	doSell??005F:
 00002ED2  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002ED5  8B 15 00000050 R  3	mov edx,c1.gold
 00002EDB  03 D0	     3	add edx,eax
 00002EDD  89 15 00000050 R  3	mov c1.gold,edx
 00002EE3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002EE9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002EF0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002EF7  E9 00000122	     2		jmp endInventory??0051
 00002EFC		     2	item6??0051:
 00002EFC  BB 000002BB R     2		mov ebx,offset i7 ;//storing item for use
 00002F01  E8 00000000 E     3	call clrscr
 00002F06  BA 00000582 R     3	mov edx, offset sellTitle
 00002F0B  E8 00000000 E   *	    call   WriteString
 00002F10  E8 00000000 E     4		call ReadDec
 00002F15  8B C8	     4		mov ecx, eax
 00002F17  83 F9 01	     3	cmp ecx, 1
 00002F1A  74 00	     3	je doSell??0061
 00002F1C		     3	doSell??0061:
 00002F1C  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002F1F  8B 15 00000050 R  3	mov edx,c1.gold
 00002F25  03 D0	     3	add edx,eax
 00002F27  89 15 00000050 R  3	mov c1.gold,edx
 00002F2D  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002F33  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002F3A  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002F41  E9 000000D8	     2		jmp endInventory??0051
 00002F46		     2	item7??0051:
 00002F46  BB 0000029F R     2		mov ebx,offset i8 ;//storing item for use
 00002F4B  E8 00000000 E     3	call clrscr
 00002F50  BA 00000582 R     3	mov edx, offset sellTitle
 00002F55  E8 00000000 E   *	    call   WriteString
 00002F5A  E8 00000000 E     4		call ReadDec
 00002F5F  8B C8	     4		mov ecx, eax
 00002F61  83 F9 01	     3	cmp ecx, 1
 00002F64  74 00	     3	je doSell??0063
 00002F66		     3	doSell??0063:
 00002F66  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002F69  8B 15 00000050 R  3	mov edx,c1.gold
 00002F6F  03 D0	     3	add edx,eax
 00002F71  89 15 00000050 R  3	mov c1.gold,edx
 00002F77  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002F7D  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002F84  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002F8B  E9 0000008E	     2		jmp endInventory??0051
 00002F90		     2	item8??0051:
 00002F90  BB 00000283 R     2		mov ebx,offset i9 ;//storing item for use
 00002F95  E8 00000000 E     3	call clrscr
 00002F9A  BA 00000582 R     3	mov edx, offset sellTitle
 00002F9F  E8 00000000 E   *	    call   WriteString
 00002FA4  E8 00000000 E     4		call ReadDec
 00002FA9  8B C8	     4		mov ecx, eax
 00002FAB  83 F9 01	     3	cmp ecx, 1
 00002FAE  74 00	     3	je doSell??0065
 00002FB0		     3	doSell??0065:
 00002FB0  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002FB3  8B 15 00000050 R  3	mov edx,c1.gold
 00002FB9  03 D0	     3	add edx,eax
 00002FBB  89 15 00000050 R  3	mov c1.gold,edx
 00002FC1  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002FC7  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002FCE  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002FD5  EB 47	     2		jmp endInventory??0051
 00002FD7		     2	item9??0051:
 00002FD7  BB 00000267 R     2		mov ebx,offset i10 ;//storing item for use
 00002FDC  E8 00000000 E     3	call clrscr
 00002FE1  BA 00000582 R     3	mov edx, offset sellTitle
 00002FE6  E8 00000000 E   *	    call   WriteString
 00002FEB  E8 00000000 E     4		call ReadDec
 00002FF0  8B C8	     4		mov ecx, eax
 00002FF2  83 F9 01	     3	cmp ecx, 1
 00002FF5  74 00	     3	je doSell??0067
 00002FF7		     3	doSell??0067:
 00002FF7  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002FFA  8B 15 00000050 R  3	mov edx,c1.gold
 00003000  03 D0	     3	add edx,eax
 00003002  89 15 00000050 R  3	mov c1.gold,edx
 00003008  C7 03 00000000    4	mov [ebx].item.itemCode,null
 0000300E  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003015  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 0000301C  EB 00	     2		jmp endInventory??0051
 0000301E		     2	endInventory??0051:
 0000301E  E9 FFFFEED2	     1	jmp endInventory
 00003023		     1	exitShop:
 00003023  E8 00000000 E     1	Call clrscr
 00003028  EB 00				jmp end_switch
 0000302A				end_switch:
 0000302A  E9 FFFFD043			jmp while_main ;//default


 0000302F				 endwhile_main:
					
					invoke ExitProcess, 0
 0000302F  6A 00	   *	    push   +000000000h
 00003031  E8 00000000 E   *	    call   ExitProcess

 00003036			main endp

				end main
Microsoft (R) Macro Assembler Version 14.13.26129.0	    04/03/18 20:42:29
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

_get_input . . . . . . . . . . .	Proc
mAddItem . . . . . . . . . . . .	Proc
mBuyOptions  . . . . . . . . . .	Proc
mCombat  . . . . . . . . . . . .	Proc
mDequip  . . . . . . . . . . . .	Proc
mDisplayInventory  . . . . . . .	Proc
mDisplayItemInfo . . . . . . . .	Proc
mEquip . . . . . . . . . . . . .	Proc
mGetCharacterName  . . . . . . .	Proc
mGetItemName . . . . . . . . . .	Proc
mInitializeCharacter . . . . . .	Proc
mInitializeEnemy . . . . . . . .	Proc
mInventory . . . . . . . . . . .	Proc
mLevelUp . . . . . . . . . . . .	Proc
mPrintCharacterSheet . . . . . .	Proc
mRemoveItem  . . . . . . . . . .	Proc
mSellMode  . . . . . . . . . . .	Proc
mSellOptions . . . . . . . . . .	Proc
mShop  . . . . . . . . . . . . .	Proc
mitemOptions . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
character  . . . . . . . . . . .	 0000005C
  xPos . . . . . . . . . . . . .	 00000000	 DWord
  yPos . . . . . . . . . . . . .	 00000004	 DWord
  characterName  . . . . . . . .	 00000008	 Byte
  level  . . . . . . . . . . . .	 00000018	 DWord
  exp  . . . . . . . . . . . . .	 0000001C	 DWord
  expToNext  . . . . . . . . . .	 00000020	 DWord
  gold . . . . . . . . . . . . .	 00000024	 DWord
  brawn  . . . . . . . . . . . .	 00000028	 DWord
  agility  . . . . . . . . . . .	 0000002C	 DWord
  mind . . . . . . . . . . . . .	 00000030	 DWord
  fortune  . . . . . . . . . . .	 00000034	 DWord
  hpMax  . . . . . . . . . . . .	 00000038	 DWord
  hp . . . . . . . . . . . . . .	 0000003C	 DWord
  damageMin  . . . . . . . . . .	 00000040	 DWord
  damageMax  . . . . . . . . . .	 00000044	 DWord
  weaponCode . . . . . . . . . .	 00000048	 DWord
  weaponBuyValue . . . . . . . .	 0000004C	 DWord
  weaponSellValue  . . . . . . .	 00000050	 DWord
  weaponDamage . . . . . . . . .	 00000054	 DWord
  defence  . . . . . . . . . . .	 00000058	 DWord
enemy  . . . . . . . . . . . . .	 00000020
  enemyName  . . . . . . . . . .	 00000000	 Byte
  hpMax  . . . . . . . . . . . .	 00000008	 DWord
  hp . . . . . . . . . . . . . .	 0000000C	 DWord
  damageMin  . . . . . . . . . .	 00000010	 DWord
  damageMax  . . . . . . . . . .	 00000014	 DWord
  defence  . . . . . . . . . . .	 00000018	 DWord
  expReward  . . . . . . . . . .	 0000001C	 DWord
item . . . . . . . . . . . . . .	 0000001C
  itemCode . . . . . . . . . . .	 00000000	 DWord
  buyValue . . . . . . . . . . .	 00000004	 DWord
  sellValue  . . . . . . . . . .	 00000008	 DWord
  prev . . . . . . . . . . . . .	 0000000C	 DWord
  next . . . . . . . . . . . . .	 00000010	 DWord
  combatValue  . . . . . . . . .	 00000014	 DWord
  itemType . . . . . . . . . . .	 00000018	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000062E DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00003036 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00003036 Public STDCALL
  while_main . . . . . . . . . .	L Near	 00000072 _TEXT	
  character_sheet  . . . . . . .	L Near	 00000111 _TEXT	
  item0??0001  . . . . . . . . .	L Near	 00000317 _TEXT	
  item1??0001  . . . . . . . . .	L Near	 0000031E _TEXT	
  item2??0001  . . . . . . . . .	L Near	 00000325 _TEXT	
  item3??0001  . . . . . . . . .	L Near	 0000032C _TEXT	
  default??0001  . . . . . . . .	L Near	 00000333 _TEXT	
  print??0001  . . . . . . . . .	L Near	 00000338 _TEXT	
  combat . . . . . . . . . . . .	L Near	 00000363 _TEXT	
  WHILE_COMBAT??0003 . . . . . .	L Near	 000003D9 _TEXT	
  AND_COMBAT1??0003  . . . . . .	L Near	 000003E7 _TEXT	
  AND_COMBAT2??0003  . . . . . .	L Near	 000003F5 _TEXT	
  AND_COMBAT_TRUE??0003  . . . .	L Near	 00000403 _TEXT	
  attack . . . . . . . . . . . .	L Near	 00000533 _TEXT	
  enemy_dead . . . . . . . . . .	L Near	 00000559 _TEXT	
  flee . . . . . . . . . . . . .	L Near	 00000562 _TEXT	
  end_switch??0003 . . . . . . .	L Near	 00000569 _TEXT	
  character_dead . . . . . . . .	L Near	 0000058F _TEXT	
  character_not_dead . . . . . .	L Near	 00000596 _TEXT	
  AND_FALSE_COMBAT??0003 . . . .	L Near	 0000059B _TEXT	
  not_escape . . . . . . . . . .	L Near	 000005B3 _TEXT	
  not_playerDefeated . . . . . .	L Near	 000005C8 _TEXT	
  notEmpty??0005 . . . . . . . .	L Near	 000005DC _TEXT	
  isEmpty??0005  . . . . . . . .	L Near	 000005EC _TEXT	
  inventoryFull??0005  . . . . .	L Near	 00000604 _TEXT	
  end??0005  . . . . . . . . . .	L Near	 0000061D _TEXT	
  eventDetermined  . . . . . . .	L Near	 00000647 _TEXT	
  levelUp  . . . . . . . . . . .	L Near	 0000065C _TEXT	
  notEnough  . . . . . . . . . .	L Near	 000006E7 _TEXT	
  leveledUp  . . . . . . . . . .	L Near	 000006FB _TEXT	
  inventory  . . . . . . . . . .	L Near	 00000706 _TEXT	
  DO1??0006  . . . . . . . . . .	L Near	 00000718 _TEXT	
  item0??0007  . . . . . . . . .	L Near	 00000741 _TEXT	
  item1??0007  . . . . . . . . .	L Near	 00000748 _TEXT	
  item2??0007  . . . . . . . . .	L Near	 0000074F _TEXT	
  item3??0007  . . . . . . . . .	L Near	 00000756 _TEXT	
  default??0007  . . . . . . . .	L Near	 0000075D _TEXT	
  print??0007  . . . . . . . . .	L Near	 00000762 _TEXT	
  item0  . . . . . . . . . . . .	L Near	 000007D8 _TEXT	
  exit??0009 . . . . . . . . . .	L Near	 0000082C _TEXT	
  removeItem??0009 . . . . . . .	L Near	 00000831 _TEXT	
  equipItem??0009  . . . . . . .	L Near	 0000084A _TEXT	
  notEmpty??000C . . . . . . . .	L Near	 0000086B _TEXT	
  isEmpty??000C  . . . . . . . .	L Near	 0000087F _TEXT	
  inventoryFull??000C  . . . . .	L Near	 00000915 _TEXT	
  nothingEquipped??000C  . . . .	L Near	 0000092E _TEXT	
  notEquipped??000B  . . . . . .	L Near	 00000930 _TEXT	
  infoItem??0009 . . . . . . . .	L Near	 000009B6 _TEXT	
  endCase??0009  . . . . . . . .	L Near	 00000A23 _TEXT	
  item1  . . . . . . . . . . . .	L Near	 00000A28 _TEXT	
  exit??000D . . . . . . . . . .	L Near	 00000A7C _TEXT	
  removeItem??000D . . . . . . .	L Near	 00000A81 _TEXT	
  equipItem??000D  . . . . . . .	L Near	 00000A9A _TEXT	
  notEmpty??0010 . . . . . . . .	L Near	 00000ABB _TEXT	
  isEmpty??0010  . . . . . . . .	L Near	 00000ACF _TEXT	
  inventoryFull??0010  . . . . .	L Near	 00000B65 _TEXT	
  nothingEquipped??0010  . . . .	L Near	 00000B7E _TEXT	
  notEquipped??000F  . . . . . .	L Near	 00000B80 _TEXT	
  infoItem??000D . . . . . . . .	L Near	 00000C06 _TEXT	
  endCase??000D  . . . . . . . .	L Near	 00000C73 _TEXT	
  item2  . . . . . . . . . . . .	L Near	 00000C78 _TEXT	
  exit??0011 . . . . . . . . . .	L Near	 00000CCC _TEXT	
  removeItem??0011 . . . . . . .	L Near	 00000CD1 _TEXT	
  equipItem??0011  . . . . . . .	L Near	 00000CEA _TEXT	
  notEmpty??0014 . . . . . . . .	L Near	 00000D0B _TEXT	
  isEmpty??0014  . . . . . . . .	L Near	 00000D1F _TEXT	
  inventoryFull??0014  . . . . .	L Near	 00000DB5 _TEXT	
  nothingEquipped??0014  . . . .	L Near	 00000DCE _TEXT	
  notEquipped??0013  . . . . . .	L Near	 00000DD0 _TEXT	
  infoItem??0011 . . . . . . . .	L Near	 00000E56 _TEXT	
  endCase??0011  . . . . . . . .	L Near	 00000EC3 _TEXT	
  item3  . . . . . . . . . . . .	L Near	 00000EC8 _TEXT	
  exit??0015 . . . . . . . . . .	L Near	 00000F1C _TEXT	
  removeItem??0015 . . . . . . .	L Near	 00000F21 _TEXT	
  equipItem??0015  . . . . . . .	L Near	 00000F3A _TEXT	
  notEmpty??0018 . . . . . . . .	L Near	 00000F5B _TEXT	
  isEmpty??0018  . . . . . . . .	L Near	 00000F6F _TEXT	
  inventoryFull??0018  . . . . .	L Near	 00001005 _TEXT	
  nothingEquipped??0018  . . . .	L Near	 0000101E _TEXT	
  notEquipped??0017  . . . . . .	L Near	 00001020 _TEXT	
  infoItem??0015 . . . . . . . .	L Near	 000010A6 _TEXT	
  endCase??0015  . . . . . . . .	L Near	 00001113 _TEXT	
  item4  . . . . . . . . . . . .	L Near	 00001118 _TEXT	
  exit??0019 . . . . . . . . . .	L Near	 0000116C _TEXT	
  removeItem??0019 . . . . . . .	L Near	 00001171 _TEXT	
  equipItem??0019  . . . . . . .	L Near	 0000118A _TEXT	
  notEmpty??001C . . . . . . . .	L Near	 000011AB _TEXT	
  isEmpty??001C  . . . . . . . .	L Near	 000011BF _TEXT	
  inventoryFull??001C  . . . . .	L Near	 00001255 _TEXT	
  nothingEquipped??001C  . . . .	L Near	 0000126E _TEXT	
  notEquipped??001B  . . . . . .	L Near	 00001270 _TEXT	
  infoItem??0019 . . . . . . . .	L Near	 000012F6 _TEXT	
  endCase??0019  . . . . . . . .	L Near	 00001363 _TEXT	
  item5  . . . . . . . . . . . .	L Near	 00001368 _TEXT	
  exit??001D . . . . . . . . . .	L Near	 000013BC _TEXT	
  removeItem??001D . . . . . . .	L Near	 000013C1 _TEXT	
  equipItem??001D  . . . . . . .	L Near	 000013DA _TEXT	
  notEmpty??0020 . . . . . . . .	L Near	 000013FB _TEXT	
  isEmpty??0020  . . . . . . . .	L Near	 0000140F _TEXT	
  inventoryFull??0020  . . . . .	L Near	 000014A5 _TEXT	
  nothingEquipped??0020  . . . .	L Near	 000014BE _TEXT	
  notEquipped??001F  . . . . . .	L Near	 000014C0 _TEXT	
  infoItem??001D . . . . . . . .	L Near	 00001546 _TEXT	
  endCase??001D  . . . . . . . .	L Near	 000015B3 _TEXT	
  item6  . . . . . . . . . . . .	L Near	 000015B8 _TEXT	
  exit??0021 . . . . . . . . . .	L Near	 0000160C _TEXT	
  removeItem??0021 . . . . . . .	L Near	 00001611 _TEXT	
  equipItem??0021  . . . . . . .	L Near	 0000162A _TEXT	
  notEmpty??0024 . . . . . . . .	L Near	 0000164B _TEXT	
  isEmpty??0024  . . . . . . . .	L Near	 0000165F _TEXT	
  inventoryFull??0024  . . . . .	L Near	 000016F5 _TEXT	
  nothingEquipped??0024  . . . .	L Near	 0000170E _TEXT	
  notEquipped??0023  . . . . . .	L Near	 00001710 _TEXT	
  infoItem??0021 . . . . . . . .	L Near	 00001796 _TEXT	
  endCase??0021  . . . . . . . .	L Near	 00001803 _TEXT	
  item7  . . . . . . . . . . . .	L Near	 00001808 _TEXT	
  exit??0025 . . . . . . . . . .	L Near	 0000185C _TEXT	
  removeItem??0025 . . . . . . .	L Near	 00001861 _TEXT	
  equipItem??0025  . . . . . . .	L Near	 0000187A _TEXT	
  notEmpty??0028 . . . . . . . .	L Near	 0000189B _TEXT	
  isEmpty??0028  . . . . . . . .	L Near	 000018AF _TEXT	
  inventoryFull??0028  . . . . .	L Near	 00001945 _TEXT	
  nothingEquipped??0028  . . . .	L Near	 0000195E _TEXT	
  notEquipped??0027  . . . . . .	L Near	 00001960 _TEXT	
  infoItem??0025 . . . . . . . .	L Near	 000019E6 _TEXT	
  endCase??0025  . . . . . . . .	L Near	 00001A53 _TEXT	
  item8  . . . . . . . . . . . .	L Near	 00001A58 _TEXT	
  exit??0029 . . . . . . . . . .	L Near	 00001AAC _TEXT	
  removeItem??0029 . . . . . . .	L Near	 00001AB1 _TEXT	
  equipItem??0029  . . . . . . .	L Near	 00001ACA _TEXT	
  notEmpty??002C . . . . . . . .	L Near	 00001AEB _TEXT	
  isEmpty??002C  . . . . . . . .	L Near	 00001AFF _TEXT	
  inventoryFull??002C  . . . . .	L Near	 00001B95 _TEXT	
  nothingEquipped??002C  . . . .	L Near	 00001BAE _TEXT	
  notEquipped??002B  . . . . . .	L Near	 00001BB0 _TEXT	
  infoItem??0029 . . . . . . . .	L Near	 00001C36 _TEXT	
  endCase??0029  . . . . . . . .	L Near	 00001CA3 _TEXT	
  item9  . . . . . . . . . . . .	L Near	 00001CA8 _TEXT	
  exit??002D . . . . . . . . . .	L Near	 00001CFC _TEXT	
  removeItem??002D . . . . . . .	L Near	 00001D01 _TEXT	
  equipItem??002D  . . . . . . .	L Near	 00001D1A _TEXT	
  notEmpty??0030 . . . . . . . .	L Near	 00001D3B _TEXT	
  isEmpty??0030  . . . . . . . .	L Near	 00001D4F _TEXT	
  inventoryFull??0030  . . . . .	L Near	 00001DE5 _TEXT	
  nothingEquipped??0030  . . . .	L Near	 00001DFE _TEXT	
  notEquipped??002F  . . . . . .	L Near	 00001E00 _TEXT	
  infoItem??002D . . . . . . . .	L Near	 00001E86 _TEXT	
  endCase??002D  . . . . . . . .	L Near	 00001EF3 _TEXT	
  endInventory . . . . . . . . .	L Near	 00001EF5 _TEXT	
  dequip . . . . . . . . . . . .	L Near	 00001EFF _TEXT	
  notEmpty??0031 . . . . . . . .	L Near	 00001F11 _TEXT	
  isEmpty??0031  . . . . . . . .	L Near	 00001F25 _TEXT	
  inventoryFull??0031  . . . . .	L Near	 00001FBB _TEXT	
  nothingEquipped??0031  . . . .	L Near	 00001FD4 _TEXT	
  shop . . . . . . . . . . . . .	L Near	 00001FD9 _TEXT	
  DO1??0033  . . . . . . . . . .	L Near	 00001FF5 _TEXT	
  item0??0034  . . . . . . . . .	L Near	 0000201E _TEXT	
  item1??0034  . . . . . . . . .	L Near	 00002025 _TEXT	
  item2??0034  . . . . . . . . .	L Near	 0000202C _TEXT	
  item3??0034  . . . . . . . . .	L Near	 00002033 _TEXT	
  default??0034  . . . . . . . .	L Near	 0000203A _TEXT	
  print??0034  . . . . . . . . .	L Near	 0000203F _TEXT	
  item0??0032  . . . . . . . . .	L Near	 000020D4 _TEXT	
  exit??0036 . . . . . . . . . .	L Near	 00002114 _TEXT	
  buyItem??0036  . . . . . . . .	L Near	 00002119 _TEXT	
  notEmpty??0038 . . . . . . . .	L Near	 00002135 _TEXT	
  isEmpty??0038  . . . . . . . .	L Near	 00002145 _TEXT	
  inventoryFull??0038  . . . . .	L Near	 0000215D _TEXT	
  end??0038  . . . . . . . . . .	L Near	 00002176 _TEXT	
  notEnoughGold??0036  . . . . .	L Near	 00002191 _TEXT	
  infoItem??0036 . . . . . . . .	L Near	 000021AC _TEXT	
  endCase??0036  . . . . . . . .	L Near	 00002219 _TEXT	
  item1??0032  . . . . . . . . .	L Near	 0000221E _TEXT	
  exit??0039 . . . . . . . . . .	L Near	 0000225E _TEXT	
  buyItem??0039  . . . . . . . .	L Near	 00002263 _TEXT	
  notEmpty??003B . . . . . . . .	L Near	 0000227F _TEXT	
  isEmpty??003B  . . . . . . . .	L Near	 0000228F _TEXT	
  inventoryFull??003B  . . . . .	L Near	 000022A7 _TEXT	
  end??003B  . . . . . . . . . .	L Near	 000022C0 _TEXT	
  notEnoughGold??0039  . . . . .	L Near	 000022DB _TEXT	
  infoItem??0039 . . . . . . . .	L Near	 000022F6 _TEXT	
  endCase??0039  . . . . . . . .	L Near	 00002363 _TEXT	
  item2??0032  . . . . . . . . .	L Near	 00002368 _TEXT	
  exit??003C . . . . . . . . . .	L Near	 000023A8 _TEXT	
  buyItem??003C  . . . . . . . .	L Near	 000023AD _TEXT	
  notEmpty??003E . . . . . . . .	L Near	 000023C9 _TEXT	
  isEmpty??003E  . . . . . . . .	L Near	 000023D9 _TEXT	
  inventoryFull??003E  . . . . .	L Near	 000023F1 _TEXT	
  end??003E  . . . . . . . . . .	L Near	 0000240A _TEXT	
  notEnoughGold??003C  . . . . .	L Near	 00002425 _TEXT	
  infoItem??003C . . . . . . . .	L Near	 00002440 _TEXT	
  endCase??003C  . . . . . . . .	L Near	 000024AD _TEXT	
  item3??0032  . . . . . . . . .	L Near	 000024B2 _TEXT	
  exit??003F . . . . . . . . . .	L Near	 000024F2 _TEXT	
  buyItem??003F  . . . . . . . .	L Near	 000024F7 _TEXT	
  notEmpty??0041 . . . . . . . .	L Near	 00002513 _TEXT	
  isEmpty??0041  . . . . . . . .	L Near	 00002523 _TEXT	
  inventoryFull??0041  . . . . .	L Near	 0000253B _TEXT	
  end??0041  . . . . . . . . . .	L Near	 00002554 _TEXT	
  notEnoughGold??003F  . . . . .	L Near	 0000256F _TEXT	
  infoItem??003F . . . . . . . .	L Near	 0000258A _TEXT	
  endCase??003F  . . . . . . . .	L Near	 000025F7 _TEXT	
  item4??0032  . . . . . . . . .	L Near	 000025FC _TEXT	
  exit??0042 . . . . . . . . . .	L Near	 0000263C _TEXT	
  buyItem??0042  . . . . . . . .	L Near	 00002641 _TEXT	
  notEmpty??0044 . . . . . . . .	L Near	 0000265D _TEXT	
  isEmpty??0044  . . . . . . . .	L Near	 0000266D _TEXT	
  inventoryFull??0044  . . . . .	L Near	 00002685 _TEXT	
  end??0044  . . . . . . . . . .	L Near	 0000269E _TEXT	
  notEnoughGold??0042  . . . . .	L Near	 000026B9 _TEXT	
  infoItem??0042 . . . . . . . .	L Near	 000026D4 _TEXT	
  endCase??0042  . . . . . . . .	L Near	 00002741 _TEXT	
  item5??0032  . . . . . . . . .	L Near	 00002746 _TEXT	
  exit??0045 . . . . . . . . . .	L Near	 00002786 _TEXT	
  buyItem??0045  . . . . . . . .	L Near	 0000278B _TEXT	
  notEmpty??0047 . . . . . . . .	L Near	 000027A7 _TEXT	
  isEmpty??0047  . . . . . . . .	L Near	 000027B7 _TEXT	
  inventoryFull??0047  . . . . .	L Near	 000027CF _TEXT	
  end??0047  . . . . . . . . . .	L Near	 000027E8 _TEXT	
  notEnoughGold??0045  . . . . .	L Near	 00002803 _TEXT	
  infoItem??0045 . . . . . . . .	L Near	 0000281E _TEXT	
  endCase??0045  . . . . . . . .	L Near	 0000288B _TEXT	
  item6??0032  . . . . . . . . .	L Near	 00002890 _TEXT	
  exit??0048 . . . . . . . . . .	L Near	 000028D0 _TEXT	
  buyItem??0048  . . . . . . . .	L Near	 000028D5 _TEXT	
  notEmpty??004A . . . . . . . .	L Near	 000028F1 _TEXT	
  isEmpty??004A  . . . . . . . .	L Near	 00002901 _TEXT	
  inventoryFull??004A  . . . . .	L Near	 00002919 _TEXT	
  end??004A  . . . . . . . . . .	L Near	 00002932 _TEXT	
  notEnoughGold??0048  . . . . .	L Near	 0000294D _TEXT	
  infoItem??0048 . . . . . . . .	L Near	 00002968 _TEXT	
  endCase??0048  . . . . . . . .	L Near	 000029D5 _TEXT	
  item7??0032  . . . . . . . . .	L Near	 000029DA _TEXT	
  exit??004B . . . . . . . . . .	L Near	 00002A1A _TEXT	
  buyItem??004B  . . . . . . . .	L Near	 00002A1F _TEXT	
  notEmpty??004D . . . . . . . .	L Near	 00002A3B _TEXT	
  isEmpty??004D  . . . . . . . .	L Near	 00002A4B _TEXT	
  inventoryFull??004D  . . . . .	L Near	 00002A63 _TEXT	
  end??004D  . . . . . . . . . .	L Near	 00002A7C _TEXT	
  notEnoughGold??004B  . . . . .	L Near	 00002A97 _TEXT	
  infoItem??004B . . . . . . . .	L Near	 00002AB2 _TEXT	
  endCase??004B  . . . . . . . .	L Near	 00002B1F _TEXT	
  item8??0032  . . . . . . . . .	L Near	 00002B24 _TEXT	
  exit??004E . . . . . . . . . .	L Near	 00002B64 _TEXT	
  buyItem??004E  . . . . . . . .	L Near	 00002B69 _TEXT	
  notEmpty??0050 . . . . . . . .	L Near	 00002B85 _TEXT	
  isEmpty??0050  . . . . . . . .	L Near	 00002B95 _TEXT	
  inventoryFull??0050  . . . . .	L Near	 00002BAD _TEXT	
  end??0050  . . . . . . . . . .	L Near	 00002BC6 _TEXT	
  notEnoughGold??004E  . . . . .	L Near	 00002BE1 _TEXT	
  infoItem??004E . . . . . . . .	L Near	 00002BFC _TEXT	
  endCase??004E  . . . . . . . .	L Near	 00002C69 _TEXT	
  item9??0032  . . . . . . . . .	L Near	 00002C6E _TEXT	
  sellMode . . . . . . . . . . .	L Near	 00002C73 _TEXT	
  DO1??0052  . . . . . . . . . .	L Near	 00002C80 _TEXT	
  item0??0053  . . . . . . . . .	L Near	 00002CA9 _TEXT	
  item1??0053  . . . . . . . . .	L Near	 00002CB0 _TEXT	
  item2??0053  . . . . . . . . .	L Near	 00002CB7 _TEXT	
  item3??0053  . . . . . . . . .	L Near	 00002CBE _TEXT	
  default??0053  . . . . . . . .	L Near	 00002CC5 _TEXT	
  print??0053  . . . . . . . . .	L Near	 00002CCA _TEXT	
  item0??0051  . . . . . . . . .	L Near	 00002D40 _TEXT	
  doSell??0055 . . . . . . . . .	L Near	 00002D60 _TEXT	
  item1??0051  . . . . . . . . .	L Near	 00002D8A _TEXT	
  doSell??0057 . . . . . . . . .	L Near	 00002DAA _TEXT	
  item2??0051  . . . . . . . . .	L Near	 00002DD4 _TEXT	
  doSell??0059 . . . . . . . . .	L Near	 00002DF4 _TEXT	
  item3??0051  . . . . . . . . .	L Near	 00002E1E _TEXT	
  doSell??005B . . . . . . . . .	L Near	 00002E3E _TEXT	
  item4??0051  . . . . . . . . .	L Near	 00002E68 _TEXT	
  doSell??005D . . . . . . . . .	L Near	 00002E88 _TEXT	
  item5??0051  . . . . . . . . .	L Near	 00002EB2 _TEXT	
  doSell??005F . . . . . . . . .	L Near	 00002ED2 _TEXT	
  item6??0051  . . . . . . . . .	L Near	 00002EFC _TEXT	
  doSell??0061 . . . . . . . . .	L Near	 00002F1C _TEXT	
  item7??0051  . . . . . . . . .	L Near	 00002F46 _TEXT	
  doSell??0063 . . . . . . . . .	L Near	 00002F66 _TEXT	
  item8??0051  . . . . . . . . .	L Near	 00002F90 _TEXT	
  doSell??0065 . . . . . . . . .	L Near	 00002FB0 _TEXT	
  item9??0051  . . . . . . . . .	L Near	 00002FD7 _TEXT	
  doSell??0067 . . . . . . . . .	L Near	 00002FF7 _TEXT	
  endInventory??0051 . . . . . .	L Near	 0000301E _TEXT	
  exitShop . . . . . . . . . . .	L Near	 00003023 _TEXT	
  end_switch . . . . . . . . . .	L Near	 0000302A _TEXT	
  endwhile_main  . . . . . . . .	L Near	 0000302F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
C1 . . . . . . . . . . . . . . .	character  0000002C _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
agilityTitle . . . . . . . . . .	Byte	 000000F5 _DATA	
attackTitle  . . . . . . . . . .	Byte	 000001EB _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 0000062A _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brawnTitle . . . . . . . . . . .	Byte	 000000EC _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
buyTitle . . . . . . . . . . . .	Byte	 00000579 _DATA	
characterSheetTitle  . . . . . .	Byte	 00000088 _DATA	
characterSheet . . . . . . . . .	Byte	 000005B5 _DATA	
combatAttributesTitle  . . . . .	Byte	 00000113 _DATA	
combatMenuTitle  . . . . . . . .	Byte	 0000019F _DATA	
combatOptionsMenuTitle . . . . .	Byte	 000001D6 _DATA	
combatTitle  . . . . . . . . . .	Byte	 000005C9 _DATA	
command1 . . . . . . . . . . . .	Byte	 00000150 _DATA	
continueCommand  . . . . . . . .	Byte	 00000603 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
damageTitle  . . . . . . . . . .	Byte	 00000131 _DATA	
defaultName  . . . . . . . . . .	Byte	 0000001B _DATA	
defenceTitle . . . . . . . . . .	Byte	 0000013B _DATA	
dequipTitle  . . . . . . . . . .	Byte	 000005EF _DATA	
discardTitle . . . . . . . . . .	Byte	 000003B8 _DATA	
e1 . . . . . . . . . . . . . . .	enemy	 0000017C _DATA	
enemyDamageTitle . . . . . . . .	Byte	 000001C6 _DATA	
enemyDefeatedEvent . . . . . . .	Byte	 00000224 _DATA	
enemyDefeated  . . . . . . . . .	Byte	 0000019E _DATA	
enemyHPTitle . . . . . . . . . .	Byte	 000001BA _DATA	
enemyNameTitle . . . . . . . . .	Byte	 000001AC _DATA	
equipTitle . . . . . . . . . . .	Byte	 000003C6 _DATA	
equippedWeaponTitle  . . . . . .	Byte	 00000146 _DATA	
escapeEvent  . . . . . . . . . .	Byte	 00000201 _DATA	
escape . . . . . . . . . . . . .	Byte	 0000019C _DATA	
exitTitle  . . . . . . . . . . .	Byte	 0000061D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
expTitle . . . . . . . . . . . .	Byte	 000000C2 _DATA	
fleeTitle  . . . . . . . . . . .	Byte	 000001F7 _DATA	
fortuneTitle . . . . . . . . . .	Byte	 00000108 _DATA	
goldTitle  . . . . . . . . . . .	Byte	 000000CA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hpTitle  . . . . . . . . . . . .	Byte	 0000012B _DATA	
i10  . . . . . . . . . . . . . .	item	 00000267 _DATA	
i1 . . . . . . . . . . . . . . .	item	 00000363 _DATA	
i2 . . . . . . . . . . . . . . .	item	 00000347 _DATA	
i3 . . . . . . . . . . . . . . .	item	 0000032B _DATA	
i4 . . . . . . . . . . . . . . .	item	 0000030F _DATA	
i5 . . . . . . . . . . . . . . .	item	 000002F3 _DATA	
i6 . . . . . . . . . . . . . . .	item	 000002D7 _DATA	
i7 . . . . . . . . . . . . . . .	item	 000002BB _DATA	
i8 . . . . . . . . . . . . . . .	item	 0000029F _DATA	
i9 . . . . . . . . . . . . . . .	item	 00000283 _DATA	
infoTitle  . . . . . . . . . . .	Byte	 000003D2 _DATA	
input_state  . . . . . . . . . .	DWord	 00000028 _DATA	
inventoryFullTitle . . . . . . .	Byte	 0000042C _DATA	
inventoryTitle . . . . . . . . .	Byte	 000005E1 _DATA	
itemBuyValueTitle  . . . . . . .	Byte	 000003FE _DATA	
itemCombatValueTitle . . . . . .	Byte	 0000040C _DATA	
itemName1  . . . . . . . . . . .	Byte	 00000000 _DATA	
itemName2  . . . . . . . . . . .	Byte	 00000007 _DATA	
itemName3  . . . . . . . . . . .	Byte	 0000000D _DATA	
itemName4  . . . . . . . . . . .	Byte	 00000015 _DATA	
itemNameTitle  . . . . . . . . .	Byte	 000003E1 _DATA	
itemSellValueTitle . . . . . . .	Byte	 000003EF _DATA	
itemType . . . . . . . . . . . .	Byte	 0000041C _DATA	
levelTitle . . . . . . . . . . .	Byte	 000000B8 _DATA	
levelUpTitle . . . . . . . . . .	Byte	 000005D4 _DATA	
leveledUpResponse  . . . . . . .	Byte	 00000255 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mainMenuTitle  . . . . . . . . .	Byte	 0000059E _DATA	
mindTitle  . . . . . . . . . . .	Byte	 00000100 _DATA	
nameTitle  . . . . . . . . . . .	Byte	 000000AF _DATA	
notEnoughGoldTitle . . . . . . .	Byte	 0000058C _DATA	
notEnoughResponse  . . . . . . .	Byte	 0000023D _DATA	
playerDefeatedEvent  . . . . . .	Byte	 00000210 _DATA	
playerDefeated . . . . . . . . .	Byte	 0000019D _DATA	
primaryAttributesTitle . . . . .	Byte	 000000D3 _DATA	
quitTitle  . . . . . . . . . . .	Byte	 000005AA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
s10  . . . . . . . . . . . . . .	item	 0000043D _DATA	
s1 . . . . . . . . . . . . . . .	item	 00000539 _DATA	
s2 . . . . . . . . . . . . . . .	item	 0000051D _DATA	
s3 . . . . . . . . . . . . . . .	item	 00000501 _DATA	
s4 . . . . . . . . . . . . . . .	item	 000004E5 _DATA	
s5 . . . . . . . . . . . . . . .	item	 000004C9 _DATA	
s6 . . . . . . . . . . . . . . .	item	 000004AD _DATA	
s7 . . . . . . . . . . . . . . .	item	 00000491 _DATA	
s8 . . . . . . . . . . . . . . .	item	 00000475 _DATA	
s9 . . . . . . . . . . . . . . .	item	 00000459 _DATA	
selectItemTitle  . . . . . . . .	Byte	 000003A3 _DATA	
sellModeTitle  . . . . . . . . .	Byte	 00000560 _DATA	
sellTitle  . . . . . . . . . . .	Byte	 00000582 _DATA	
shopMenuTitle  . . . . . . . . .	Byte	 00000555 _DATA	
shopTitle  . . . . . . . . . . .	Byte	 000005FA _DATA	
t1 . . . . . . . . . . . . . . .	item	 0000037F _DATA	
tempString . . . . . . . . . . .	Byte	 0000039B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPosTitle  . . . . . . . . . . .	Byte	 0000009D _DATA	
yPosTitle  . . . . . . . . . . .	Byte	 000000A6 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
