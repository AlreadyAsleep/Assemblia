Microsoft (R) Macro Assembler Version 14.13.26129.0	    04/02/18 16:30:48
main.asm						     Page 1 - 1


				;// Main.asm - The file that contains the main game loop and launcher
				;// Authors: Thomas and Ben
				;// Since: 3/16/18

				.386
				.model stdcall, flat
				.stack 4096
				include irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				include characterHeader.inc
			      C ;// structure of character object
 00000058		      C character struct 
			      C 
 00000000  00000000	      C xPos           DWORD 0
 00000004  00000000	      C yPos           DWORD 0
 00000008  00000010 [	      C characterName  db    16 dup (?)
	    00
	   ]
 2800000B  00000000	      C level          DWORD 0
 2800000F  00000000	      C exp            DWORD 0
 28000013  00000000	      C expToNext      DWORD 0
			      C 
 28000017  00000001	      C brawn          DWORD 1 ;//Primary Attributes
 2800001B  00000001	      C agility        DWORD 1
 2800001F  00000001	      C mind           DWORD 1
 28000023  00000001	      C fortune        DWORD 1
			      C 
 28000027  00000000	      C hpMax          DWORD 0
 2800002B  00000000	      C hp             DWORD 0
 2800002F  00000000	      C damageMin      DWORD 0
 28000033  00000000	      C damageMax      DWORD 0
			      C 
 28000037  00000000	      C weaponCode      DWORD 0
 2800003B  00000000	      C weaponBuyValue  DWORD 0
 2800003F  00000000	      C weaponSellValue DWORD 0
 28000043  00000000	      C weaponDamage    DWORD 0
			      C 
			      C 
 28000047  00000000	      C defence        DWORD 0
			      C 
			      C character ends
			      C 
				include enemyHeader.inc
			      C ;// structure of enemy object
 00000020		      C enemy struct 
			      C 
 00000000  00000008 [	      C enemyName  db    8 dup (?)
	    00
	   ]
			      C 
 07230003  00000000	      C hpMax          DWORD 0
 07230007  00000000	      C hp             DWORD 0
 0723000B  00000000	      C damageMin      DWORD 0
 0723000F  00000000	      C damageMax      DWORD 0
 07230013  00000000	      C defence        DWORD 0
 07230017  00000000	      C expReward      DWORD 0
			      C 
			      C enemy ends
			      C 
				include itemHeader.inc
			      C ;// structure of item object
			      C 
 0000001C		      C item struc
			      C 
 00000000  00000000	      C itemCode  DWORD NULL
 00000004  00000000	      C buyValue  DWORD ?
 00000008  00000000	      C sellValue DWORD ?
 0000000C  00000000	      C prev      DWORD NULL
 00000010  00000000	      C next      DWORD NULL
			      C 
 00000014  00000000	      C combatValue DWORD NULL ;// attack for weapons defense for armor
 00000018  00000000	      C itemType  DWORD NULL
			      C 
			      C item ends
			      C 

 00000000			.data
				include getItemName.inc
			      C ;// gets items name based off code and prints it
 00000000 72 6F 70 65 00      C itemName1 byte "rope" , 0 , 10, 0
	   0A 00
 00000007 67 75 6E 00 0A      C itemName2 byte "gun"  , 0 , 10, 0
	   00
 0000000D 73 77 6F 72 64      C itemName3 byte "sword", 0 , 10, 0
	   00 0A 00
 00000015 61 78 65 00 0A      C itemName4 byte "axe"  , 0 , 10, 0
	   00
			      C 
 0000001B 45 6D 70 74 79      C defaultName   byte "Empty Slot", 0 , 10, 0
	   20 53 6C 6F 74
	   00 0A 00
			      C 
			      C mGetItemName MACRO
			      C Local L
			      C 
			      C 
			      C ;//item code stored in eax
			      C 
			      C cmp eax,1
			      C je item0&L
			      C cmp eax,2
			      C je item1&L
			      C cmp eax,3
			      C je item2&L
			      C cmp eax,4
			      C je item3&L
			      C 
			      C jmp default&L
			      C 
			      C 
			      C 
			      C item0&L:
			      C 	mov edx, offset itemName1
			      C 
			      C 	jmp print&L
			      C item1&L:
			      C 	mov edx, offset itemName2
			      C 
			      C 	jmp print&L
			      C item2&L:
			      C 	mov edx, offset itemName3
			      C 	
			      C 	jmp print&L
			      C item3&L:
			      C 	mov edx, offset itemName4
			      C 	
			      C 	jmp print&L
			      C 
			      C default&L:
			      C 	mov edx, offset defaultName
			      C 
			      C print&L:
			      C 	invoke WriteString
			      C 
			      C 
			      C endm
			      C 
				include input_data.inc
 00000028 00000000	      C input_state dword ?
			      C 
				include get_input.inc
			      C _get_input macro
			      C 
			      C 	Local L
			      C 	call ReadDec
			      C 
			      C 	mov ecx, eax
			      C 
			      C 
			      C endm
			      C 

				include character.inc
			      C 
 0000002C 00000000	      C C1 character {0,0,"Name",1,0,100,4,4,4,4,5,5,1,3,}
	   00000000 4E 61
	   6D 65
	   0000000C [
	    00
	   ] 00000001
	   00000000
	   00000064
	   00000004
	   00000004
	   00000004
	   00000004
	   00000005
	   00000005
	   00000001
	   00000003
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
			      C 
 00000084 2D 2D 43 68 61      C characterSheetTitle byte "--CharacterSheet--"       , 13, 10, 0
	   72 61 63 74 65
	   72 53 68 65 65
	   74 2D 2D 0D 0A
	   00
 00000099 78 50 6F 73 3A      C xPosTitle           byte "xPos: "                   , 0 , 10, 0
	   20 00 0A 00
 000000A2 79 50 6F 73 3A      C yPosTitle           byte "yPos: "                   , 0 , 10, 0
	   20 00 0A 00
 000000AB 4E 61 6D 65 3A      C nameTitle           byte "Name: "                   , 0 , 10, 0
	   20 00 0A 00
 000000B4 4C 65 76 65 6C      C levelTitle          byte "Level:"                   , 0 , 10, 0
	   3A 00 0A 00
 000000BD 45 78 70 3A 00      C expTitle            byte "Exp:"                     , 0 , 10, 0
	   0A 00
			      C 
			      C 
 000000C4 2D 2D 50 72 69      C primaryAttributesTitle byte "--Primary Attributes--", 13, 10, 0
	   6D 61 72 79 20
	   41 74 74 72 69
	   62 75 74 65 73
	   2D 2D 0D 0A 00
 000000DD 42 72 61 77 6E      C brawnTitle          byte "Brawn:"                   , 0 , 10, 0
	   3A 00 0A 00
 000000E6 41 67 69 6C 69      C agilityTitle        byte "Agility:"                 , 0 , 10, 0
	   74 79 3A 00 0A
	   00
 000000F1 4D 69 6E 64 3A      C mindTitle           byte "Mind:"                    , 0 , 10, 0
	   00 0A 00
 000000F9 46 6F 72 74 75      C fortuneTitle        byte "Fortune:"                 , 0 , 10, 0
	   6E 65 3A 00 0A
	   00
			      C 
 00000104 2D 2D 43 6F 6D      C combatAttributesTitle byte "--Combat Attributes--"  , 13, 10, 0
	   62 61 74 20 41
	   74 74 72 69 62
	   75 74 65 73 2D
	   2D 0D 0A 00
 0000011C 48 50 3A 00 0A      C hpTitle             byte "HP:"                      , 0 , 10, 0
	   00
 00000122 44 61 6D 61 67      C damageTitle         byte "Damage:"                  , 0 , 10, 0
	   65 3A 00 0A 00
 0000012C 44 65 66 65 6E      C defenceTitle        byte "Defence:"                 , 0 , 10, 0
	   63 65 3A 00 0A
	   00
 00000137 57 65 61 70 6F      C equippedWeaponTitle byte "Weapon:"                  , 0 , 10, 0
	   6E 3A 00 0A 00
			      C 
 00000141 45 6E 74 65 72      C command1 byte "Enter character name. Up to 15 Characters"  , 13, 10, 0
	   20 63 68 61 72
	   61 63 74 65 72
	   20 6E 61 6D 65
	   2E 20 55 70 20
	   74 6F 20 31 35
	   20 43 68 61 72
	   61 63 74 65 72
	   73 0D 0A 00
			      C 
			      C mPrintCharacterSheet MACRO ;//prints character sheet 
			      C pushAD
			      C 
			      C mov edx, offset characterSheetTitle ;//prints a header
			      C invoke WriteString
			      C 
			      C mov edx, offset xPosTitle ;// prints x position
			      C invoke WriteString
			      C mov eax, c1.xPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset yPosTitle ;// prints y position
			      C invoke WriteString
			      C mov eax, c1.yPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset nameTitle ;// prints character name
			      C invoke WriteString
			      C mov edx, offset c1.CharacterName
			      C Call WriteString
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset levelTitle ;//prints character level
			      C invoke WriteString
			      C mov eax, c1.level
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset expTitle ;//prints character exp
			      C invoke WriteString
			      C mov eax, c1.exp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.expToNext
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset primaryAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset brawnTitle ;//prints character brawn
			      C invoke WriteString
			      C mov eax, c1.brawn
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset agilityTitle ;//prints character agility
			      C invoke WriteString
			      C mov eax, c1.agility
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset mindTitle ;//prints character mind
			      C invoke WriteString
			      C mov eax, c1.mind
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset fortuneTitle ;//prints character fortune
			      C invoke WriteString
			      C mov eax, c1.fortune
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset hpTitle ;//prints character hp
			      C invoke WriteString
			      C mov eax, c1.hp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.hpMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset damageTitle ;//prints character damage
			      C invoke WriteString
			      C mov eax, c1.damageMin
			      C call WriteDec
			      C mov eax,'-'
			      C call WriteChar
			      C mov eax, c1.damageMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset defenceTitle ;//prints character defence
			      C invoke WriteString
			      C mov eax, c1.defence
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset equippedWeaponTitle
			      C invoke WriteString
			      C mov eax, c1.weaponCode
			      C mGetItemName
			      C 
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset continueCommand
			      C invoke WriteString
			      C _get_input
			      C call clrscr
			      C 
			      C popAD
			      C endm
			      C 
			      C ;//gets character name
			      C mGetCharacterName MACRO
			      C pushAD
			      C 
			      C mov edx, offset command1 ;//Player inputs character name
			      C invoke WriteString
			      C mov edx, offset c1.characterName
			      C mov ecx, SIZEOF c1.characterName
			      C call ReadString
			      C 
			      C call clrscr
			      C 
			      C popAD
			      C endm
			      C 
			      C ;//initializes character
			      C mInitializeCharacter MACRO ;//prints character sheet
			      C pushAD
			      C 
			      C 
			      C 
			      C inc c1.brawn   ;// sets primary attributes
			      C inc c1.agility
			      C inc c1.mind   
			      C inc c1.fortune
			      C 
			      C mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
			      C sal eax,1 ;// multiply by 2
			      C mov c1.hpMax,eax
			      C mov c1.hp,eax
			      C 
			      C mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
			      C sar eax,1;//divide by 2
			      C add eax,c1.weaponDamage
			      C mov c1.damageMin,eax
			      C mov ebx,c1.agility
			      C sar ebx,2;//divide by 4
			      C add eax,ebx
			      C mov c1.damageMax,eax
			      C 
			      C popAD
			      C endm
			      C 
			      C 
			      C 
				include enemy.inc
 0000016D 42 6F 67 6C 69      C e1 enemy{"Boglin",1,1,1,1,1,1}
	   6E
	   00000002 [
	    00
	   ] 00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
			      C 
			      C ;//initialize emeny
			      C mInitializeEnemy MACRO
			      C pushAD
			      C 
			      C mov ebx, c1.level ;//initialize enemy hp
			      C mov eax,3
			      C call RandomRange
			      C inc eax
			      C mul ebx
			      C mov e1.hpMax,eax
			      C mov e1.hp,eax
			      C 
			      C mov eax, 2 ;//initialize enemy damage
			      C call RandomRange
			      C inc eax
			      C add eax,ebx
			      C mov e1.damageMin,eax
			      C mov ecx,eax
			      C mov eax,2
			      C call RandomRange
			      C inc eax
			      C add eax,ecx
			      C mov e1.damageMax,eax
			      C 
			      C mov eax,e1.hpMax ;//initialize expReward
			      C mov ebx,10
			      C mul ebx
			      C mov e1.expReward ,eax
			      C 
			      C popAD
			      C endm
			      C 
				include combat.inc
 0000018D 00		      C escape         byte 0
 0000018E 00		      C playerDefeated byte 0
 0000018F 00		      C enemyDefeated  byte 0
			      C 
 00000190 2D 2D 43 4F 4D      C combatMenuTitle  byte "--COMBAT--"   , 13, 10, 0
	   42 41 54 2D 2D
	   0D 0A 00
 0000019D 45 6E 65 6D 79      C enemyNameTitle   byte "Enemy Name:"  , 0 , 10, 0
	   20 4E 61 6D 65
	   3A 00 0A 00
 000001AB 45 6E 65 6D 79      C enemyHPTitle     byte "Enemy HP:"    , 0 , 10, 0
	   20 48 50 3A 00
	   0A 00
 000001B7 45 6E 65 6D 79      C enemyDamageTitle byte "Enemy Damage:", 0 , 10, 0
	   20 44 61 6D 61
	   67 65 3A 00 0A
	   00
			      C 
			      C 
 000001C7 2D 2D 43 6F 6D      C combatOptionsMenuTitle byte "--Combat Options--", 13, 10, 0
	   62 61 74 20 4F
	   70 74 69 6F 6E
	   73 2D 2D 0D 0A
	   00
 000001DC 30 3A 20 41 74      C attackTitle            byte "0: Attack"         , 13, 10, 0
	   74 61 63 6B 0D
	   0A 00
 000001E8 31 3A 20 46 6C      C fleeTitle              byte "1: Flee"           , 13, 10, 0
	   65 65 0D 0A 00
			      C 
 000001F2 59 6F 75 20 45      C escapeEvent          byte "You Escaped!"          , 13, 10, 0
	   73 63 61 70 65
	   64 21 0D 0A 00
 00000201 59 6F 75 20 77      C playerDefeatedEvent  byte "You were defeated"     , 13, 10, 0
	   65 72 65 20 64
	   65 66 65 61 74
	   65 64 0D 0A 00
 00000215 59 6F 75 20 44      C enemyDefeatedEvent   byte "You Defeated the Enemy", 13, 10, 0
	   65 66 65 61 74
	   65 64 20 74 68
	   65 20 45 6E 65
	   6D 79 0D 0A 00
			      C 
			      C mCombat MACRO
			      C Local L
			      C pushAD
			      C 
			      C mInitializeEnemy
			      C 
			      C mov eax,c1.hpMax
			      C mov c1.hp,eax
			      C 
			      C mov escape        ,0 ;//combat end conditions
			      C mov playerDefeated,0
			      C mov enemyDefeated ,0
			      C 
			      C WHILE_COMBAT&L:    ;//disgusting triple & while statement
			      C cmp escape,0       ;//while &
			      C je AND_COMBAT1&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT1&L: cmp playerDefeated,0
			      C je AND_COMBAT2&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT2&L: cmp enemyDefeated,0
			      C je AND_COMBAT_TRUE&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT_TRUE&L:
			      C 	
			      C 	mov edx, offset combatMenuTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyNameTitle ;//prints enemy name
			      C 	invoke WriteString
			      C 	mov edx, offset e1.enemyName
			      C 	invoke WriteString
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyHpTitle ;//prints enemy hp
			      C 	invoke WriteString
			      C 	mov eax, e1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, e1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyDamageTitle ;//prints enemy damage
			      C 	invoke WriteString
			      C 	mov eax, e1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, e1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C 	mov edx, offset hpTitle ;//prints character hp
			      C 	invoke WriteString
			      C 	mov eax, c1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, c1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset damageTitle ;//prints character damage
			      C 	invoke WriteString
			      C 	mov eax, c1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, c1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatOptionsMenuTitle ;//prints combat Options
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset attackTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset fleeTitle
			      C 	invoke WriteString
			      C 
			      C 	_get_input
			      C 	
			      C 	call Clrscr
			      C 
			      C 	
			      C 		cmp ecx, 0 ;//switch
			      C 		je attack
			      C 		cmp ecx, 1
			      C 		je flee
			      C 	
			      C 		jmp end_switch&L
			      C 
			      C 		attack:
			      C 			mov eax,c1.damageMax;//player attacks
			      C 			mov ebx,c1.damageMin
			      C 			sub eax,ebx
			      C 			inc eax
			      C 			call RandomRange
			      C 			add eax,ebx
			      C 			sub e1.hp,eax
			      C 
			      C 			cmp e1.hp,0 ;//check to see if enemy died
			      C 			jle enemy_dead
			      C 			jmp end_switch&L
			      C 			enemy_dead:
			      C 				mov enemyDefeated,1
			      C 				jmp AND_FALSE_COMBAT&L
			      C 		flee:
			      C 			mov escape,1
			      C 			
			      C 		end_switch&L:
			      C 
			      C 			mov eax,e1.damageMax;//enemy attacks
			      C 			mov ebx,e1.damageMin
			      C 			sub eax,ebx
			      C 			inc eax
			      C 			call RandomRange
			      C 			add eax,ebx
			      C 			sub c1.hp,eax
			      C 
			      C 			cmp c1.hp,0    ;// checking to see if character died
			      C 			jle character_dead
			      C 			jmp character_not_dead
			      C 			character_dead:
			      C 				mov playerDefeated,1
			      C 			character_not_dead:
			      C 
			      C 		jmp WHILE_COMBAT&L;//default
			      C 
			      C AND_FALSE_COMBAT&L:
			      C 
			      C cmp escape,0
			      C je not_escape
			      C 
			      C mov edx, offset escapeEvent;//will print if player fleed
			      C invoke WriteString
			      C jmp eventDetermined
			      C 
			      C not_escape:
			      C cmp playerDefeated,0
			      C je not_playerDefeated
			      C 
			      C mov edx, offset playerDefeatedEvent;//will print if player was defeated
			      C invoke WriteString
			      C jmp eventDetermined
			      C 
			      C not_playerDefeated:
			      C 
			      C mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
			      C invoke WriteString
			      C mov eax, offset t1
			      C mAddItem
			      C 
			      C mov eax,e1.expReward ;//rewarding player exp
			      C add c1.exp,eax
			      C 
			      C eventDetermined:
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C 
			      C 
			      C call Clrscr
			      C 
			      C popAD
			      C endm
			      C 
				include levelUp.inc
			      C ;//level up class
 0000022E 4E 6F 74 20 65      C notEnoughResponse byte "Not enough experience", 13, 10, 0
	   6E 6F 75 67 68
	   20 65 78 70 65
	   72 69 65 6E 63
	   65 0D 0A 00
			      C 
			      C 
			      C mLevelUp MACRO
			      C pushAD
			      C 
			      C mov eax,c1.exp
			      C mov ebx,c1.expToNext
			      C cmp eax,ebx
			      C jl notEnough
			      C 
			      C inc c1.level
			      C mInitializeCharacter
			      C 
			      C mov eax,c1.exp
			      C mov ebx,c1.expToNext
			      C sub eax,ebx
			      C mov c1.exp,eax
			      C jmp leveledUp
			      C 
			      C notEnough:
			      C 
			      C mov edx,offset notEnoughResponse
			      C invoke WriteString
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C call Clrscr
			      C 
			      C leveledUp:
			      C popAD
			      C endm
			      C 
				include inventory.inc
			      C ;//inventory using linked list
			      C ;//linked list of 10 items 
			      C 
 00000246 00000000	      C i10 item {0,0,0,i9,null}
	   00000000
	   00000000
	   00000262 R
	   00000000
	   00000000
	   00000000
 00000262 00000000	      C i9 item {0,0,0,i8,i10}
	   00000000
	   00000000
	   0000027E R
	   00000246 R
	   00000000
	   00000000
 0000027E 00000000	      C i8 item {0,0,0,i7,i9}
	   00000000
	   00000000
	   0000029A R
	   00000262 R
	   00000000
	   00000000
 0000029A 00000000	      C i7 item {0,0,0,i6,i8}
	   00000000
	   00000000
	   000002B6 R
	   0000027E R
	   00000000
	   00000000
 000002B6 00000000	      C i6 item {0,0,0,i5,i7}
	   00000000
	   00000000
	   000002D2 R
	   0000029A R
	   00000000
	   00000000
 000002D2 00000000	      C i5 item {0,0,0,i4,i6}
	   00000000
	   00000000
	   000002EE R
	   000002B6 R
	   00000000
	   00000000
 000002EE 00000000	      C i4 item {0,0,0,i3,i5}
	   00000000
	   00000000
	   0000030A R
	   000002D2 R
	   00000000
	   00000000
 0000030A 00000001	      C i3 item {1,1,2,i2,i4,5,"W"}
	   00000001
	   00000002
	   00000326 R
	   000002EE R
	   00000005
	   00000057
 00000326 00000002	      C i2 item {2,1,2,i1,i3,10,"W"}
	   00000001
	   00000002
	   00000342 R
	   0000030A R
	   0000000A
	   00000057
 00000342 00000003	      C i1 item {3,1,2,null,i2,3,"A"}
	   00000001
	   00000002
	   00000000
	   00000326 R
	   00000003
	   00000041
			      C 
 0000035E 00000004	      C t1 item {4,1,2,NULL,NULL}
	   00000001
	   00000002
	   00000000
	   00000000
	   00000000
	   00000000
			      C 
 0000037A  00000008 [	      C tempString  db    8 dup (?)
	    00
	   ]
			      C 
 00000382 2D 2D 53 65 6C      C selectItemTitle byte "--Select an Item--", 13, 10, 0
	   65 63 74 20 61
	   6E 20 49 74 65
	   6D 2D 2D 0D 0A
	   00
			      C 
 00000397 30 20 45 78 69      C exitTitle    byte "0 Exit: "      , 13, 10, 0
	   74 3A 20 0D 0A
	   00
 000003A2 31 20 44 69 73      C discardTitle byte "1 Discard: "   , 13, 10, 0
	   63 61 72 64 3A
	   20 0D 0A 00
 000003B0 32 20 45 71 75      C equipTitle   byte "2 Equip: "     , 13, 10, 0
	   69 70 3A 20 0D
	   0A 00
 000003BC 33 20 49 74 65      C infoTitle    byte "3 Item Info "  , 13, 10, 0
	   6D 20 49 6E 66
	   6F 20 0D 0A 00
			      C 
 000003CB 49 74 65 6D 20      C itemNameTitle        byte "Item Name: "      , 0, 10, 0
	   4E 61 6D 65 3A
	   20 00 0A 00
 000003D9 53 65 6C 6C 20      C itemSellValueTitle   byte "Sell Value: "     , 0, 10, 0
	   56 61 6C 75 65
	   3A 20 00 0A 00
 000003E8 42 75 79 20 56      C itemBuyValueTitle    byte "Buy Value: "      , 0, 10, 0
	   61 6C 75 65 3A
	   20 00 0A 00
 000003F6 43 6F 6D 62 61      C itemCombatValueTitle byte "Combat Value:"    , 0, 10, 0
	   74 20 56 61 6C
	   75 65 3A 00 0A
	   00
 00000406 49 74 65 6D 20      C itemType             byte "Item Type:   "    , 0, 10, 0
	   54 79 70 65 3A
	   20 20 20 00 0A
	   00
			      C 
			      C ;//displays inventory
			      C mDisplayInventory MACRO
			      C Local L
			      C pushAD
			      C 
			      C xor ecx,ecx
			      C mov eBx, offset i1
			      C DO1&L:
			      C 
			      C mov eax,ecx
			      C call WriteDec
			      C mov eax, ':'
			      C call WriteChar
			      C mov eax, [ebx].item.itemCode
			      C mGetItemName
			      C mov edx,offset blank
			      C call WriteString
			      C 
			      C mov eBx,[ebx].item.next
			      C 
			      C inc ecx
			      C cmp ebx,null
			      C jne DO1&L
			      C 
			      C popAD
			      C endm
			      C 
			      C mInventory MACRO
			      C 
			      C mov edx, offset selectItemTitle
			      C call WriteString
			      C 
			      C mDisplayInventory
			      C _get_input
			      C 
			      C cmp ecx,0
			      C 	je item0
			      C cmp ecx,1
			      C 	je item1
			      C cmp ecx,2
			      C 	je item2
			      C cmp ecx,3
			      C 	je item3
			      C cmp ecx,4
			      C 	je item4
			      C cmp ecx,5
			      C 	je item5
			      C cmp ecx,6
			      C 	je item6
			      C cmp ecx,7
			      C 	je item7
			      C cmp ecx,8
			      C 	je item8
			      C cmp ecx,9
			      C 	je item9
			      C 
			      C item0:
			      C 	mov ebx,offset i1 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item1:
			      C 	mov ebx,offset i2 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item2:
			      C 	mov ebx,offset i3 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item3:
			      C 	mov ebx,offset i4 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item4:
			      C 	mov ebx,offset i5 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item5:
			      C 	mov ebx,offset i6 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item6:
			      C 	mov ebx,offset i7 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item7:
			      C 	mov ebx,offset i8 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item8:
			      C 	mov ebx,offset i9 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item9:
			      C 	mov ebx,offset i10 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C 
			      C endInventory:
			      C 
			      C call clrscr
			      C endm
			      C 
			      C mitemOptions MACRO
			      C local L
			      C 
			      C mov edx, offset exitTitle
			      C call WriteString
			      C mov edx, offset discardTitle
			      C call WriteString
			      C mov edx, offset equipTitle
			      C call WriteString
			      C mov edx, offset infoTitle
			      C call WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx,0
			      C je exit&L
			      C cmp ecx,1
			      C je removeItem&L
			      C cmp ecx,2
			      C je equipItem&L
			      C cmp ecx,3
			      C je infoItem&L
			      C jmp endCase&L
			      C 
			      C exit&L:
			      C 	jmp endCase&L
			      C removeItem&L:
			      C 	mRemoveItem
			      C 	jmp endCase&L
			      C equipItem&L:
			      C 	mEquip
			      C 	jmp endCase&L
			      C infoItem&L:
			      C 	call clrscr
			      C 	mDisplayItemInfo
			      C 	mov eax,2000
			      C 	call Delay
			      C 
			      C endCase&L:
			      C 
			      C endm
			      C 
			      C ;//remove an item from inventory
			      C mRemoveItem MACRO
			      C 
			      C ;//ebx is item being removed
			      C 
			      C mov [ebx].item.itemCode,null
			      C mov [ebx].item.sellValue,0
			      C mov [ebx].item.buyValue,0
			      C 
			      C endm;//mRemoveItem
			      C 
			      C ;//equips item
			      C mEquip MACRO
			      C 
			      C ;//ebx is item being equipped
			      C 
			      C mov edx, [ebx].item.itemCode
			      C mov c1.weaponCode, edx
			      C mov edx, [ebx].item.combatValue
			      C mov c1.weaponDamage, edx
			      C mov edx, [ebx].item.buyValue
			      C mov c1.weaponBuyValue,edx
			      C mov edx,[ebx].item.sellValue
			      C mov c1.weaponsellValue,edx
			      C mRemoveItem
			      C mInitializeCharacter
			      C 
			      C endm;//mEquip
			      C 
			      C ;//displays item Info
			      C mDisplayItemInfo MACRO
			      C ;ebx is item Info
			      C 
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemBuyValueTitle ;displays buy value
			      C call WriteString
			      C mov eax, [ebx].item.buyValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemSellValueTitle ;displays sell value 
			      C call WriteString
			      C mov eax, [ebx].item.SellValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemCombatValueTitle ;displays combat value
			      C call WriteString
			      C mov eax, [ebx].item.combatValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C endm
			      C 
			      C mDequip MACRO
			      C Local L
			      C 
			      C cmp c1.weaponCode,0
			      C je nothingEquipped&L
			      C 
			      C mov ebx, offset i1
			      C 
			      C notEmpty&L:
			      C cmp [ebx].item.itemCode,0
			      C je isEmpty&L 
			      C cmp [ebx].item.next,null
			      C je inventoryFull&L
			      C mov ebx,[ebx].item.next
			      C jmp notEmpty&L
			      C 
			      C isEmpty&L:
			      C 
			      C mov eax, c1.weaponCode
			      C mov [ebx].item.itemCode,eax
			      C mov c1.weaponCode,0
			      C 
			      C mov eax, c1.weaponBuyValue
			      C mov [ebx].item.buyValue,eax
			      C mov c1.weaponBuyValue,0
			      C 
			      C mov eax, c1.weaponSellValue
			      C mov [ebx].item.sellValue,eax
			      C mov c1.weaponSellValue,0
			      C 
			      C mov eax, c1.weaponDamage
			      C mov [ebx].item.combatValue,eax
			      C mov c1.weaponDamage,0
			      C mInitializeCharacter
			      C 
			      C inventoryFull&L:
			      C nothingEquipped&L:
			      C 
			      C endm
			      C 
			      C mAddItem MACRO
			      C Local L
			      C ;//item is in eax
			      C 
			      C mov ebx, offset i1
			      C 
			      C notEmpty&L:
			      C cmp [ebx].item.itemCode,0
			      C je isEmpty&L 
			      C cmp [ebx].item.next,null
			      C je inventoryFull&L
			      C mov ebx,[ebx].item.next
			      C jmp notEmpty&L
			      C 
			      C isEmpty&L:
			      C 
			      C mov ecx, [eax].item.itemCode
			      C mov [ebx].item.itemCode,ecx
			      C 
			      C inventoryFull&L:
			      C 
			      C endm
			      C 
			      C 

				WriteDec proto
				ReadDec proto
				ExitProcess proto, dwExitCode:dword

 00000416 4D 61 69 6E 20	mainMenuTitle    byte "Main Menu"        , 13, 10, 0
	   4D 65 6E 75 0D
	   0A 00
 00000422 30 20 51 75 69	quitTitle        byte "0 Quit"           , 13, 10, 0
	   74 0D 0A 00
 0000042B 31 20 43 68 61	characterSheet   byte "1 Character Sheet", 13, 10, 0
	   72 61 63 74 65
	   72 20 53 68 65
	   65 74 0D 0A 00
 0000043F 32 20 43 6F 6D	combatTitle      byte "2 Combat"         , 13, 10, 0
	   62 61 74 0D 0A
	   00
 0000044A 33 20 4C 65 76	levelUpTitle     byte "3 Level Up"       , 13, 10, 0
	   65 6C 20 55 70
	   0D 0A 00
 00000457 34 20 49 6E 76	inventoryTitle   byte "4 Inventory"      , 13, 10, 0
	   65 6E 74 6F 72
	   79 0D 0A 00
 00000465 35 20 44 65 71	dequipTitle      byte "5 Dequip"         , 13, 10, 0
	   75 69 70 0D 0A
	   00

 00000470 50 72 65 73 73	continueCommand byte "Press Enter to Continue",13, 10, 0
	   20 45 6E 74 65
	   72 20 74 6F 20
	   43 6F 6E 74 69
	   6E 75 65 0D 0A
	   00



 0000048A 20 0D 0A 00		blank byte " ", 13, 10, 0




 00000000			.code

 00000000			main proc

				mGetCharacterName
 00000000  60		     1	pushAD
 00000001  BA 00000141 R     1	mov edx, offset command1 ;//Player inputs character name
 00000006  E8 00000000 E   *	    call   WriteString
 0000000B  BA 00000034 R     1	mov edx, offset c1.characterName
 00000010  B9 00000010	     1	mov ecx, SIZEOF c1.characterName
 00000015  E8 00000000 E     1	call ReadString
 0000001A  E8 00000000 E     1	call clrscr
 0000001F  61		     1	popAD
				mInitializeCharacter
 00000020  60		     1	pushAD
 00000021  FF 05 00000050 R  1	inc c1.brawn   ;// sets primary attributes
 00000027  FF 05 00000054 R  1	inc c1.agility
 0000002D  FF 05 00000058 R  1	inc c1.mind   
 00000033  FF 05 0000005C R  1	inc c1.fortune
 00000039  A1 00000050 R     1	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 0000003E  D1 E0	     1	sal eax,1 ;// multiply by 2
 00000040  A3 00000060 R     1	mov c1.hpMax,eax
 00000045  A3 00000064 R     1	mov c1.hp,eax
 0000004A  A1 00000050 R     1	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000004F  D1 F8	     1	sar eax,1;//divide by 2
 00000051  03 05 0000007C R  1	add eax,c1.weaponDamage
 00000057  A3 00000068 R     1	mov c1.damageMin,eax
 0000005C  8B 1D 00000054 R  1	mov ebx,c1.agility
 00000062  C1 FB 02	     1	sar ebx,2;//divide by 4
 00000065  03 C3	     1	add eax,ebx
 00000067  A3 0000006C R     1	mov c1.damageMax,eax
 0000006C  61		     1	popAD

 0000006D  B9 00000001		mov ecx, 1
 00000072			while_main:						;//while( ecx != 0 )

					
 00000072  BA 00000416 R		mov edx, offset mainMenuTitle ;//Main Menu Display Start
 00000077  E8 00000000 E		call WriteString
						; mov edx, offset quitTitle
						; call WriteString
 0000007C  BA 0000042B R			mov edx, offset characterSheet
 00000081  E8 00000000 E			call WriteString
 00000086  BA 0000043F R			mov edx, offset combatTitle
 0000008B  E8 00000000 E			call WriteString
 00000090  BA 0000044A R			mov edx, offset levelUpTitle
 00000095  E8 00000000 E			call WriteString
 0000009A  BA 00000457 R			mov edx, offset inventoryTitle
 0000009F  E8 00000000 E			call WriteString
 000000A4  BA 00000465 R			mov edx, offset dequipTitle
 000000A9  E8 00000000 E			call WriteString

						_get_input
 000000AE  E8 00000000 E     1		call ReadDec
 000000B3  8B C8	     1		mov ecx, eax

 000000B5  E8 00000000 E			call Clrscr

						; cmp ecx, 0;//switch
					; je endwhile_main
 000000BA  83 F9 01			cmp ecx, 1
 000000BD  74 29			je character_sheet
 000000BF  83 F9 02			cmp ecx, 2
 000000C2  0F 84 00000254		je combat
 000000C8  83 F9 03			cmp ecx, 3
 000000CB  0F 84 000004F5		je levelUp
 000000D1  83 F9 04			cmp ecx, 4
 000000D4  0F 84 00000582		je inventory
 000000DA  83 F9 05			cmp ecx, 5
 000000DD  0F 84 00001458		je dequip
 000000E3  E9 0000150F			jmp end_switch

 000000E8				character_sheet:
						mPrintCharacterSheet
 000000E8  60		     1	pushAD
 000000E9  BA 00000084 R     1	mov edx, offset characterSheetTitle ;//prints a header
 000000EE  E8 00000000 E   *	    call   WriteString
 000000F3  BA 00000099 R     1	mov edx, offset xPosTitle ;// prints x position
 000000F8  E8 00000000 E   *	    call   WriteString
 000000FD  A1 0000002C R     1	mov eax, c1.xPos
 00000102  E8 00000000 E     1	call WriteDec
 00000107  BA 0000048A R     1	mov edx, offset blank
 0000010C  E8 00000000 E   *	    call   WriteString
 00000111  BA 000000A2 R     1	mov edx, offset yPosTitle ;// prints y position
 00000116  E8 00000000 E   *	    call   WriteString
 0000011B  A1 00000030 R     1	mov eax, c1.yPos
 00000120  E8 00000000 E     1	call WriteDec
 00000125  BA 0000048A R     1	mov edx, offset blank
 0000012A  E8 00000000 E   *	    call   WriteString
 0000012F  BA 000000AB R     1	mov edx, offset nameTitle ;// prints character name
 00000134  E8 00000000 E   *	    call   WriteString
 00000139  BA 00000034 R     1	mov edx, offset c1.CharacterName
 0000013E  E8 00000000 E     1	Call WriteString
 00000143  BA 0000048A R     1	mov edx, offset blank
 00000148  E8 00000000 E   *	    call   WriteString
 0000014D  BA 000000B4 R     1	mov edx, offset levelTitle ;//prints character level
 00000152  E8 00000000 E   *	    call   WriteString
 00000157  A1 00000044 R     1	mov eax, c1.level
 0000015C  E8 00000000 E     1	call WriteDec
 00000161  BA 0000048A R     1	mov edx, offset blank
 00000166  E8 00000000 E   *	    call   WriteString
 0000016B  BA 000000BD R     1	mov edx, offset expTitle ;//prints character exp
 00000170  E8 00000000 E   *	    call   WriteString
 00000175  A1 00000048 R     1	mov eax, c1.exp
 0000017A  E8 00000000 E     1	call WriteDec
 0000017F  B8 0000002F	     1	mov eax,'/'
 00000184  E8 00000000 E     1	call WriteChar
 00000189  A1 0000004C R     1	mov eax, c1.expToNext
 0000018E  E8 00000000 E     1	call WriteDec
 00000193  BA 0000048A R     1	mov edx, offset blank
 00000198  E8 00000000 E   *	    call   WriteString
 0000019D  BA 000000C4 R     1	mov edx, offset primaryAttributesTitle ;//prints primary attributes header
 000001A2  E8 00000000 E   *	    call   WriteString
 000001A7  BA 000000DD R     1	mov edx, offset brawnTitle ;//prints character brawn
 000001AC  E8 00000000 E   *	    call   WriteString
 000001B1  A1 00000050 R     1	mov eax, c1.brawn
 000001B6  E8 00000000 E     1	call WriteDec
 000001BB  BA 0000048A R     1	mov edx, offset blank
 000001C0  E8 00000000 E   *	    call   WriteString
 000001C5  BA 000000E6 R     1	mov edx, offset agilityTitle ;//prints character agility
 000001CA  E8 00000000 E   *	    call   WriteString
 000001CF  A1 00000054 R     1	mov eax, c1.agility
 000001D4  E8 00000000 E     1	call WriteDec
 000001D9  BA 0000048A R     1	mov edx, offset blank
 000001DE  E8 00000000 E   *	    call   WriteString
 000001E3  BA 000000F1 R     1	mov edx, offset mindTitle ;//prints character mind
 000001E8  E8 00000000 E   *	    call   WriteString
 000001ED  A1 00000058 R     1	mov eax, c1.mind
 000001F2  E8 00000000 E     1	call WriteDec
 000001F7  BA 0000048A R     1	mov edx, offset blank
 000001FC  E8 00000000 E   *	    call   WriteString
 00000201  BA 000000F9 R     1	mov edx, offset fortuneTitle ;//prints character fortune
 00000206  E8 00000000 E   *	    call   WriteString
 0000020B  A1 0000005C R     1	mov eax, c1.fortune
 00000210  E8 00000000 E     1	call WriteDec
 00000215  BA 0000048A R     1	mov edx, offset blank
 0000021A  E8 00000000 E   *	    call   WriteString
 0000021F  BA 00000104 R     1	mov edx, offset combatAttributesTitle ;//prints primary attributes header
 00000224  E8 00000000 E   *	    call   WriteString
 00000229  BA 0000011C R     1	mov edx, offset hpTitle ;//prints character hp
 0000022E  E8 00000000 E   *	    call   WriteString
 00000233  A1 00000064 R     1	mov eax, c1.hp
 00000238  E8 00000000 E     1	call WriteDec
 0000023D  B8 0000002F	     1	mov eax,'/'
 00000242  E8 00000000 E     1	call WriteChar
 00000247  A1 00000060 R     1	mov eax, c1.hpMax
 0000024C  E8 00000000 E     1	call WriteDec
 00000251  BA 0000048A R     1	mov edx, offset blank
 00000256  E8 00000000 E   *	    call   WriteString
 0000025B  BA 00000122 R     1	mov edx, offset damageTitle ;//prints character damage
 00000260  E8 00000000 E   *	    call   WriteString
 00000265  A1 00000068 R     1	mov eax, c1.damageMin
 0000026A  E8 00000000 E     1	call WriteDec
 0000026F  B8 0000002D	     1	mov eax,'-'
 00000274  E8 00000000 E     1	call WriteChar
 00000279  A1 0000006C R     1	mov eax, c1.damageMax
 0000027E  E8 00000000 E     1	call WriteDec
 00000283  BA 0000048A R     1	mov edx, offset blank
 00000288  E8 00000000 E   *	    call   WriteString
 0000028D  BA 0000012C R     1	mov edx, offset defenceTitle ;//prints character defence
 00000292  E8 00000000 E   *	    call   WriteString
 00000297  A1 00000080 R     1	mov eax, c1.defence
 0000029C  E8 00000000 E     1	call WriteDec
 000002A1  BA 0000048A R     1	mov edx, offset blank
 000002A6  E8 00000000 E   *	    call   WriteString
 000002AB  BA 00000137 R     1	mov edx, offset equippedWeaponTitle
 000002B0  E8 00000000 E   *	    call   WriteString
 000002B5  A1 00000070 R     1	mov eax, c1.weaponCode
 000002BA  83 F8 01	     2	cmp eax,1
 000002BD  74 11	     2	je item0??0001
 000002BF  83 F8 02	     2	cmp eax,2
 000002C2  74 13	     2	je item1??0001
 000002C4  83 F8 03	     2	cmp eax,3
 000002C7  74 15	     2	je item2??0001
 000002C9  83 F8 04	     2	cmp eax,4
 000002CC  74 17	     2	je item3??0001
 000002CE  EB 1C	     2	jmp default??0001
 000002D0		     2	item0??0001:
 000002D0  BA 00000000 R     2		mov edx, offset itemName1
 000002D5  EB 1A	     2		jmp print??0001
 000002D7		     2	item1??0001:
 000002D7  BA 00000007 R     2		mov edx, offset itemName2
 000002DC  EB 13	     2		jmp print??0001
 000002DE		     2	item2??0001:
 000002DE  BA 0000000D R     2		mov edx, offset itemName3
 000002E3  EB 0C	     2		jmp print??0001
 000002E5		     2	item3??0001:
 000002E5  BA 00000015 R     2		mov edx, offset itemName4
 000002EA  EB 05	     2		jmp print??0001
 000002EC		     2	default??0001:
 000002EC  BA 0000001B R     2		mov edx, offset defaultName
 000002F1		     2	print??0001:
 000002F1  E8 00000000 E   *	    call   WriteString
 000002F6  BA 0000048A R     1	mov edx, offset blank
 000002FB  E8 00000000 E   *	    call   WriteString
 00000300  BA 00000470 R     1	mov edx, offset continueCommand
 00000305  E8 00000000 E   *	    call   WriteString
 0000030A  E8 00000000 E     2		call ReadDec
 0000030F  8B C8	     2		mov ecx, eax
 00000311  E8 00000000 E     1	call clrscr
 00000316  61		     1	popAD
 00000317  E9 000012DB				jmp end_switch
 0000031C				combat:
						mCombat
 0000031C  60		     1	pushAD
 0000031D  60		     2	pushAD
 0000031E  8B 1D 00000044 R  2	mov ebx, c1.level ;//initialize enemy hp
 00000324  B8 00000003	     2	mov eax,3
 00000329  E8 00000000 E     2	call RandomRange
 0000032E  40		     2	inc eax
 0000032F  F7 E3	     2	mul ebx
 00000331  A3 00000175 R     2	mov e1.hpMax,eax
 00000336  A3 00000179 R     2	mov e1.hp,eax
 0000033B  B8 00000002	     2	mov eax, 2 ;//initialize enemy damage
 00000340  E8 00000000 E     2	call RandomRange
 00000345  40		     2	inc eax
 00000346  03 C3	     2	add eax,ebx
 00000348  A3 0000017D R     2	mov e1.damageMin,eax
 0000034D  8B C8	     2	mov ecx,eax
 0000034F  B8 00000002	     2	mov eax,2
 00000354  E8 00000000 E     2	call RandomRange
 00000359  40		     2	inc eax
 0000035A  03 C1	     2	add eax,ecx
 0000035C  A3 00000181 R     2	mov e1.damageMax,eax
 00000361  A1 00000175 R     2	mov eax,e1.hpMax ;//initialize expReward
 00000366  BB 0000000A	     2	mov ebx,10
 0000036B  F7 E3	     2	mul ebx
 0000036D  A3 00000189 R     2	mov e1.expReward ,eax
 00000372  61		     2	popAD
 00000373  A1 00000060 R     1	mov eax,c1.hpMax
 00000378  A3 00000064 R     1	mov c1.hp,eax
 0000037D  C6 05 0000018D R  1	mov escape        ,0 ;//combat end conditions
	   00
 00000384  C6 05 0000018E R  1	mov playerDefeated,0
	   00
 0000038B  C6 05 0000018F R  1	mov enemyDefeated ,0
	   00
 00000392		     1	WHILE_COMBAT??0003:    ;//disgusting triple & while statement
 00000392  80 3D 0000018D R  1	cmp escape,0       ;//while &
	   00
 00000399  74 05	     1	je AND_COMBAT1??0003
 0000039B  E9 000001B4	     1	jmp AND_FALSE_COMBAT??0003
 000003A0  80 3D 0000018E R  1	AND_COMBAT1??0003: cmp playerDefeated,0
	   00
 000003A7  74 05	     1	je AND_COMBAT2??0003
 000003A9  E9 000001A6	     1	jmp AND_FALSE_COMBAT??0003
 000003AE  80 3D 0000018F R  1	AND_COMBAT2??0003: cmp enemyDefeated,0
	   00
 000003B5  74 05	     1	je AND_COMBAT_TRUE??0003
 000003B7  E9 00000198	     1	jmp AND_FALSE_COMBAT??0003
 000003BC		     1	AND_COMBAT_TRUE??0003:
 000003BC  BA 00000190 R     1		mov edx, offset combatMenuTitle
 000003C1  E8 00000000 E   *	    call   WriteString
 000003C6  BA 0000019D R     1		mov edx, offset enemyNameTitle ;//prints enemy name
 000003CB  E8 00000000 E   *	    call   WriteString
 000003D0  BA 0000016D R     1		mov edx, offset e1.enemyName
 000003D5  E8 00000000 E   *	    call   WriteString
 000003DA  BA 0000048A R     1		mov edx, offset blank
 000003DF  E8 00000000 E   *	    call   WriteString
 000003E4  BA 000001AB R     1		mov edx, offset enemyHpTitle ;//prints enemy hp
 000003E9  E8 00000000 E   *	    call   WriteString
 000003EE  A1 00000179 R     1		mov eax, e1.hp
 000003F3  E8 00000000 E     1		call WriteDec
 000003F8  B8 0000002F	     1		mov eax,'/'
 000003FD  E8 00000000 E     1		call WriteChar
 00000402  A1 00000175 R     1		mov eax, e1.hpMax
 00000407  E8 00000000 E     1		call WriteDec
 0000040C  BA 0000048A R     1		mov edx, offset blank
 00000411  E8 00000000 E   *	    call   WriteString
 00000416  BA 000001B7 R     1		mov edx, offset enemyDamageTitle ;//prints enemy damage
 0000041B  E8 00000000 E   *	    call   WriteString
 00000420  A1 0000017D R     1		mov eax, e1.damageMin
 00000425  E8 00000000 E     1		call WriteDec
 0000042A  B8 0000002D	     1		mov eax,'-'
 0000042F  E8 00000000 E     1		call WriteChar
 00000434  A1 00000181 R     1		mov eax, e1.damageMax
 00000439  E8 00000000 E     1		call WriteDec
 0000043E  BA 0000048A R     1		mov edx, offset blank
 00000443  E8 00000000 E   *	    call   WriteString
 00000448  BA 00000104 R     1		mov edx, offset combatAttributesTitle ;//prints primary attributes header
 0000044D  E8 00000000 E   *	    call   WriteString
 00000452  BA 0000011C R     1		mov edx, offset hpTitle ;//prints character hp
 00000457  E8 00000000 E   *	    call   WriteString
 0000045C  A1 00000064 R     1		mov eax, c1.hp
 00000461  E8 00000000 E     1		call WriteDec
 00000466  B8 0000002F	     1		mov eax,'/'
 0000046B  E8 00000000 E     1		call WriteChar
 00000470  A1 00000060 R     1		mov eax, c1.hpMax
 00000475  E8 00000000 E     1		call WriteDec
 0000047A  BA 0000048A R     1		mov edx, offset blank
 0000047F  E8 00000000 E   *	    call   WriteString
 00000484  BA 00000122 R     1		mov edx, offset damageTitle ;//prints character damage
 00000489  E8 00000000 E   *	    call   WriteString
 0000048E  A1 00000068 R     1		mov eax, c1.damageMin
 00000493  E8 00000000 E     1		call WriteDec
 00000498  B8 0000002D	     1		mov eax,'-'
 0000049D  E8 00000000 E     1		call WriteChar
 000004A2  A1 0000006C R     1		mov eax, c1.damageMax
 000004A7  E8 00000000 E     1		call WriteDec
 000004AC  BA 0000048A R     1		mov edx, offset blank
 000004B1  E8 00000000 E   *	    call   WriteString
 000004B6  BA 000001C7 R     1		mov edx, offset combatOptionsMenuTitle ;//prints combat Options
 000004BB  E8 00000000 E   *	    call   WriteString
 000004C0  BA 000001DC R     1		mov edx,offset attackTitle
 000004C5  E8 00000000 E   *	    call   WriteString
 000004CA  BA 000001E8 R     1		mov edx,offset fleeTitle
 000004CF  E8 00000000 E   *	    call   WriteString
 000004D4  E8 00000000 E     2		call ReadDec
 000004D9  8B C8	     2		mov ecx, eax
 000004DB  E8 00000000 E     1		call Clrscr
 000004E0  83 F9 00	     1			cmp ecx, 0 ;//switch
 000004E3  74 07	     1			je attack
 000004E5  83 F9 01	     1			cmp ecx, 1
 000004E8  74 31	     1			je flee
 000004EA  EB 36	     1			jmp end_switch??0003
 000004EC		     1			attack:
 000004EC  A1 0000006C R     1				mov eax,c1.damageMax;//player attacks
 000004F1  8B 1D 00000068 R  1				mov ebx,c1.damageMin
 000004F7  2B C3	     1				sub eax,ebx
 000004F9  40		     1				inc eax
 000004FA  E8 00000000 E     1				call RandomRange
 000004FF  03 C3	     1				add eax,ebx
 00000501  29 05 00000179 R  1				sub e1.hp,eax
 00000507  83 3D 00000179 R  1				cmp e1.hp,0 ;//check to see if enemy died
	   00
 0000050E  7E 02	     1				jle enemy_dead
 00000510  EB 10	     1				jmp end_switch??0003
 00000512		     1				enemy_dead:
 00000512  C6 05 0000018F R  1					mov enemyDefeated,1
	   01
 00000519  EB 39	     1					jmp AND_FALSE_COMBAT??0003
 0000051B		     1			flee:
 0000051B  C6 05 0000018D R  1				mov escape,1
	   01
 00000522		     1			end_switch??0003:
 00000522  A1 00000181 R     1				mov eax,e1.damageMax;//enemy attacks
 00000527  8B 1D 0000017D R  1				mov ebx,e1.damageMin
 0000052D  2B C3	     1				sub eax,ebx
 0000052F  40		     1				inc eax
 00000530  E8 00000000 E     1				call RandomRange
 00000535  03 C3	     1				add eax,ebx
 00000537  29 05 00000064 R  1				sub c1.hp,eax
 0000053D  83 3D 00000064 R  1				cmp c1.hp,0    ;// checking to see if character died
	   00
 00000544  7E 02	     1				jle character_dead
 00000546  EB 07	     1				jmp character_not_dead
 00000548		     1				character_dead:
 00000548  C6 05 0000018E R  1					mov playerDefeated,1
	   01
 0000054F		     1				character_not_dead:
 0000054F  E9 FFFFFE3E	     1			jmp WHILE_COMBAT??0003;//default
 00000554		     1	AND_FALSE_COMBAT??0003:
 00000554  80 3D 0000018D R  1	cmp escape,0
	   00
 0000055B  74 0C	     1	je not_escape
 0000055D  BA 000001F2 R     1	mov edx, offset escapeEvent;//will print if player fleed
 00000562  E8 00000000 E   *	    call   WriteString
 00000567  EB 48	     1	jmp eventDetermined
 00000569		     1	not_escape:
 00000569  80 3D 0000018E R  1	cmp playerDefeated,0
	   00
 00000570  74 0C	     1	je not_playerDefeated
 00000572  BA 00000201 R     1	mov edx, offset playerDefeatedEvent;//will print if player was defeated
 00000577  E8 00000000 E   *	    call   WriteString
 0000057C  EB 33	     1	jmp eventDetermined
 0000057E		     1	not_playerDefeated:
 0000057E  BA 00000215 R     1	mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
 00000583  E8 00000000 E   *	    call   WriteString
 00000588  B8 0000035E R     1	mov eax, offset t1
 0000058D  BB 00000342 R     2	mov ebx, offset i1
 00000592		     2	notEmpty??0005:
 00000592  83 3B 00	     2	cmp [ebx].item.itemCode,0
 00000595  74 0B	     2	je isEmpty??0005 
 00000597  83 7B 10 00	     2	cmp [ebx].item.next,null
 0000059B  74 09	     2	je inventoryFull??0005
 0000059D  8B 5B 10	     2	mov ebx,[ebx].item.next
 000005A0  EB F0	     2	jmp notEmpty??0005
 000005A2		     2	isEmpty??0005:
 000005A2  8B 08	     2	mov ecx, [eax].item.itemCode
 000005A4  89 0B	     2	mov [ebx].item.itemCode,ecx
 000005A6		     2	inventoryFull??0005:
 000005A6  A1 00000189 R     1	mov eax,e1.expReward ;//rewarding player exp
 000005AB  01 05 00000048 R  1	add c1.exp,eax
 000005B1		     1	eventDetermined:
 000005B1  B8 000007D0	     1	mov eax,2000
 000005B6  E8 00000000 E     1	call Delay
 000005BB  E8 00000000 E     1	call Clrscr
 000005C0  61		     1	popAD
 000005C1  E9 00001031				jmp end_switch
 000005C6				levelUp:
						mLevelUp
 000005C6  60		     1	pushAD
 000005C7  A1 00000048 R     1	mov eax,c1.exp
 000005CC  8B 1D 0000004C R  1	mov ebx,c1.expToNext
 000005D2  3B C3	     1	cmp eax,ebx
 000005D4  7C 67	     1	jl notEnough
 000005D6  FF 05 00000044 R  1	inc c1.level
 000005DC  60		     2	pushAD
 000005DD  FF 05 00000050 R  2	inc c1.brawn   ;// sets primary attributes
 000005E3  FF 05 00000054 R  2	inc c1.agility
 000005E9  FF 05 00000058 R  2	inc c1.mind   
 000005EF  FF 05 0000005C R  2	inc c1.fortune
 000005F5  A1 00000050 R     2	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000005FA  D1 E0	     2	sal eax,1 ;// multiply by 2
 000005FC  A3 00000060 R     2	mov c1.hpMax,eax
 00000601  A3 00000064 R     2	mov c1.hp,eax
 00000606  A1 00000050 R     2	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000060B  D1 F8	     2	sar eax,1;//divide by 2
 0000060D  03 05 0000007C R  2	add eax,c1.weaponDamage
 00000613  A3 00000068 R     2	mov c1.damageMin,eax
 00000618  8B 1D 00000054 R  2	mov ebx,c1.agility
 0000061E  C1 FB 02	     2	sar ebx,2;//divide by 4
 00000621  03 C3	     2	add eax,ebx
 00000623  A3 0000006C R     2	mov c1.damageMax,eax
 00000628  61		     2	popAD
 00000629  A1 00000048 R     1	mov eax,c1.exp
 0000062E  8B 1D 0000004C R  1	mov ebx,c1.expToNext
 00000634  2B C3	     1	sub eax,ebx
 00000636  A3 00000048 R     1	mov c1.exp,eax
 0000063B  EB 19	     1	jmp leveledUp
 0000063D		     1	notEnough:
 0000063D  BA 0000022E R     1	mov edx,offset notEnoughResponse
 00000642  E8 00000000 E   *	    call   WriteString
 00000647  B8 000007D0	     1	mov eax,2000
 0000064C  E8 00000000 E     1	call Delay
 00000651  E8 00000000 E     1	call Clrscr
 00000656		     1	leveledUp:
 00000656  61		     1	popAD
 00000657  E9 00000F9B				jmp end_switch
 0000065C				inventory:
						mInventory
 0000065C  BA 00000382 R     1	mov edx, offset selectItemTitle
 00000661  E8 00000000 E     1	call WriteString
 00000666  60		     2	pushAD
 00000667  33 C9	     2	xor ecx,ecx
 00000669  BB 00000342 R     2	mov eBx, offset i1
 0000066E		     2	DO1??0006:
 0000066E  8B C1	     2	mov eax,ecx
 00000670  E8 00000000 E     2	call WriteDec
 00000675  B8 0000003A	     2	mov eax, ':'
 0000067A  E8 00000000 E     2	call WriteChar
 0000067F  8B 03	     2	mov eax, [ebx].item.itemCode
 00000681  83 F8 01	     3	cmp eax,1
 00000684  74 11	     3	je item0??0007
 00000686  83 F8 02	     3	cmp eax,2
 00000689  74 13	     3	je item1??0007
 0000068B  83 F8 03	     3	cmp eax,3
 0000068E  74 15	     3	je item2??0007
 00000690  83 F8 04	     3	cmp eax,4
 00000693  74 17	     3	je item3??0007
 00000695  EB 1C	     3	jmp default??0007
 00000697		     3	item0??0007:
 00000697  BA 00000000 R     3		mov edx, offset itemName1
 0000069C  EB 1A	     3		jmp print??0007
 0000069E		     3	item1??0007:
 0000069E  BA 00000007 R     3		mov edx, offset itemName2
 000006A3  EB 13	     3		jmp print??0007
 000006A5		     3	item2??0007:
 000006A5  BA 0000000D R     3		mov edx, offset itemName3
 000006AA  EB 0C	     3		jmp print??0007
 000006AC		     3	item3??0007:
 000006AC  BA 00000015 R     3		mov edx, offset itemName4
 000006B1  EB 05	     3		jmp print??0007
 000006B3		     3	default??0007:
 000006B3  BA 0000001B R     3		mov edx, offset defaultName
 000006B8		     3	print??0007:
 000006B8  E8 00000000 E   *	    call   WriteString
 000006BD  BA 0000048A R     2	mov edx,offset blank
 000006C2  E8 00000000 E     2	call WriteString
 000006C7  8B 5B 10	     2	mov eBx,[ebx].item.next
 000006CA  41		     2	inc ecx
 000006CB  83 FB 00	     2	cmp ebx,null
 000006CE  75 9E	     2	jne DO1??0006
 000006D0  61		     2	popAD
 000006D1  E8 00000000 E     2		call ReadDec
 000006D6  8B C8	     2		mov ecx, eax
 000006D8  83 F9 00	     1	cmp ecx,0
 000006DB  74 51	     1		je item0
 000006DD  83 F9 01	     1	cmp ecx,1
 000006E0  0F 84 000001AF    1		je item1
 000006E6  83 F9 02	     1	cmp ecx,2
 000006E9  0F 84 0000030D    1		je item2
 000006EF  83 F9 03	     1	cmp ecx,3
 000006F2  0F 84 0000046B    1		je item3
 000006F8  83 F9 04	     1	cmp ecx,4
 000006FB  0F 84 000005C9    1		je item4
 00000701  83 F9 05	     1	cmp ecx,5
 00000704  0F 84 00000727    1		je item5
 0000070A  83 F9 06	     1	cmp ecx,6
 0000070D  0F 84 00000885    1		je item6
 00000713  83 F9 07	     1	cmp ecx,7
 00000716  0F 84 000009E3    1		je item7
 0000071C  83 F9 08	     1	cmp ecx,8
 0000071F  0F 84 00000B41    1		je item8
 00000725  83 F9 09	     1	cmp ecx,9
 00000728  0F 84 00000C9F    1		je item9
 0000072E		     1	item0:
 0000072E  BB 00000342 R     1		mov ebx,offset i1 ;//storing item for use
 00000733  BA 00000397 R     2	mov edx, offset exitTitle
 00000738  E8 00000000 E     2	call WriteString
 0000073D  BA 000003A2 R     2	mov edx, offset discardTitle
 00000742  E8 00000000 E     2	call WriteString
 00000747  BA 000003B0 R     2	mov edx, offset equipTitle
 0000074C  E8 00000000 E     2	call WriteString
 00000751  BA 000003BC R     2	mov edx, offset infoTitle
 00000756  E8 00000000 E     2	call WriteString
 0000075B  E8 00000000 E     3		call ReadDec
 00000760  8B C8	     3		mov ecx, eax
 00000762  83 F9 00	     2	cmp ecx,0
 00000765  74 18	     2	je exit??0009
 00000767  83 F9 01	     2	cmp ecx,1
 0000076A  74 18	     2	je removeItem??0009
 0000076C  83 F9 02	     2	cmp ecx,2
 0000076F  74 2C	     2	je equipItem??0009
 00000771  83 F9 03	     2	cmp ecx,3
 00000774  0F 84 000000A9    2	je infoItem??0009
 0000077A  E9 00000111	     2	jmp endCase??0009
 0000077F		     2	exit??0009:
 0000077F  E9 0000010C	     2		jmp endCase??0009
 00000784		     2	removeItem??0009:
 00000784  C7 03 00000000    3	mov [ebx].item.itemCode,null
 0000078A  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000791  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000798  E9 000000F3	     2		jmp endCase??0009
 0000079D		     2	equipItem??0009:
 0000079D  8B 13	     3	mov edx, [ebx].item.itemCode
 0000079F  89 15 00000070 R  3	mov c1.weaponCode, edx
 000007A5  8B 53 14	     3	mov edx, [ebx].item.combatValue
 000007A8  89 15 0000007C R  3	mov c1.weaponDamage, edx
 000007AE  8B 53 04	     3	mov edx, [ebx].item.buyValue
 000007B1  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 000007B7  8B 53 08	     3	mov edx,[ebx].item.sellValue
 000007BA  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 000007C0  C7 03 00000000    4	mov [ebx].item.itemCode,null
 000007C6  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 000007CD  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000007D4  60		     4	pushAD
 000007D5  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 000007DB  FF 05 00000054 R  4	inc c1.agility
 000007E1  FF 05 00000058 R  4	inc c1.mind   
 000007E7  FF 05 0000005C R  4	inc c1.fortune
 000007ED  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000007F2  D1 E0	     4	sal eax,1 ;// multiply by 2
 000007F4  A3 00000060 R     4	mov c1.hpMax,eax
 000007F9  A3 00000064 R     4	mov c1.hp,eax
 000007FE  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000803  D1 F8	     4	sar eax,1;//divide by 2
 00000805  03 05 0000007C R  4	add eax,c1.weaponDamage
 0000080B  A3 00000068 R     4	mov c1.damageMin,eax
 00000810  8B 1D 00000054 R  4	mov ebx,c1.agility
 00000816  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000819  03 C3	     4	add eax,ebx
 0000081B  A3 0000006C R     4	mov c1.damageMax,eax
 00000820  61		     4	popAD
 00000821  EB 6D	     2		jmp endCase??0009
 00000823		     2	infoItem??0009:
 00000823  E8 00000000 E     2		call clrscr
 00000828  BA 0000048A R     3	mov edx, offset blank
 0000082D  E8 00000000 E     3	call WriteString
 00000832  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000837  E8 00000000 E     3	call WriteString
 0000083C  8B 43 04	     3	mov eax, [ebx].item.buyValue
 0000083F  E8 00000000 E     3	call WriteDec
 00000844  BA 0000048A R     3	mov edx, offset blank
 00000849  E8 00000000 E     3	call WriteString
 0000084E  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000853  E8 00000000 E     3	call WriteString
 00000858  8B 43 08	     3	mov eax, [ebx].item.SellValue
 0000085B  E8 00000000 E     3	call WriteDec
 00000860  BA 0000048A R     3	mov edx, offset blank
 00000865  E8 00000000 E     3	call WriteString
 0000086A  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 0000086F  E8 00000000 E     3	call WriteString
 00000874  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000877  E8 00000000 E     3	call WriteDec
 0000087C  BA 0000048A R     3	mov edx, offset blank
 00000881  E8 00000000 E     3	call WriteString
 00000886  B8 000007D0	     2		mov eax,2000
 0000088B  E8 00000000 E     2		call Delay
 00000890		     2	endCase??0009:
 00000890  E9 00000C9C	     1		jmp endInventory
 00000895		     1	item1:
 00000895  BB 00000326 R     1		mov ebx,offset i2 ;//storing item for use
 0000089A  BA 00000397 R     2	mov edx, offset exitTitle
 0000089F  E8 00000000 E     2	call WriteString
 000008A4  BA 000003A2 R     2	mov edx, offset discardTitle
 000008A9  E8 00000000 E     2	call WriteString
 000008AE  BA 000003B0 R     2	mov edx, offset equipTitle
 000008B3  E8 00000000 E     2	call WriteString
 000008B8  BA 000003BC R     2	mov edx, offset infoTitle
 000008BD  E8 00000000 E     2	call WriteString
 000008C2  E8 00000000 E     3		call ReadDec
 000008C7  8B C8	     3		mov ecx, eax
 000008C9  83 F9 00	     2	cmp ecx,0
 000008CC  74 18	     2	je exit??000B
 000008CE  83 F9 01	     2	cmp ecx,1
 000008D1  74 18	     2	je removeItem??000B
 000008D3  83 F9 02	     2	cmp ecx,2
 000008D6  74 2C	     2	je equipItem??000B
 000008D8  83 F9 03	     2	cmp ecx,3
 000008DB  0F 84 000000A9    2	je infoItem??000B
 000008E1  E9 00000111	     2	jmp endCase??000B
 000008E6		     2	exit??000B:
 000008E6  E9 0000010C	     2		jmp endCase??000B
 000008EB		     2	removeItem??000B:
 000008EB  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000008F1  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000008F8  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000008FF  E9 000000F3	     2		jmp endCase??000B
 00000904		     2	equipItem??000B:
 00000904  8B 13	     3	mov edx, [ebx].item.itemCode
 00000906  89 15 00000070 R  3	mov c1.weaponCode, edx
 0000090C  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000090F  89 15 0000007C R  3	mov c1.weaponDamage, edx
 00000915  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000918  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 0000091E  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000921  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 00000927  C7 03 00000000    4	mov [ebx].item.itemCode,null
 0000092D  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000934  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 0000093B  60		     4	pushAD
 0000093C  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 00000942  FF 05 00000054 R  4	inc c1.agility
 00000948  FF 05 00000058 R  4	inc c1.mind   
 0000094E  FF 05 0000005C R  4	inc c1.fortune
 00000954  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000959  D1 E0	     4	sal eax,1 ;// multiply by 2
 0000095B  A3 00000060 R     4	mov c1.hpMax,eax
 00000960  A3 00000064 R     4	mov c1.hp,eax
 00000965  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000096A  D1 F8	     4	sar eax,1;//divide by 2
 0000096C  03 05 0000007C R  4	add eax,c1.weaponDamage
 00000972  A3 00000068 R     4	mov c1.damageMin,eax
 00000977  8B 1D 00000054 R  4	mov ebx,c1.agility
 0000097D  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000980  03 C3	     4	add eax,ebx
 00000982  A3 0000006C R     4	mov c1.damageMax,eax
 00000987  61		     4	popAD
 00000988  EB 6D	     2		jmp endCase??000B
 0000098A		     2	infoItem??000B:
 0000098A  E8 00000000 E     2		call clrscr
 0000098F  BA 0000048A R     3	mov edx, offset blank
 00000994  E8 00000000 E     3	call WriteString
 00000999  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000099E  E8 00000000 E     3	call WriteString
 000009A3  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000009A6  E8 00000000 E     3	call WriteDec
 000009AB  BA 0000048A R     3	mov edx, offset blank
 000009B0  E8 00000000 E     3	call WriteString
 000009B5  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000009BA  E8 00000000 E     3	call WriteString
 000009BF  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000009C2  E8 00000000 E     3	call WriteDec
 000009C7  BA 0000048A R     3	mov edx, offset blank
 000009CC  E8 00000000 E     3	call WriteString
 000009D1  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000009D6  E8 00000000 E     3	call WriteString
 000009DB  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000009DE  E8 00000000 E     3	call WriteDec
 000009E3  BA 0000048A R     3	mov edx, offset blank
 000009E8  E8 00000000 E     3	call WriteString
 000009ED  B8 000007D0	     2		mov eax,2000
 000009F2  E8 00000000 E     2		call Delay
 000009F7		     2	endCase??000B:
 000009F7  E9 00000B35	     1		jmp endInventory
 000009FC		     1	item2:
 000009FC  BB 0000030A R     1		mov ebx,offset i3 ;//storing item for use
 00000A01  BA 00000397 R     2	mov edx, offset exitTitle
 00000A06  E8 00000000 E     2	call WriteString
 00000A0B  BA 000003A2 R     2	mov edx, offset discardTitle
 00000A10  E8 00000000 E     2	call WriteString
 00000A15  BA 000003B0 R     2	mov edx, offset equipTitle
 00000A1A  E8 00000000 E     2	call WriteString
 00000A1F  BA 000003BC R     2	mov edx, offset infoTitle
 00000A24  E8 00000000 E     2	call WriteString
 00000A29  E8 00000000 E     3		call ReadDec
 00000A2E  8B C8	     3		mov ecx, eax
 00000A30  83 F9 00	     2	cmp ecx,0
 00000A33  74 18	     2	je exit??000D
 00000A35  83 F9 01	     2	cmp ecx,1
 00000A38  74 18	     2	je removeItem??000D
 00000A3A  83 F9 02	     2	cmp ecx,2
 00000A3D  74 2C	     2	je equipItem??000D
 00000A3F  83 F9 03	     2	cmp ecx,3
 00000A42  0F 84 000000A9    2	je infoItem??000D
 00000A48  E9 00000111	     2	jmp endCase??000D
 00000A4D		     2	exit??000D:
 00000A4D  E9 0000010C	     2		jmp endCase??000D
 00000A52		     2	removeItem??000D:
 00000A52  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000A58  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000A5F  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000A66  E9 000000F3	     2		jmp endCase??000D
 00000A6B		     2	equipItem??000D:
 00000A6B  8B 13	     3	mov edx, [ebx].item.itemCode
 00000A6D  89 15 00000070 R  3	mov c1.weaponCode, edx
 00000A73  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000A76  89 15 0000007C R  3	mov c1.weaponDamage, edx
 00000A7C  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000A7F  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 00000A85  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000A88  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 00000A8E  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000A94  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000A9B  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000AA2  60		     4	pushAD
 00000AA3  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 00000AA9  FF 05 00000054 R  4	inc c1.agility
 00000AAF  FF 05 00000058 R  4	inc c1.mind   
 00000AB5  FF 05 0000005C R  4	inc c1.fortune
 00000ABB  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000AC0  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000AC2  A3 00000060 R     4	mov c1.hpMax,eax
 00000AC7  A3 00000064 R     4	mov c1.hp,eax
 00000ACC  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000AD1  D1 F8	     4	sar eax,1;//divide by 2
 00000AD3  03 05 0000007C R  4	add eax,c1.weaponDamage
 00000AD9  A3 00000068 R     4	mov c1.damageMin,eax
 00000ADE  8B 1D 00000054 R  4	mov ebx,c1.agility
 00000AE4  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000AE7  03 C3	     4	add eax,ebx
 00000AE9  A3 0000006C R     4	mov c1.damageMax,eax
 00000AEE  61		     4	popAD
 00000AEF  EB 6D	     2		jmp endCase??000D
 00000AF1		     2	infoItem??000D:
 00000AF1  E8 00000000 E     2		call clrscr
 00000AF6  BA 0000048A R     3	mov edx, offset blank
 00000AFB  E8 00000000 E     3	call WriteString
 00000B00  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000B05  E8 00000000 E     3	call WriteString
 00000B0A  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000B0D  E8 00000000 E     3	call WriteDec
 00000B12  BA 0000048A R     3	mov edx, offset blank
 00000B17  E8 00000000 E     3	call WriteString
 00000B1C  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000B21  E8 00000000 E     3	call WriteString
 00000B26  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000B29  E8 00000000 E     3	call WriteDec
 00000B2E  BA 0000048A R     3	mov edx, offset blank
 00000B33  E8 00000000 E     3	call WriteString
 00000B38  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000B3D  E8 00000000 E     3	call WriteString
 00000B42  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000B45  E8 00000000 E     3	call WriteDec
 00000B4A  BA 0000048A R     3	mov edx, offset blank
 00000B4F  E8 00000000 E     3	call WriteString
 00000B54  B8 000007D0	     2		mov eax,2000
 00000B59  E8 00000000 E     2		call Delay
 00000B5E		     2	endCase??000D:
 00000B5E  E9 000009CE	     1		jmp endInventory
 00000B63		     1	item3:
 00000B63  BB 000002EE R     1		mov ebx,offset i4 ;//storing item for use
 00000B68  BA 00000397 R     2	mov edx, offset exitTitle
 00000B6D  E8 00000000 E     2	call WriteString
 00000B72  BA 000003A2 R     2	mov edx, offset discardTitle
 00000B77  E8 00000000 E     2	call WriteString
 00000B7C  BA 000003B0 R     2	mov edx, offset equipTitle
 00000B81  E8 00000000 E     2	call WriteString
 00000B86  BA 000003BC R     2	mov edx, offset infoTitle
 00000B8B  E8 00000000 E     2	call WriteString
 00000B90  E8 00000000 E     3		call ReadDec
 00000B95  8B C8	     3		mov ecx, eax
 00000B97  83 F9 00	     2	cmp ecx,0
 00000B9A  74 18	     2	je exit??000F
 00000B9C  83 F9 01	     2	cmp ecx,1
 00000B9F  74 18	     2	je removeItem??000F
 00000BA1  83 F9 02	     2	cmp ecx,2
 00000BA4  74 2C	     2	je equipItem??000F
 00000BA6  83 F9 03	     2	cmp ecx,3
 00000BA9  0F 84 000000A9    2	je infoItem??000F
 00000BAF  E9 00000111	     2	jmp endCase??000F
 00000BB4		     2	exit??000F:
 00000BB4  E9 0000010C	     2		jmp endCase??000F
 00000BB9		     2	removeItem??000F:
 00000BB9  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000BBF  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000BC6  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000BCD  E9 000000F3	     2		jmp endCase??000F
 00000BD2		     2	equipItem??000F:
 00000BD2  8B 13	     3	mov edx, [ebx].item.itemCode
 00000BD4  89 15 00000070 R  3	mov c1.weaponCode, edx
 00000BDA  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000BDD  89 15 0000007C R  3	mov c1.weaponDamage, edx
 00000BE3  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000BE6  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 00000BEC  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000BEF  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 00000BF5  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000BFB  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000C02  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000C09  60		     4	pushAD
 00000C0A  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 00000C10  FF 05 00000054 R  4	inc c1.agility
 00000C16  FF 05 00000058 R  4	inc c1.mind   
 00000C1C  FF 05 0000005C R  4	inc c1.fortune
 00000C22  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000C27  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000C29  A3 00000060 R     4	mov c1.hpMax,eax
 00000C2E  A3 00000064 R     4	mov c1.hp,eax
 00000C33  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000C38  D1 F8	     4	sar eax,1;//divide by 2
 00000C3A  03 05 0000007C R  4	add eax,c1.weaponDamage
 00000C40  A3 00000068 R     4	mov c1.damageMin,eax
 00000C45  8B 1D 00000054 R  4	mov ebx,c1.agility
 00000C4B  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000C4E  03 C3	     4	add eax,ebx
 00000C50  A3 0000006C R     4	mov c1.damageMax,eax
 00000C55  61		     4	popAD
 00000C56  EB 6D	     2		jmp endCase??000F
 00000C58		     2	infoItem??000F:
 00000C58  E8 00000000 E     2		call clrscr
 00000C5D  BA 0000048A R     3	mov edx, offset blank
 00000C62  E8 00000000 E     3	call WriteString
 00000C67  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000C6C  E8 00000000 E     3	call WriteString
 00000C71  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000C74  E8 00000000 E     3	call WriteDec
 00000C79  BA 0000048A R     3	mov edx, offset blank
 00000C7E  E8 00000000 E     3	call WriteString
 00000C83  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000C88  E8 00000000 E     3	call WriteString
 00000C8D  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000C90  E8 00000000 E     3	call WriteDec
 00000C95  BA 0000048A R     3	mov edx, offset blank
 00000C9A  E8 00000000 E     3	call WriteString
 00000C9F  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000CA4  E8 00000000 E     3	call WriteString
 00000CA9  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000CAC  E8 00000000 E     3	call WriteDec
 00000CB1  BA 0000048A R     3	mov edx, offset blank
 00000CB6  E8 00000000 E     3	call WriteString
 00000CBB  B8 000007D0	     2		mov eax,2000
 00000CC0  E8 00000000 E     2		call Delay
 00000CC5		     2	endCase??000F:
 00000CC5  E9 00000867	     1		jmp endInventory
 00000CCA		     1	item4:
 00000CCA  BB 000002D2 R     1		mov ebx,offset i5 ;//storing item for use
 00000CCF  BA 00000397 R     2	mov edx, offset exitTitle
 00000CD4  E8 00000000 E     2	call WriteString
 00000CD9  BA 000003A2 R     2	mov edx, offset discardTitle
 00000CDE  E8 00000000 E     2	call WriteString
 00000CE3  BA 000003B0 R     2	mov edx, offset equipTitle
 00000CE8  E8 00000000 E     2	call WriteString
 00000CED  BA 000003BC R     2	mov edx, offset infoTitle
 00000CF2  E8 00000000 E     2	call WriteString
 00000CF7  E8 00000000 E     3		call ReadDec
 00000CFC  8B C8	     3		mov ecx, eax
 00000CFE  83 F9 00	     2	cmp ecx,0
 00000D01  74 18	     2	je exit??0011
 00000D03  83 F9 01	     2	cmp ecx,1
 00000D06  74 18	     2	je removeItem??0011
 00000D08  83 F9 02	     2	cmp ecx,2
 00000D0B  74 2C	     2	je equipItem??0011
 00000D0D  83 F9 03	     2	cmp ecx,3
 00000D10  0F 84 000000A9    2	je infoItem??0011
 00000D16  E9 00000111	     2	jmp endCase??0011
 00000D1B		     2	exit??0011:
 00000D1B  E9 0000010C	     2		jmp endCase??0011
 00000D20		     2	removeItem??0011:
 00000D20  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000D26  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000D2D  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000D34  E9 000000F3	     2		jmp endCase??0011
 00000D39		     2	equipItem??0011:
 00000D39  8B 13	     3	mov edx, [ebx].item.itemCode
 00000D3B  89 15 00000070 R  3	mov c1.weaponCode, edx
 00000D41  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000D44  89 15 0000007C R  3	mov c1.weaponDamage, edx
 00000D4A  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000D4D  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 00000D53  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000D56  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 00000D5C  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000D62  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000D69  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000D70  60		     4	pushAD
 00000D71  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 00000D77  FF 05 00000054 R  4	inc c1.agility
 00000D7D  FF 05 00000058 R  4	inc c1.mind   
 00000D83  FF 05 0000005C R  4	inc c1.fortune
 00000D89  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000D8E  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000D90  A3 00000060 R     4	mov c1.hpMax,eax
 00000D95  A3 00000064 R     4	mov c1.hp,eax
 00000D9A  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000D9F  D1 F8	     4	sar eax,1;//divide by 2
 00000DA1  03 05 0000007C R  4	add eax,c1.weaponDamage
 00000DA7  A3 00000068 R     4	mov c1.damageMin,eax
 00000DAC  8B 1D 00000054 R  4	mov ebx,c1.agility
 00000DB2  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000DB5  03 C3	     4	add eax,ebx
 00000DB7  A3 0000006C R     4	mov c1.damageMax,eax
 00000DBC  61		     4	popAD
 00000DBD  EB 6D	     2		jmp endCase??0011
 00000DBF		     2	infoItem??0011:
 00000DBF  E8 00000000 E     2		call clrscr
 00000DC4  BA 0000048A R     3	mov edx, offset blank
 00000DC9  E8 00000000 E     3	call WriteString
 00000DCE  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000DD3  E8 00000000 E     3	call WriteString
 00000DD8  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000DDB  E8 00000000 E     3	call WriteDec
 00000DE0  BA 0000048A R     3	mov edx, offset blank
 00000DE5  E8 00000000 E     3	call WriteString
 00000DEA  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000DEF  E8 00000000 E     3	call WriteString
 00000DF4  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000DF7  E8 00000000 E     3	call WriteDec
 00000DFC  BA 0000048A R     3	mov edx, offset blank
 00000E01  E8 00000000 E     3	call WriteString
 00000E06  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000E0B  E8 00000000 E     3	call WriteString
 00000E10  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000E13  E8 00000000 E     3	call WriteDec
 00000E18  BA 0000048A R     3	mov edx, offset blank
 00000E1D  E8 00000000 E     3	call WriteString
 00000E22  B8 000007D0	     2		mov eax,2000
 00000E27  E8 00000000 E     2		call Delay
 00000E2C		     2	endCase??0011:
 00000E2C  E9 00000700	     1		jmp endInventory
 00000E31		     1	item5:
 00000E31  BB 000002B6 R     1		mov ebx,offset i6 ;//storing item for use
 00000E36  BA 00000397 R     2	mov edx, offset exitTitle
 00000E3B  E8 00000000 E     2	call WriteString
 00000E40  BA 000003A2 R     2	mov edx, offset discardTitle
 00000E45  E8 00000000 E     2	call WriteString
 00000E4A  BA 000003B0 R     2	mov edx, offset equipTitle
 00000E4F  E8 00000000 E     2	call WriteString
 00000E54  BA 000003BC R     2	mov edx, offset infoTitle
 00000E59  E8 00000000 E     2	call WriteString
 00000E5E  E8 00000000 E     3		call ReadDec
 00000E63  8B C8	     3		mov ecx, eax
 00000E65  83 F9 00	     2	cmp ecx,0
 00000E68  74 18	     2	je exit??0013
 00000E6A  83 F9 01	     2	cmp ecx,1
 00000E6D  74 18	     2	je removeItem??0013
 00000E6F  83 F9 02	     2	cmp ecx,2
 00000E72  74 2C	     2	je equipItem??0013
 00000E74  83 F9 03	     2	cmp ecx,3
 00000E77  0F 84 000000A9    2	je infoItem??0013
 00000E7D  E9 00000111	     2	jmp endCase??0013
 00000E82		     2	exit??0013:
 00000E82  E9 0000010C	     2		jmp endCase??0013
 00000E87		     2	removeItem??0013:
 00000E87  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000E8D  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000E94  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000E9B  E9 000000F3	     2		jmp endCase??0013
 00000EA0		     2	equipItem??0013:
 00000EA0  8B 13	     3	mov edx, [ebx].item.itemCode
 00000EA2  89 15 00000070 R  3	mov c1.weaponCode, edx
 00000EA8  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000EAB  89 15 0000007C R  3	mov c1.weaponDamage, edx
 00000EB1  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000EB4  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 00000EBA  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000EBD  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 00000EC3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000EC9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000ED0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000ED7  60		     4	pushAD
 00000ED8  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 00000EDE  FF 05 00000054 R  4	inc c1.agility
 00000EE4  FF 05 00000058 R  4	inc c1.mind   
 00000EEA  FF 05 0000005C R  4	inc c1.fortune
 00000EF0  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000EF5  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000EF7  A3 00000060 R     4	mov c1.hpMax,eax
 00000EFC  A3 00000064 R     4	mov c1.hp,eax
 00000F01  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000F06  D1 F8	     4	sar eax,1;//divide by 2
 00000F08  03 05 0000007C R  4	add eax,c1.weaponDamage
 00000F0E  A3 00000068 R     4	mov c1.damageMin,eax
 00000F13  8B 1D 00000054 R  4	mov ebx,c1.agility
 00000F19  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000F1C  03 C3	     4	add eax,ebx
 00000F1E  A3 0000006C R     4	mov c1.damageMax,eax
 00000F23  61		     4	popAD
 00000F24  EB 6D	     2		jmp endCase??0013
 00000F26		     2	infoItem??0013:
 00000F26  E8 00000000 E     2		call clrscr
 00000F2B  BA 0000048A R     3	mov edx, offset blank
 00000F30  E8 00000000 E     3	call WriteString
 00000F35  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000F3A  E8 00000000 E     3	call WriteString
 00000F3F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000F42  E8 00000000 E     3	call WriteDec
 00000F47  BA 0000048A R     3	mov edx, offset blank
 00000F4C  E8 00000000 E     3	call WriteString
 00000F51  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000F56  E8 00000000 E     3	call WriteString
 00000F5B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000F5E  E8 00000000 E     3	call WriteDec
 00000F63  BA 0000048A R     3	mov edx, offset blank
 00000F68  E8 00000000 E     3	call WriteString
 00000F6D  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000F72  E8 00000000 E     3	call WriteString
 00000F77  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000F7A  E8 00000000 E     3	call WriteDec
 00000F7F  BA 0000048A R     3	mov edx, offset blank
 00000F84  E8 00000000 E     3	call WriteString
 00000F89  B8 000007D0	     2		mov eax,2000
 00000F8E  E8 00000000 E     2		call Delay
 00000F93		     2	endCase??0013:
 00000F93  E9 00000599	     1		jmp endInventory
 00000F98		     1	item6:
 00000F98  BB 0000029A R     1		mov ebx,offset i7 ;//storing item for use
 00000F9D  BA 00000397 R     2	mov edx, offset exitTitle
 00000FA2  E8 00000000 E     2	call WriteString
 00000FA7  BA 000003A2 R     2	mov edx, offset discardTitle
 00000FAC  E8 00000000 E     2	call WriteString
 00000FB1  BA 000003B0 R     2	mov edx, offset equipTitle
 00000FB6  E8 00000000 E     2	call WriteString
 00000FBB  BA 000003BC R     2	mov edx, offset infoTitle
 00000FC0  E8 00000000 E     2	call WriteString
 00000FC5  E8 00000000 E     3		call ReadDec
 00000FCA  8B C8	     3		mov ecx, eax
 00000FCC  83 F9 00	     2	cmp ecx,0
 00000FCF  74 18	     2	je exit??0015
 00000FD1  83 F9 01	     2	cmp ecx,1
 00000FD4  74 18	     2	je removeItem??0015
 00000FD6  83 F9 02	     2	cmp ecx,2
 00000FD9  74 2C	     2	je equipItem??0015
 00000FDB  83 F9 03	     2	cmp ecx,3
 00000FDE  0F 84 000000A9    2	je infoItem??0015
 00000FE4  E9 00000111	     2	jmp endCase??0015
 00000FE9		     2	exit??0015:
 00000FE9  E9 0000010C	     2		jmp endCase??0015
 00000FEE		     2	removeItem??0015:
 00000FEE  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000FF4  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000FFB  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001002  E9 000000F3	     2		jmp endCase??0015
 00001007		     2	equipItem??0015:
 00001007  8B 13	     3	mov edx, [ebx].item.itemCode
 00001009  89 15 00000070 R  3	mov c1.weaponCode, edx
 0000100F  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00001012  89 15 0000007C R  3	mov c1.weaponDamage, edx
 00001018  8B 53 04	     3	mov edx, [ebx].item.buyValue
 0000101B  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 00001021  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00001024  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 0000102A  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001030  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001037  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 0000103E  60		     4	pushAD
 0000103F  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 00001045  FF 05 00000054 R  4	inc c1.agility
 0000104B  FF 05 00000058 R  4	inc c1.mind   
 00001051  FF 05 0000005C R  4	inc c1.fortune
 00001057  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 0000105C  D1 E0	     4	sal eax,1 ;// multiply by 2
 0000105E  A3 00000060 R     4	mov c1.hpMax,eax
 00001063  A3 00000064 R     4	mov c1.hp,eax
 00001068  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000106D  D1 F8	     4	sar eax,1;//divide by 2
 0000106F  03 05 0000007C R  4	add eax,c1.weaponDamage
 00001075  A3 00000068 R     4	mov c1.damageMin,eax
 0000107A  8B 1D 00000054 R  4	mov ebx,c1.agility
 00001080  C1 FB 02	     4	sar ebx,2;//divide by 4
 00001083  03 C3	     4	add eax,ebx
 00001085  A3 0000006C R     4	mov c1.damageMax,eax
 0000108A  61		     4	popAD
 0000108B  EB 6D	     2		jmp endCase??0015
 0000108D		     2	infoItem??0015:
 0000108D  E8 00000000 E     2		call clrscr
 00001092  BA 0000048A R     3	mov edx, offset blank
 00001097  E8 00000000 E     3	call WriteString
 0000109C  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000010A1  E8 00000000 E     3	call WriteString
 000010A6  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000010A9  E8 00000000 E     3	call WriteDec
 000010AE  BA 0000048A R     3	mov edx, offset blank
 000010B3  E8 00000000 E     3	call WriteString
 000010B8  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000010BD  E8 00000000 E     3	call WriteString
 000010C2  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000010C5  E8 00000000 E     3	call WriteDec
 000010CA  BA 0000048A R     3	mov edx, offset blank
 000010CF  E8 00000000 E     3	call WriteString
 000010D4  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000010D9  E8 00000000 E     3	call WriteString
 000010DE  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000010E1  E8 00000000 E     3	call WriteDec
 000010E6  BA 0000048A R     3	mov edx, offset blank
 000010EB  E8 00000000 E     3	call WriteString
 000010F0  B8 000007D0	     2		mov eax,2000
 000010F5  E8 00000000 E     2		call Delay
 000010FA		     2	endCase??0015:
 000010FA  E9 00000432	     1		jmp endInventory
 000010FF		     1	item7:
 000010FF  BB 0000027E R     1		mov ebx,offset i8 ;//storing item for use
 00001104  BA 00000397 R     2	mov edx, offset exitTitle
 00001109  E8 00000000 E     2	call WriteString
 0000110E  BA 000003A2 R     2	mov edx, offset discardTitle
 00001113  E8 00000000 E     2	call WriteString
 00001118  BA 000003B0 R     2	mov edx, offset equipTitle
 0000111D  E8 00000000 E     2	call WriteString
 00001122  BA 000003BC R     2	mov edx, offset infoTitle
 00001127  E8 00000000 E     2	call WriteString
 0000112C  E8 00000000 E     3		call ReadDec
 00001131  8B C8	     3		mov ecx, eax
 00001133  83 F9 00	     2	cmp ecx,0
 00001136  74 18	     2	je exit??0017
 00001138  83 F9 01	     2	cmp ecx,1
 0000113B  74 18	     2	je removeItem??0017
 0000113D  83 F9 02	     2	cmp ecx,2
 00001140  74 2C	     2	je equipItem??0017
 00001142  83 F9 03	     2	cmp ecx,3
 00001145  0F 84 000000A9    2	je infoItem??0017
 0000114B  E9 00000111	     2	jmp endCase??0017
 00001150		     2	exit??0017:
 00001150  E9 0000010C	     2		jmp endCase??0017
 00001155		     2	removeItem??0017:
 00001155  C7 03 00000000    3	mov [ebx].item.itemCode,null
 0000115B  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00001162  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001169  E9 000000F3	     2		jmp endCase??0017
 0000116E		     2	equipItem??0017:
 0000116E  8B 13	     3	mov edx, [ebx].item.itemCode
 00001170  89 15 00000070 R  3	mov c1.weaponCode, edx
 00001176  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00001179  89 15 0000007C R  3	mov c1.weaponDamage, edx
 0000117F  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001182  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 00001188  8B 53 08	     3	mov edx,[ebx].item.sellValue
 0000118B  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 00001191  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001197  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 0000119E  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000011A5  60		     4	pushAD
 000011A6  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 000011AC  FF 05 00000054 R  4	inc c1.agility
 000011B2  FF 05 00000058 R  4	inc c1.mind   
 000011B8  FF 05 0000005C R  4	inc c1.fortune
 000011BE  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000011C3  D1 E0	     4	sal eax,1 ;// multiply by 2
 000011C5  A3 00000060 R     4	mov c1.hpMax,eax
 000011CA  A3 00000064 R     4	mov c1.hp,eax
 000011CF  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000011D4  D1 F8	     4	sar eax,1;//divide by 2
 000011D6  03 05 0000007C R  4	add eax,c1.weaponDamage
 000011DC  A3 00000068 R     4	mov c1.damageMin,eax
 000011E1  8B 1D 00000054 R  4	mov ebx,c1.agility
 000011E7  C1 FB 02	     4	sar ebx,2;//divide by 4
 000011EA  03 C3	     4	add eax,ebx
 000011EC  A3 0000006C R     4	mov c1.damageMax,eax
 000011F1  61		     4	popAD
 000011F2  EB 6D	     2		jmp endCase??0017
 000011F4		     2	infoItem??0017:
 000011F4  E8 00000000 E     2		call clrscr
 000011F9  BA 0000048A R     3	mov edx, offset blank
 000011FE  E8 00000000 E     3	call WriteString
 00001203  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00001208  E8 00000000 E     3	call WriteString
 0000120D  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001210  E8 00000000 E     3	call WriteDec
 00001215  BA 0000048A R     3	mov edx, offset blank
 0000121A  E8 00000000 E     3	call WriteString
 0000121F  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001224  E8 00000000 E     3	call WriteString
 00001229  8B 43 08	     3	mov eax, [ebx].item.SellValue
 0000122C  E8 00000000 E     3	call WriteDec
 00001231  BA 0000048A R     3	mov edx, offset blank
 00001236  E8 00000000 E     3	call WriteString
 0000123B  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001240  E8 00000000 E     3	call WriteString
 00001245  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00001248  E8 00000000 E     3	call WriteDec
 0000124D  BA 0000048A R     3	mov edx, offset blank
 00001252  E8 00000000 E     3	call WriteString
 00001257  B8 000007D0	     2		mov eax,2000
 0000125C  E8 00000000 E     2		call Delay
 00001261		     2	endCase??0017:
 00001261  E9 000002CB	     1		jmp endInventory
 00001266		     1	item8:
 00001266  BB 00000262 R     1		mov ebx,offset i9 ;//storing item for use
 0000126B  BA 00000397 R     2	mov edx, offset exitTitle
 00001270  E8 00000000 E     2	call WriteString
 00001275  BA 000003A2 R     2	mov edx, offset discardTitle
 0000127A  E8 00000000 E     2	call WriteString
 0000127F  BA 000003B0 R     2	mov edx, offset equipTitle
 00001284  E8 00000000 E     2	call WriteString
 00001289  BA 000003BC R     2	mov edx, offset infoTitle
 0000128E  E8 00000000 E     2	call WriteString
 00001293  E8 00000000 E     3		call ReadDec
 00001298  8B C8	     3		mov ecx, eax
 0000129A  83 F9 00	     2	cmp ecx,0
 0000129D  74 18	     2	je exit??0019
 0000129F  83 F9 01	     2	cmp ecx,1
 000012A2  74 18	     2	je removeItem??0019
 000012A4  83 F9 02	     2	cmp ecx,2
 000012A7  74 2C	     2	je equipItem??0019
 000012A9  83 F9 03	     2	cmp ecx,3
 000012AC  0F 84 000000A9    2	je infoItem??0019
 000012B2  E9 00000111	     2	jmp endCase??0019
 000012B7		     2	exit??0019:
 000012B7  E9 0000010C	     2		jmp endCase??0019
 000012BC		     2	removeItem??0019:
 000012BC  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000012C2  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000012C9  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000012D0  E9 000000F3	     2		jmp endCase??0019
 000012D5		     2	equipItem??0019:
 000012D5  8B 13	     3	mov edx, [ebx].item.itemCode
 000012D7  89 15 00000070 R  3	mov c1.weaponCode, edx
 000012DD  8B 53 14	     3	mov edx, [ebx].item.combatValue
 000012E0  89 15 0000007C R  3	mov c1.weaponDamage, edx
 000012E6  8B 53 04	     3	mov edx, [ebx].item.buyValue
 000012E9  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 000012EF  8B 53 08	     3	mov edx,[ebx].item.sellValue
 000012F2  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 000012F8  C7 03 00000000    4	mov [ebx].item.itemCode,null
 000012FE  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001305  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 0000130C  60		     4	pushAD
 0000130D  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 00001313  FF 05 00000054 R  4	inc c1.agility
 00001319  FF 05 00000058 R  4	inc c1.mind   
 0000131F  FF 05 0000005C R  4	inc c1.fortune
 00001325  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 0000132A  D1 E0	     4	sal eax,1 ;// multiply by 2
 0000132C  A3 00000060 R     4	mov c1.hpMax,eax
 00001331  A3 00000064 R     4	mov c1.hp,eax
 00001336  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000133B  D1 F8	     4	sar eax,1;//divide by 2
 0000133D  03 05 0000007C R  4	add eax,c1.weaponDamage
 00001343  A3 00000068 R     4	mov c1.damageMin,eax
 00001348  8B 1D 00000054 R  4	mov ebx,c1.agility
 0000134E  C1 FB 02	     4	sar ebx,2;//divide by 4
 00001351  03 C3	     4	add eax,ebx
 00001353  A3 0000006C R     4	mov c1.damageMax,eax
 00001358  61		     4	popAD
 00001359  EB 6D	     2		jmp endCase??0019
 0000135B		     2	infoItem??0019:
 0000135B  E8 00000000 E     2		call clrscr
 00001360  BA 0000048A R     3	mov edx, offset blank
 00001365  E8 00000000 E     3	call WriteString
 0000136A  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000136F  E8 00000000 E     3	call WriteString
 00001374  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001377  E8 00000000 E     3	call WriteDec
 0000137C  BA 0000048A R     3	mov edx, offset blank
 00001381  E8 00000000 E     3	call WriteString
 00001386  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 0000138B  E8 00000000 E     3	call WriteString
 00001390  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00001393  E8 00000000 E     3	call WriteDec
 00001398  BA 0000048A R     3	mov edx, offset blank
 0000139D  E8 00000000 E     3	call WriteString
 000013A2  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000013A7  E8 00000000 E     3	call WriteString
 000013AC  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000013AF  E8 00000000 E     3	call WriteDec
 000013B4  BA 0000048A R     3	mov edx, offset blank
 000013B9  E8 00000000 E     3	call WriteString
 000013BE  B8 000007D0	     2		mov eax,2000
 000013C3  E8 00000000 E     2		call Delay
 000013C8		     2	endCase??0019:
 000013C8  E9 00000164	     1		jmp endInventory
 000013CD		     1	item9:
 000013CD  BB 00000246 R     1		mov ebx,offset i10 ;//storing item for use
 000013D2  BA 00000397 R     2	mov edx, offset exitTitle
 000013D7  E8 00000000 E     2	call WriteString
 000013DC  BA 000003A2 R     2	mov edx, offset discardTitle
 000013E1  E8 00000000 E     2	call WriteString
 000013E6  BA 000003B0 R     2	mov edx, offset equipTitle
 000013EB  E8 00000000 E     2	call WriteString
 000013F0  BA 000003BC R     2	mov edx, offset infoTitle
 000013F5  E8 00000000 E     2	call WriteString
 000013FA  E8 00000000 E     3		call ReadDec
 000013FF  8B C8	     3		mov ecx, eax
 00001401  83 F9 00	     2	cmp ecx,0
 00001404  74 18	     2	je exit??001B
 00001406  83 F9 01	     2	cmp ecx,1
 00001409  74 18	     2	je removeItem??001B
 0000140B  83 F9 02	     2	cmp ecx,2
 0000140E  74 2C	     2	je equipItem??001B
 00001410  83 F9 03	     2	cmp ecx,3
 00001413  0F 84 000000A9    2	je infoItem??001B
 00001419  E9 00000111	     2	jmp endCase??001B
 0000141E		     2	exit??001B:
 0000141E  E9 0000010C	     2		jmp endCase??001B
 00001423		     2	removeItem??001B:
 00001423  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001429  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00001430  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001437  E9 000000F3	     2		jmp endCase??001B
 0000143C		     2	equipItem??001B:
 0000143C  8B 13	     3	mov edx, [ebx].item.itemCode
 0000143E  89 15 00000070 R  3	mov c1.weaponCode, edx
 00001444  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00001447  89 15 0000007C R  3	mov c1.weaponDamage, edx
 0000144D  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001450  89 15 00000074 R  3	mov c1.weaponBuyValue,edx
 00001456  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00001459  89 15 00000078 R  3	mov c1.weaponsellValue,edx
 0000145F  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001465  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 0000146C  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001473  60		     4	pushAD
 00001474  FF 05 00000050 R  4	inc c1.brawn   ;// sets primary attributes
 0000147A  FF 05 00000054 R  4	inc c1.agility
 00001480  FF 05 00000058 R  4	inc c1.mind   
 00001486  FF 05 0000005C R  4	inc c1.fortune
 0000148C  A1 00000050 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001491  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001493  A3 00000060 R     4	mov c1.hpMax,eax
 00001498  A3 00000064 R     4	mov c1.hp,eax
 0000149D  A1 00000050 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000014A2  D1 F8	     4	sar eax,1;//divide by 2
 000014A4  03 05 0000007C R  4	add eax,c1.weaponDamage
 000014AA  A3 00000068 R     4	mov c1.damageMin,eax
 000014AF  8B 1D 00000054 R  4	mov ebx,c1.agility
 000014B5  C1 FB 02	     4	sar ebx,2;//divide by 4
 000014B8  03 C3	     4	add eax,ebx
 000014BA  A3 0000006C R     4	mov c1.damageMax,eax
 000014BF  61		     4	popAD
 000014C0  EB 6D	     2		jmp endCase??001B
 000014C2		     2	infoItem??001B:
 000014C2  E8 00000000 E     2		call clrscr
 000014C7  BA 0000048A R     3	mov edx, offset blank
 000014CC  E8 00000000 E     3	call WriteString
 000014D1  BA 000003E8 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000014D6  E8 00000000 E     3	call WriteString
 000014DB  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000014DE  E8 00000000 E     3	call WriteDec
 000014E3  BA 0000048A R     3	mov edx, offset blank
 000014E8  E8 00000000 E     3	call WriteString
 000014ED  BA 000003D9 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000014F2  E8 00000000 E     3	call WriteString
 000014F7  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000014FA  E8 00000000 E     3	call WriteDec
 000014FF  BA 0000048A R     3	mov edx, offset blank
 00001504  E8 00000000 E     3	call WriteString
 00001509  BA 000003F6 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 0000150E  E8 00000000 E     3	call WriteString
 00001513  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00001516  E8 00000000 E     3	call WriteDec
 0000151B  BA 0000048A R     3	mov edx, offset blank
 00001520  E8 00000000 E     3	call WriteString
 00001525  B8 000007D0	     2		mov eax,2000
 0000152A  E8 00000000 E     2		call Delay
 0000152F		     2	endCase??001B:
 0000152F  EB 00	     1		jmp endInventory
 00001531		     1	endInventory:
 00001531  E8 00000000 E     1	call clrscr
 00001536  E9 000000BC				jmp end_switch
 0000153B				dequip:
						mDequip
 0000153B  83 3D 00000070 R  1	cmp c1.weaponCode,0
	   00
 00001542  0F 84 000000AD    1	je nothingEquipped??001D
 00001548  BB 00000342 R     1	mov ebx, offset i1
 0000154D		     1	notEmpty??001D:
 0000154D  83 3B 00	     1	cmp [ebx].item.itemCode,0
 00001550  74 0F	     1	je isEmpty??001D 
 00001552  83 7B 10 00	     1	cmp [ebx].item.next,null
 00001556  0F 84 00000099    1	je inventoryFull??001D
 0000155C  8B 5B 10	     1	mov ebx,[ebx].item.next
 0000155F  EB EC	     1	jmp notEmpty??001D
 00001561		     1	isEmpty??001D:
 00001561  A1 00000070 R     1	mov eax, c1.weaponCode
 00001566  89 03	     1	mov [ebx].item.itemCode,eax
 00001568  C7 05 00000070 R  1	mov c1.weaponCode,0
	   00000000
 00001572  A1 00000074 R     1	mov eax, c1.weaponBuyValue
 00001577  89 43 04	     1	mov [ebx].item.buyValue,eax
 0000157A  C7 05 00000074 R  1	mov c1.weaponBuyValue,0
	   00000000
 00001584  A1 00000078 R     1	mov eax, c1.weaponSellValue
 00001589  89 43 08	     1	mov [ebx].item.sellValue,eax
 0000158C  C7 05 00000078 R  1	mov c1.weaponSellValue,0
	   00000000
 00001596  A1 0000007C R     1	mov eax, c1.weaponDamage
 0000159B  89 43 14	     1	mov [ebx].item.combatValue,eax
 0000159E  C7 05 0000007C R  1	mov c1.weaponDamage,0
	   00000000
 000015A8  60		     2	pushAD
 000015A9  FF 05 00000050 R  2	inc c1.brawn   ;// sets primary attributes
 000015AF  FF 05 00000054 R  2	inc c1.agility
 000015B5  FF 05 00000058 R  2	inc c1.mind   
 000015BB  FF 05 0000005C R  2	inc c1.fortune
 000015C1  A1 00000050 R     2	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000015C6  D1 E0	     2	sal eax,1 ;// multiply by 2
 000015C8  A3 00000060 R     2	mov c1.hpMax,eax
 000015CD  A3 00000064 R     2	mov c1.hp,eax
 000015D2  A1 00000050 R     2	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000015D7  D1 F8	     2	sar eax,1;//divide by 2
 000015D9  03 05 0000007C R  2	add eax,c1.weaponDamage
 000015DF  A3 00000068 R     2	mov c1.damageMin,eax
 000015E4  8B 1D 00000054 R  2	mov ebx,c1.agility
 000015EA  C1 FB 02	     2	sar ebx,2;//divide by 4
 000015ED  03 C3	     2	add eax,ebx
 000015EF  A3 0000006C R     2	mov c1.damageMax,eax
 000015F4  61		     2	popAD
 000015F5		     1	inventoryFull??001D:
 000015F5		     1	nothingEquipped??001D:
 000015F5  EB 00				jmp end_switch
 000015F7				end_switch:
 000015F7  E9 FFFFEA76			jmp while_main ;//default


					; endwhile_main:
					
					invoke ExitProcess, 0
 000015FC  6A 00	   *	    push   +000000000h
 000015FE  E8 00000000 E   *	    call   ExitProcess

 00001603			main endp

				end main
Microsoft (R) Macro Assembler Version 14.13.26129.0	    04/02/18 16:30:48
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

_get_input . . . . . . . . . . .	Proc
mAddItem . . . . . . . . . . . .	Proc
mCombat  . . . . . . . . . . . .	Proc
mDequip  . . . . . . . . . . . .	Proc
mDisplayInventory  . . . . . . .	Proc
mDisplayItemInfo . . . . . . . .	Proc
mEquip . . . . . . . . . . . . .	Proc
mGetCharacterName  . . . . . . .	Proc
mGetItemName . . . . . . . . . .	Proc
mInitializeCharacter . . . . . .	Proc
mInitializeEnemy . . . . . . . .	Proc
mInventory . . . . . . . . . . .	Proc
mLevelUp . . . . . . . . . . . .	Proc
mPrintCharacterSheet . . . . . .	Proc
mRemoveItem  . . . . . . . . . .	Proc
mitemOptions . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
character  . . . . . . . . . . .	 00000058
  xPos . . . . . . . . . . . . .	 00000000	 DWord
  yPos . . . . . . . . . . . . .	 00000004	 DWord
  characterName  . . . . . . . .	 00000008	 Byte
  level  . . . . . . . . . . . .	 00000018	 DWord
  exp  . . . . . . . . . . . . .	 0000001C	 DWord
  expToNext  . . . . . . . . . .	 00000020	 DWord
  brawn  . . . . . . . . . . . .	 00000024	 DWord
  agility  . . . . . . . . . . .	 00000028	 DWord
  mind . . . . . . . . . . . . .	 0000002C	 DWord
  fortune  . . . . . . . . . . .	 00000030	 DWord
  hpMax  . . . . . . . . . . . .	 00000034	 DWord
  hp . . . . . . . . . . . . . .	 00000038	 DWord
  damageMin  . . . . . . . . . .	 0000003C	 DWord
  damageMax  . . . . . . . . . .	 00000040	 DWord
  weaponCode . . . . . . . . . .	 00000044	 DWord
  weaponBuyValue . . . . . . . .	 00000048	 DWord
  weaponSellValue  . . . . . . .	 0000004C	 DWord
  weaponDamage . . . . . . . . .	 00000050	 DWord
  defence  . . . . . . . . . . .	 00000054	 DWord
enemy  . . . . . . . . . . . . .	 00000020
  enemyName  . . . . . . . . . .	 00000000	 Byte
  hpMax  . . . . . . . . . . . .	 00000008	 DWord
  hp . . . . . . . . . . . . . .	 0000000C	 DWord
  damageMin  . . . . . . . . . .	 00000010	 DWord
  damageMax  . . . . . . . . . .	 00000014	 DWord
  defence  . . . . . . . . . . .	 00000018	 DWord
  expReward  . . . . . . . . . .	 0000001C	 DWord
item . . . . . . . . . . . . . .	 0000001C
  itemCode . . . . . . . . . . .	 00000000	 DWord
  buyValue . . . . . . . . . . .	 00000004	 DWord
  sellValue  . . . . . . . . . .	 00000008	 DWord
  prev . . . . . . . . . . . . .	 0000000C	 DWord
  next . . . . . . . . . . . . .	 00000010	 DWord
  combatValue  . . . . . . . . .	 00000014	 DWord
  itemType . . . . . . . . . . .	 00000018	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000048E DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001603 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00001603 Public STDCALL
  while_main . . . . . . . . . .	L Near	 00000072 _TEXT	
  character_sheet  . . . . . . .	L Near	 000000E8 _TEXT	
  item0??0001  . . . . . . . . .	L Near	 000002D0 _TEXT	
  item1??0001  . . . . . . . . .	L Near	 000002D7 _TEXT	
  item2??0001  . . . . . . . . .	L Near	 000002DE _TEXT	
  item3??0001  . . . . . . . . .	L Near	 000002E5 _TEXT	
  default??0001  . . . . . . . .	L Near	 000002EC _TEXT	
  print??0001  . . . . . . . . .	L Near	 000002F1 _TEXT	
  combat . . . . . . . . . . . .	L Near	 0000031C _TEXT	
  WHILE_COMBAT??0003 . . . . . .	L Near	 00000392 _TEXT	
  AND_COMBAT1??0003  . . . . . .	L Near	 000003A0 _TEXT	
  AND_COMBAT2??0003  . . . . . .	L Near	 000003AE _TEXT	
  AND_COMBAT_TRUE??0003  . . . .	L Near	 000003BC _TEXT	
  attack . . . . . . . . . . . .	L Near	 000004EC _TEXT	
  enemy_dead . . . . . . . . . .	L Near	 00000512 _TEXT	
  flee . . . . . . . . . . . . .	L Near	 0000051B _TEXT	
  end_switch??0003 . . . . . . .	L Near	 00000522 _TEXT	
  character_dead . . . . . . . .	L Near	 00000548 _TEXT	
  character_not_dead . . . . . .	L Near	 0000054F _TEXT	
  AND_FALSE_COMBAT??0003 . . . .	L Near	 00000554 _TEXT	
  not_escape . . . . . . . . . .	L Near	 00000569 _TEXT	
  not_playerDefeated . . . . . .	L Near	 0000057E _TEXT	
  notEmpty??0005 . . . . . . . .	L Near	 00000592 _TEXT	
  isEmpty??0005  . . . . . . . .	L Near	 000005A2 _TEXT	
  inventoryFull??0005  . . . . .	L Near	 000005A6 _TEXT	
  eventDetermined  . . . . . . .	L Near	 000005B1 _TEXT	
  levelUp  . . . . . . . . . . .	L Near	 000005C6 _TEXT	
  notEnough  . . . . . . . . . .	L Near	 0000063D _TEXT	
  leveledUp  . . . . . . . . . .	L Near	 00000656 _TEXT	
  inventory  . . . . . . . . . .	L Near	 0000065C _TEXT	
  DO1??0006  . . . . . . . . . .	L Near	 0000066E _TEXT	
  item0??0007  . . . . . . . . .	L Near	 00000697 _TEXT	
  item1??0007  . . . . . . . . .	L Near	 0000069E _TEXT	
  item2??0007  . . . . . . . . .	L Near	 000006A5 _TEXT	
  item3??0007  . . . . . . . . .	L Near	 000006AC _TEXT	
  default??0007  . . . . . . . .	L Near	 000006B3 _TEXT	
  print??0007  . . . . . . . . .	L Near	 000006B8 _TEXT	
  item0  . . . . . . . . . . . .	L Near	 0000072E _TEXT	
  exit??0009 . . . . . . . . . .	L Near	 0000077F _TEXT	
  removeItem??0009 . . . . . . .	L Near	 00000784 _TEXT	
  equipItem??0009  . . . . . . .	L Near	 0000079D _TEXT	
  infoItem??0009 . . . . . . . .	L Near	 00000823 _TEXT	
  endCase??0009  . . . . . . . .	L Near	 00000890 _TEXT	
  item1  . . . . . . . . . . . .	L Near	 00000895 _TEXT	
  exit??000B . . . . . . . . . .	L Near	 000008E6 _TEXT	
  removeItem??000B . . . . . . .	L Near	 000008EB _TEXT	
  equipItem??000B  . . . . . . .	L Near	 00000904 _TEXT	
  infoItem??000B . . . . . . . .	L Near	 0000098A _TEXT	
  endCase??000B  . . . . . . . .	L Near	 000009F7 _TEXT	
  item2  . . . . . . . . . . . .	L Near	 000009FC _TEXT	
  exit??000D . . . . . . . . . .	L Near	 00000A4D _TEXT	
  removeItem??000D . . . . . . .	L Near	 00000A52 _TEXT	
  equipItem??000D  . . . . . . .	L Near	 00000A6B _TEXT	
  infoItem??000D . . . . . . . .	L Near	 00000AF1 _TEXT	
  endCase??000D  . . . . . . . .	L Near	 00000B5E _TEXT	
  item3  . . . . . . . . . . . .	L Near	 00000B63 _TEXT	
  exit??000F . . . . . . . . . .	L Near	 00000BB4 _TEXT	
  removeItem??000F . . . . . . .	L Near	 00000BB9 _TEXT	
  equipItem??000F  . . . . . . .	L Near	 00000BD2 _TEXT	
  infoItem??000F . . . . . . . .	L Near	 00000C58 _TEXT	
  endCase??000F  . . . . . . . .	L Near	 00000CC5 _TEXT	
  item4  . . . . . . . . . . . .	L Near	 00000CCA _TEXT	
  exit??0011 . . . . . . . . . .	L Near	 00000D1B _TEXT	
  removeItem??0011 . . . . . . .	L Near	 00000D20 _TEXT	
  equipItem??0011  . . . . . . .	L Near	 00000D39 _TEXT	
  infoItem??0011 . . . . . . . .	L Near	 00000DBF _TEXT	
  endCase??0011  . . . . . . . .	L Near	 00000E2C _TEXT	
  item5  . . . . . . . . . . . .	L Near	 00000E31 _TEXT	
  exit??0013 . . . . . . . . . .	L Near	 00000E82 _TEXT	
  removeItem??0013 . . . . . . .	L Near	 00000E87 _TEXT	
  equipItem??0013  . . . . . . .	L Near	 00000EA0 _TEXT	
  infoItem??0013 . . . . . . . .	L Near	 00000F26 _TEXT	
  endCase??0013  . . . . . . . .	L Near	 00000F93 _TEXT	
  item6  . . . . . . . . . . . .	L Near	 00000F98 _TEXT	
  exit??0015 . . . . . . . . . .	L Near	 00000FE9 _TEXT	
  removeItem??0015 . . . . . . .	L Near	 00000FEE _TEXT	
  equipItem??0015  . . . . . . .	L Near	 00001007 _TEXT	
  infoItem??0015 . . . . . . . .	L Near	 0000108D _TEXT	
  endCase??0015  . . . . . . . .	L Near	 000010FA _TEXT	
  item7  . . . . . . . . . . . .	L Near	 000010FF _TEXT	
  exit??0017 . . . . . . . . . .	L Near	 00001150 _TEXT	
  removeItem??0017 . . . . . . .	L Near	 00001155 _TEXT	
  equipItem??0017  . . . . . . .	L Near	 0000116E _TEXT	
  infoItem??0017 . . . . . . . .	L Near	 000011F4 _TEXT	
  endCase??0017  . . . . . . . .	L Near	 00001261 _TEXT	
  item8  . . . . . . . . . . . .	L Near	 00001266 _TEXT	
  exit??0019 . . . . . . . . . .	L Near	 000012B7 _TEXT	
  removeItem??0019 . . . . . . .	L Near	 000012BC _TEXT	
  equipItem??0019  . . . . . . .	L Near	 000012D5 _TEXT	
  infoItem??0019 . . . . . . . .	L Near	 0000135B _TEXT	
  endCase??0019  . . . . . . . .	L Near	 000013C8 _TEXT	
  item9  . . . . . . . . . . . .	L Near	 000013CD _TEXT	
  exit??001B . . . . . . . . . .	L Near	 0000141E _TEXT	
  removeItem??001B . . . . . . .	L Near	 00001423 _TEXT	
  equipItem??001B  . . . . . . .	L Near	 0000143C _TEXT	
  infoItem??001B . . . . . . . .	L Near	 000014C2 _TEXT	
  endCase??001B  . . . . . . . .	L Near	 0000152F _TEXT	
  endInventory . . . . . . . . .	L Near	 00001531 _TEXT	
  dequip . . . . . . . . . . . .	L Near	 0000153B _TEXT	
  notEmpty??001D . . . . . . . .	L Near	 0000154D _TEXT	
  isEmpty??001D  . . . . . . . .	L Near	 00001561 _TEXT	
  inventoryFull??001D  . . . . .	L Near	 000015F5 _TEXT	
  nothingEquipped??001D  . . . .	L Near	 000015F5 _TEXT	
  end_switch . . . . . . . . . .	L Near	 000015F7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
C1 . . . . . . . . . . . . . . .	character  0000002C _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
agilityTitle . . . . . . . . . .	Byte	 000000E6 _DATA	
attackTitle  . . . . . . . . . .	Byte	 000001DC _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 0000048A _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brawnTitle . . . . . . . . . . .	Byte	 000000DD _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
characterSheetTitle  . . . . . .	Byte	 00000084 _DATA	
characterSheet . . . . . . . . .	Byte	 0000042B _DATA	
combatAttributesTitle  . . . . .	Byte	 00000104 _DATA	
combatMenuTitle  . . . . . . . .	Byte	 00000190 _DATA	
combatOptionsMenuTitle . . . . .	Byte	 000001C7 _DATA	
combatTitle  . . . . . . . . . .	Byte	 0000043F _DATA	
command1 . . . . . . . . . . . .	Byte	 00000141 _DATA	
continueCommand  . . . . . . . .	Byte	 00000470 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
damageTitle  . . . . . . . . . .	Byte	 00000122 _DATA	
defaultName  . . . . . . . . . .	Byte	 0000001B _DATA	
defenceTitle . . . . . . . . . .	Byte	 0000012C _DATA	
dequipTitle  . . . . . . . . . .	Byte	 00000465 _DATA	
discardTitle . . . . . . . . . .	Byte	 000003A2 _DATA	
e1 . . . . . . . . . . . . . . .	enemy	 0000016D _DATA	
enemyDamageTitle . . . . . . . .	Byte	 000001B7 _DATA	
enemyDefeatedEvent . . . . . . .	Byte	 00000215 _DATA	
enemyDefeated  . . . . . . . . .	Byte	 0000018F _DATA	
enemyHPTitle . . . . . . . . . .	Byte	 000001AB _DATA	
enemyNameTitle . . . . . . . . .	Byte	 0000019D _DATA	
equipTitle . . . . . . . . . . .	Byte	 000003B0 _DATA	
equippedWeaponTitle  . . . . . .	Byte	 00000137 _DATA	
escapeEvent  . . . . . . . . . .	Byte	 000001F2 _DATA	
escape . . . . . . . . . . . . .	Byte	 0000018D _DATA	
exitTitle  . . . . . . . . . . .	Byte	 00000397 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
expTitle . . . . . . . . . . . .	Byte	 000000BD _DATA	
fleeTitle  . . . . . . . . . . .	Byte	 000001E8 _DATA	
fortuneTitle . . . . . . . . . .	Byte	 000000F9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hpTitle  . . . . . . . . . . . .	Byte	 0000011C _DATA	
i10  . . . . . . . . . . . . . .	item	 00000246 _DATA	
i1 . . . . . . . . . . . . . . .	item	 00000342 _DATA	
i2 . . . . . . . . . . . . . . .	item	 00000326 _DATA	
i3 . . . . . . . . . . . . . . .	item	 0000030A _DATA	
i4 . . . . . . . . . . . . . . .	item	 000002EE _DATA	
i5 . . . . . . . . . . . . . . .	item	 000002D2 _DATA	
i6 . . . . . . . . . . . . . . .	item	 000002B6 _DATA	
i7 . . . . . . . . . . . . . . .	item	 0000029A _DATA	
i8 . . . . . . . . . . . . . . .	item	 0000027E _DATA	
i9 . . . . . . . . . . . . . . .	item	 00000262 _DATA	
infoTitle  . . . . . . . . . . .	Byte	 000003BC _DATA	
input_state  . . . . . . . . . .	DWord	 00000028 _DATA	
inventoryTitle . . . . . . . . .	Byte	 00000457 _DATA	
itemBuyValueTitle  . . . . . . .	Byte	 000003E8 _DATA	
itemCombatValueTitle . . . . . .	Byte	 000003F6 _DATA	
itemName1  . . . . . . . . . . .	Byte	 00000000 _DATA	
itemName2  . . . . . . . . . . .	Byte	 00000007 _DATA	
itemName3  . . . . . . . . . . .	Byte	 0000000D _DATA	
itemName4  . . . . . . . . . . .	Byte	 00000015 _DATA	
itemNameTitle  . . . . . . . . .	Byte	 000003CB _DATA	
itemSellValueTitle . . . . . . .	Byte	 000003D9 _DATA	
itemType . . . . . . . . . . . .	Byte	 00000406 _DATA	
levelTitle . . . . . . . . . . .	Byte	 000000B4 _DATA	
levelUpTitle . . . . . . . . . .	Byte	 0000044A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mainMenuTitle  . . . . . . . . .	Byte	 00000416 _DATA	
mindTitle  . . . . . . . . . . .	Byte	 000000F1 _DATA	
nameTitle  . . . . . . . . . . .	Byte	 000000AB _DATA	
notEnoughResponse  . . . . . . .	Byte	 0000022E _DATA	
playerDefeatedEvent  . . . . . .	Byte	 00000201 _DATA	
playerDefeated . . . . . . . . .	Byte	 0000018E _DATA	
primaryAttributesTitle . . . . .	Byte	 000000C4 _DATA	
quitTitle  . . . . . . . . . . .	Byte	 00000422 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectItemTitle  . . . . . . . .	Byte	 00000382 _DATA	
t1 . . . . . . . . . . . . . . .	item	 0000035E _DATA	
tempString . . . . . . . . . . .	Byte	 0000037A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPosTitle  . . . . . . . . . . .	Byte	 00000099 _DATA	
yPosTitle  . . . . . . . . . . .	Byte	 000000A2 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
