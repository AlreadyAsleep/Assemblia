Microsoft (R) Macro Assembler Version 14.13.26129.0	    03/27/18 21:58:47
main.asm						     Page 1 - 1


				;// Main.asm - The file that contains the main game loop and launcher
				;// Authors: Thomas and Ben
				;// Since: 3/16/18

				.386
				.model stdcall, flat
				.stack 4096
				include irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				include characterHeader.inc
			      C ;// structure of character object
 00000038		      C character struct 
			      C 
 00000000  00000000	      C xPos           DWORD 0
 00000004  00000000	      C yPos           DWORD 0
 00000008  00000008 [	      C characterName  db    8 dup (?)
	    00
	   ]
 0000000B  00000000	      C level          DWORD 0
			      C 
 0000000F  00000001	      C brawn          DWORD 1 ;//Primary Attributes
 00000013  00000001	      C agility        DWORD 1
 00000017  00000001	      C mind           DWORD 1
 0000001B  00000001	      C fortune        DWORD 1
			      C 
 0000001F  00000000	      C hpMax          DWORD 0
 00000023  00000000	      C hp             DWORD 0
 00000027  00000000	      C damageMin      DWORD 0
 0000002B  00000000	      C damageMax      DWORD 0
 0000002F  00000000	      C defence        DWORD 0
			      C 
			      C 
			      C character ends
			      C 
				include enemyHeader.inc
			      C ;// structure of enemy object
 0000001C		      C enemy struct 
			      C 
 00000000  00000008 [	      C enemyName  db    8 dup (?)
	    00
	   ]
			      C 
 07230003  00000000	      C hpMax          DWORD 0
 07230007  00000000	      C hp             DWORD 0
 0723000B  00000000	      C damageMin      DWORD 0
 0723000F  00000000	      C damageMax      DWORD 0
 07230013  00000000	      C defence        DWORD 0
			      C 
			      C enemy ends
			      C 

 00000000			.data

				include input_data.inc
 00000000 00000000	      C input_state dword ?
			      C 
				include get_input.inc
			      C _get_input macro
			      C 
			      C 	Local L
			      C 	call ReadDec
			      C 
			      C 	mov ecx, eax
			      C 
			      C 
			      C endm
			      C 

				include character.inc
			      C 
 00000004 00000000	      C C1 character {0,0,"Name",1,1,1,1,1,5,5,1,3,0}
	   00000000 4E 61
	   6D 65
	   00000004 [
	    00
	   ] 00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000005
	   00000005
	   00000001
	   00000003
	   00000000
			      C 
 0000003C 2D 2D 43 68 61      C characterSheetTitle byte "--CharacterSheet--"       , 13, 10, 0
	   72 61 63 74 65
	   72 53 68 65 65
	   74 2D 2D 0D 0A
	   00
 00000051 78 50 6F 73 3A      C xPosTitle           byte "xPos: "                   , 0 , 10, 0
	   20 00 0A 00
 0000005A 79 50 6F 73 3A      C yPosTitle           byte "yPos: "                   , 0 , 10, 0
	   20 00 0A 00
 00000063 4E 61 6D 65 3A      C nameTitle           byte "Name: "                   , 0 , 10, 0
	   20 00 0A 00
 0000006C 4C 65 76 65 6C      C levelTitle          byte "Level:"                   , 0 , 10, 0
	   3A 00 0A 00
			      C 
 00000075 2D 2D 50 72 69      C primaryAttributesTitle byte "--Primary Attributes--", 13, 10, 0
	   6D 61 72 79 20
	   41 74 74 72 69
	   62 75 74 65 73
	   2D 2D 0D 0A 00
 0000008E 42 72 61 77 6E      C brawnTitle          byte "Brawn:"                   , 0 , 10, 0
	   3A 00 0A 00
 00000097 41 67 69 6C 69      C agilityTitle        byte "Agility:"                 , 0 , 10, 0
	   74 79 3A 00 0A
	   00
 000000A2 4D 69 6E 64 3A      C mindTitle           byte "Mind:"                    , 0 , 10, 0
	   00 0A 00
 000000AA 46 6F 72 74 75      C fortuneTitle        byte "Fortune:"                 , 0 , 10, 0
	   6E 65 3A 00 0A
	   00
			      C 
 000000B5 2D 2D 43 6F 6D      C combatAttributesTitle byte "--Combat Attributes--"  , 13, 10, 0
	   62 61 74 20 41
	   74 74 72 69 62
	   75 74 65 73 2D
	   2D 0D 0A 00
 000000CD 48 50 3A 00 0A      C hpTitle             byte "HP:"                      , 0 , 10, 0
	   00
 000000D3 44 61 6D 61 67      C damageTitle         byte "Damage:"                  , 0 , 10, 0
	   65 3A 00 0A 00
 000000DD 44 65 66 65 6E      C defenceTitle        byte "Defence:"                 , 0 , 10, 0
	   63 65 3A 00 0A
	   00
			      C 
 000000E8 45 6E 74 65 72      C command1 byte "Enter character name. Up to 8 Characters"  , 13, 10, 0
	   20 63 68 61 72
	   61 63 74 65 72
	   20 6E 61 6D 65
	   2E 20 55 70 20
	   74 6F 20 38 20
	   43 68 61 72 61
	   63 74 65 72 73
	   0D 0A 00
			      C 
			      C mPrintCharacterSheet MACRO ;//prints character sheet 
			      C pushAD
			      C 
			      C mov edx, offset characterSheetTitle ;//prints a header
			      C invoke WriteString
			      C 
			      C mov edx, offset xPosTitle ;// prints x position
			      C invoke WriteString
			      C mov eax, c1.xPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset yPosTitle ;// prints y position
			      C invoke WriteString
			      C mov eax, c1.yPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset nameTitle ;// prints character name
			      C invoke WriteString
			      C mov edx, offset c1.CharacterName
			      C Call WriteString
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset levelTitle ;//prints character level
			      C invoke WriteString
			      C mov eax, c1.level
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset primaryAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset brawnTitle ;//prints character brawn
			      C invoke WriteString
			      C mov eax, c1.brawn
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset agilityTitle ;//prints character agility
			      C invoke WriteString
			      C mov eax, c1.agility
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset mindTitle ;//prints character mind
			      C invoke WriteString
			      C mov eax, c1.mind
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset fortuneTitle ;//prints character fortune
			      C invoke WriteString
			      C mov eax, c1.fortune
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset hpTitle ;//prints character hp
			      C invoke WriteString
			      C mov eax, c1.hp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.hpMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset damageTitle ;//prints character damage
			      C invoke WriteString
			      C mov eax, c1.damageMin
			      C call WriteDec
			      C mov eax,'-'
			      C call WriteChar
			      C mov eax, c1.damageMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset defenceTitle ;//prints character defence
			      C invoke WriteString
			      C mov eax, c1.defence
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C 
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C popAD
			      C endm
			      C 
			      C mInitializeCharacter MACRO ;//prints character sheet
			      C pushAD
			      C 
			      C mov edx, offset command1 ;//Player inputs character name
			      C invoke WriteString
			      C mov edx, offset c1.characterName
			      C mov ecx, SIZEOF c1.characterName
			      C call ReadString
			      C 
			      C mov c1.brawn  , 5 ;// sets primary attributes
			      C mov c1.agility, 5
			      C mov c1.mind   , 5
			      C mov c1.fortune, 5
			      C 
			      C mov eax, c1.brawn ;// maxHP & hp initiliaze = brawn*2
			      C sal eax,1 ;// multiply by 2
			      C mov c1.hpMax,eax
			      C mov c1.hp,eax
			      C 
			      C mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
			      C sar eax,1;//divide by 2
			      C mov c1.damageMin,eax
			      C mov ebx,c1.agility
			      C sar ebx,2;//divide by 4
			      C add eax,ebx
			      C mov c1.damageMax,eax
			      C 
			      C popAD
			      C endm
			      C 
				include enemy.inc
 00000113 42 6F 67 6C 69      C e1 enemy{"Boglin",1,1,1,1}
	   6E
	   00000002 [
	    00
	   ] 00000001
	   00000001
	   00000001
	   00000001
	   00000000
			      C 
			      C 
			      C mInitializeEnemy MACRO
			      C pushAD
			      C 
			      C mov ebx, c1.level ;//initialize enemy hp
			      C mov eax,10
			      C call RandomRange
			      C inc eax
			      C mul ebx
			      C mov e1.hpMax,eax
			      C mov e1.hp,eax
			      C 
			      C mov eax, 5 ;//initialize enemy damage
			      C call RandomRange
			      C inc eax
			      C mul ebx
			      C mov e1.damageMin,eax
			      C mov ecx,eax
			      C mov eax,2
			      C call RandomRange
			      C inc eax
			      C add eax,ecx
			      C mov e1.damageMax,eax
			      C 
			      C popAD
			      C endm
			      C 
				include combat.inc
 0000012F 00		      C escape         byte 0
 00000130 00		      C playerDefeated byte 0
 00000131 00		      C enemyDefeated  byte 0
			      C 
 00000132 2D 2D 43 4F 4D      C combatMenuTitle  byte "--COMBAT--"   , 13, 10, 0
	   42 41 54 2D 2D
	   0D 0A 00
 0000013F 45 6E 65 6D 79      C enemyNameTitle   byte "Enemy Name:"  , 0 , 10, 0
	   20 4E 61 6D 65
	   3A 00 0A 00
 0000014D 45 6E 65 6D 79      C enemyHPTitle     byte "Enemy HP:"    , 0 , 10, 0
	   20 48 50 3A 00
	   0A 00
 00000159 45 6E 65 6D 79      C enemyDamageTitle byte "Enemy Damage:", 0 , 10, 0
	   20 44 61 6D 61
	   67 65 3A 00 0A
	   00
			      C 
 00000169 2D 2D 43 6F 6D      C combatOptionsMenuTitle byte "--Combat Options--", 13, 10, 0
	   62 61 74 20 4F
	   70 74 69 6F 6E
	   73 2D 2D 0D 0A
	   00
 0000017E 30 3A 20 41 74      C attackTitle            byte "0: Attack"         , 13, 10, 0
	   74 61 63 6B 0D
	   0A 00
 0000018A 31 3A 20 46 6C      C fleeTitle              byte "1: Flee"           , 13, 10, 0
	   65 65 0D 0A 00
			      C 
			      C mCombat MACRO
			      C Local L
			      C pushAD
			      C 
			      C mInitializeEnemy
			      C 
			      C mov escape        ,0 ;//combat end conditions
			      C mov playerDefeated,0
			      C mov enemyDefeated ,0
			      C 
			      C WHILE_COMBAT&L:    ;//disgusting triple & while statement
			      C cmp escape,0       ;//while &
			      C je AND_COMBAT1&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT1&L: cmp playerDefeated,0
			      C je AND_COMBAT2&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT2&L: cmp enemyDefeated,0
			      C je AND_COMBAT_TRUE&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT_TRUE&L:
			      C 	
			      C 	mov edx, offset combatMenuTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyNameTitle ;//prints enemy name
			      C 	invoke WriteString
			      C 	mov edx, offset e1.enemyName
			      C 	invoke WriteString
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyHpTitle ;//prints enemy hp
			      C 	invoke WriteString
			      C 	mov eax, e1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, e1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyDamageTitle ;//prints enemy damage
			      C 	invoke WriteString
			      C 	mov eax, e1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, e1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatOptionsMenuTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset attackTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset fleeTitle
			      C 	invoke WriteString
			      C 
			      C 	_get_input
			      C 	
			      C 	call Clrscr
			      C 
			      C 	
			      C 		cmp ecx, 0 ;//switch
			      C 		je attack
			      C 		cmp ecx, 1
			      C 		je flee
			      C 	
			      C 		jmp end_switch&L
			      C 
			      C 		attack:
			      C 			dec e1.hp
			      C 			jmp end_switch&L
			      C 		flee:
			      C 			mov escape,1
			      C 			
			      C 		end_switch&L:
			      C 		jmp WHILE_COMBAT&L;//default
			      C 
			      C 
			      C 
			      C 
			      C AND_FALSE_COMBAT&L:
			      C popAD
			      C endm
			      C 

				WriteDec proto
				ReadDec proto
				ExitProcess proto, dwExitCode:dword

 00000194 4D 61 69 6E 20	mainMenuTitle       byte "Main Menu"        , 13, 10, 0
	   4D 65 6E 75 0D
	   0A 00
 000001A0 30 20 51 75 69	quitTitle           byte "0 Quit"           , 13, 10, 0
	   74 0D 0A 00
 000001A9 31 20 43 68 61	characterSheet      byte "1 Character Sheet", 13, 10, 0
	   72 61 63 74 65
	   72 20 53 68 65
	   65 74 0D 0A 00
 000001BD 32 20 43 6F 6D	combatTitle         byte "2 Combat"         , 13, 10, 0
	   62 61 74 0D 0A
	   00



 000001C8 20 0D 0A 00		blank byte " ", 13, 10, 0




 00000000			.code

 00000000			main proc

				mInitializeCharacter
 00000000  60		     1	pushAD
 00000001  BA 000000E8 R     1	mov edx, offset command1 ;//Player inputs character name
 00000006  E8 00000000 E   *	    call   WriteString
 0000000B  BA 0000000C R     1	mov edx, offset c1.characterName
 00000010  B9 00000008	     1	mov ecx, SIZEOF c1.characterName
 00000015  E8 00000000 E     1	call ReadString
 0000001A  C7 05 00000018 R  1	mov c1.brawn  , 5 ;// sets primary attributes
	   00000005
 00000024  C7 05 0000001C R  1	mov c1.agility, 5
	   00000005
 0000002E  C7 05 00000020 R  1	mov c1.mind   , 5
	   00000005
 00000038  C7 05 00000024 R  1	mov c1.fortune, 5
	   00000005
 00000042  A1 00000018 R     1	mov eax, c1.brawn ;// maxHP & hp initiliaze = brawn*2
 00000047  D1 E0	     1	sal eax,1 ;// multiply by 2
 00000049  A3 00000028 R     1	mov c1.hpMax,eax
 0000004E  A3 0000002C R     1	mov c1.hp,eax
 00000053  A1 00000018 R     1	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000058  D1 F8	     1	sar eax,1;//divide by 2
 0000005A  A3 00000030 R     1	mov c1.damageMin,eax
 0000005F  8B 1D 0000001C R  1	mov ebx,c1.agility
 00000065  C1 FB 02	     1	sar ebx,2;//divide by 4
 00000068  03 C3	     1	add eax,ebx
 0000006A  A3 00000034 R     1	mov c1.damageMax,eax
 0000006F  61		     1	popAD

 00000070  B9 00000001		mov ecx, 1
 00000075			while_main:						;//while( ecx != 0 )

					
 00000075  BA 00000194 R		mov edx, offset mainMenuTitle ;//Main Menu Display Start
 0000007A  E8 00000000 E		call WriteString
 0000007F  BA 000001A0 R		mov edx, offset quitTitle 
 00000084  E8 00000000 E		call WriteString
 00000089  BA 000001A9 R		mov edx, offset characterSheet
 0000008E  E8 00000000 E		call WriteString    
 00000093  BA 000001BD R		mov edx, offset combatTitle
 00000098  E8 00000000 E		call WriteString     

					_get_input
 0000009D  E8 00000000 E     1		call ReadDec
 000000A2  8B C8	     1		mov ecx, eax
					
 000000A4  E8 00000000 E		call Clrscr

 000000A9  83 F9 00			cmp ecx, 0 ;//switch
 000000AC  0F 84 00000317		je endwhile_main
 000000B2  83 F9 01			cmp ecx, 1
 000000B5  74 0E			je character_sheet
 000000B7  83 F9 02			cmp ecx, 2
 000000BA  0F 84 000001A6		je combat
 000000C0  E9 000002FF			jmp end_switch

 000000C5				character_sheet:
						mPrintCharacterSheet
 000000C5  60		     1	pushAD
 000000C6  BA 0000003C R     1	mov edx, offset characterSheetTitle ;//prints a header
 000000CB  E8 00000000 E   *	    call   WriteString
 000000D0  BA 00000051 R     1	mov edx, offset xPosTitle ;// prints x position
 000000D5  E8 00000000 E   *	    call   WriteString
 000000DA  A1 00000004 R     1	mov eax, c1.xPos
 000000DF  E8 00000000 E     1	call WriteDec
 000000E4  BA 000001C8 R     1	mov edx, offset blank
 000000E9  E8 00000000 E   *	    call   WriteString
 000000EE  BA 0000005A R     1	mov edx, offset yPosTitle ;// prints y position
 000000F3  E8 00000000 E   *	    call   WriteString
 000000F8  A1 00000008 R     1	mov eax, c1.yPos
 000000FD  E8 00000000 E     1	call WriteDec
 00000102  BA 000001C8 R     1	mov edx, offset blank
 00000107  E8 00000000 E   *	    call   WriteString
 0000010C  BA 00000063 R     1	mov edx, offset nameTitle ;// prints character name
 00000111  E8 00000000 E   *	    call   WriteString
 00000116  BA 0000000C R     1	mov edx, offset c1.CharacterName
 0000011B  E8 00000000 E     1	Call WriteString
 00000120  BA 000001C8 R     1	mov edx, offset blank
 00000125  E8 00000000 E   *	    call   WriteString
 0000012A  BA 0000006C R     1	mov edx, offset levelTitle ;//prints character level
 0000012F  E8 00000000 E   *	    call   WriteString
 00000134  A1 00000014 R     1	mov eax, c1.level
 00000139  E8 00000000 E     1	call WriteDec
 0000013E  BA 000001C8 R     1	mov edx, offset blank
 00000143  E8 00000000 E   *	    call   WriteString
 00000148  BA 00000075 R     1	mov edx, offset primaryAttributesTitle ;//prints primary attributes header
 0000014D  E8 00000000 E   *	    call   WriteString
 00000152  BA 0000008E R     1	mov edx, offset brawnTitle ;//prints character brawn
 00000157  E8 00000000 E   *	    call   WriteString
 0000015C  A1 00000018 R     1	mov eax, c1.brawn
 00000161  E8 00000000 E     1	call WriteDec
 00000166  BA 000001C8 R     1	mov edx, offset blank
 0000016B  E8 00000000 E   *	    call   WriteString
 00000170  BA 00000097 R     1	mov edx, offset agilityTitle ;//prints character agility
 00000175  E8 00000000 E   *	    call   WriteString
 0000017A  A1 0000001C R     1	mov eax, c1.agility
 0000017F  E8 00000000 E     1	call WriteDec
 00000184  BA 000001C8 R     1	mov edx, offset blank
 00000189  E8 00000000 E   *	    call   WriteString
 0000018E  BA 000000A2 R     1	mov edx, offset mindTitle ;//prints character mind
 00000193  E8 00000000 E   *	    call   WriteString
 00000198  A1 00000020 R     1	mov eax, c1.mind
 0000019D  E8 00000000 E     1	call WriteDec
 000001A2  BA 000001C8 R     1	mov edx, offset blank
 000001A7  E8 00000000 E   *	    call   WriteString
 000001AC  BA 000000AA R     1	mov edx, offset fortuneTitle ;//prints character fortune
 000001B1  E8 00000000 E   *	    call   WriteString
 000001B6  A1 00000024 R     1	mov eax, c1.fortune
 000001BB  E8 00000000 E     1	call WriteDec
 000001C0  BA 000001C8 R     1	mov edx, offset blank
 000001C5  E8 00000000 E   *	    call   WriteString
 000001CA  BA 000000B5 R     1	mov edx, offset combatAttributesTitle ;//prints primary attributes header
 000001CF  E8 00000000 E   *	    call   WriteString
 000001D4  BA 000000CD R     1	mov edx, offset hpTitle ;//prints character hp
 000001D9  E8 00000000 E   *	    call   WriteString
 000001DE  A1 0000002C R     1	mov eax, c1.hp
 000001E3  E8 00000000 E     1	call WriteDec
 000001E8  B8 0000002F	     1	mov eax,'/'
 000001ED  E8 00000000 E     1	call WriteChar
 000001F2  A1 00000028 R     1	mov eax, c1.hpMax
 000001F7  E8 00000000 E     1	call WriteDec
 000001FC  BA 000001C8 R     1	mov edx, offset blank
 00000201  E8 00000000 E   *	    call   WriteString
 00000206  BA 000000D3 R     1	mov edx, offset damageTitle ;//prints character damage
 0000020B  E8 00000000 E   *	    call   WriteString
 00000210  A1 00000030 R     1	mov eax, c1.damageMin
 00000215  E8 00000000 E     1	call WriteDec
 0000021A  B8 0000002D	     1	mov eax,'-'
 0000021F  E8 00000000 E     1	call WriteChar
 00000224  A1 00000034 R     1	mov eax, c1.damageMax
 00000229  E8 00000000 E     1	call WriteDec
 0000022E  BA 000001C8 R     1	mov edx, offset blank
 00000233  E8 00000000 E   *	    call   WriteString
 00000238  BA 000000DD R     1	mov edx, offset defenceTitle ;//prints character defence
 0000023D  E8 00000000 E   *	    call   WriteString
 00000242  A1 00000038 R     1	mov eax, c1.defence
 00000247  E8 00000000 E     1	call WriteDec
 0000024C  BA 000001C8 R     1	mov edx, offset blank
 00000251  E8 00000000 E   *	    call   WriteString
 00000256  BA 000001C8 R     1	mov edx, offset blank
 0000025B  E8 00000000 E   *	    call   WriteString
 00000260  61		     1	popAD
 00000261  E9 0000015E				jmp end_switch
 00000266				combat:
						mCombat
 00000266  60		     1	pushAD
 00000267  60		     2	pushAD
 00000268  8B 1D 00000014 R  2	mov ebx, c1.level ;//initialize enemy hp
 0000026E  B8 0000000A	     2	mov eax,10
 00000273  E8 00000000 E     2	call RandomRange
 00000278  40		     2	inc eax
 00000279  F7 E3	     2	mul ebx
 0000027B  A3 0000011B R     2	mov e1.hpMax,eax
 00000280  A3 0000011F R     2	mov e1.hp,eax
 00000285  B8 00000005	     2	mov eax, 5 ;//initialize enemy damage
 0000028A  E8 00000000 E     2	call RandomRange
 0000028F  40		     2	inc eax
 00000290  F7 E3	     2	mul ebx
 00000292  A3 00000123 R     2	mov e1.damageMin,eax
 00000297  8B C8	     2	mov ecx,eax
 00000299  B8 00000002	     2	mov eax,2
 0000029E  E8 00000000 E     2	call RandomRange
 000002A3  40		     2	inc eax
 000002A4  03 C1	     2	add eax,ecx
 000002A6  A3 00000127 R     2	mov e1.damageMax,eax
 000002AB  61		     2	popAD
 000002AC  C6 05 0000012F R  1	mov escape        ,0 ;//combat end conditions
	   00
 000002B3  C6 05 00000130 R  1	mov playerDefeated,0
	   00
 000002BA  C6 05 00000131 R  1	mov enemyDefeated ,0
	   00
 000002C1		     1	WHILE_COMBAT??0001:    ;//disgusting triple & while statement
 000002C1  80 3D 0000012F R  1	cmp escape,0       ;//while &
	   00
 000002C8  74 05	     1	je AND_COMBAT1??0001
 000002CA  E9 000000F2	     1	jmp AND_FALSE_COMBAT??0001
 000002CF  80 3D 00000130 R  1	AND_COMBAT1??0001: cmp playerDefeated,0
	   00
 000002D6  74 05	     1	je AND_COMBAT2??0001
 000002D8  E9 000000E4	     1	jmp AND_FALSE_COMBAT??0001
 000002DD  80 3D 00000131 R  1	AND_COMBAT2??0001: cmp enemyDefeated,0
	   00
 000002E4  74 05	     1	je AND_COMBAT_TRUE??0001
 000002E6  E9 000000D6	     1	jmp AND_FALSE_COMBAT??0001
 000002EB		     1	AND_COMBAT_TRUE??0001:
 000002EB  BA 00000132 R     1		mov edx, offset combatMenuTitle
 000002F0  E8 00000000 E   *	    call   WriteString
 000002F5  BA 0000013F R     1		mov edx, offset enemyNameTitle ;//prints enemy name
 000002FA  E8 00000000 E   *	    call   WriteString
 000002FF  BA 00000113 R     1		mov edx, offset e1.enemyName
 00000304  E8 00000000 E   *	    call   WriteString
 00000309  BA 000001C8 R     1		mov edx, offset blank
 0000030E  E8 00000000 E   *	    call   WriteString
 00000313  BA 0000014D R     1		mov edx, offset enemyHpTitle ;//prints enemy hp
 00000318  E8 00000000 E   *	    call   WriteString
 0000031D  A1 0000011F R     1		mov eax, e1.hp
 00000322  E8 00000000 E     1		call WriteDec
 00000327  B8 0000002F	     1		mov eax,'/'
 0000032C  E8 00000000 E     1		call WriteChar
 00000331  A1 0000011B R     1		mov eax, e1.hpMax
 00000336  E8 00000000 E     1		call WriteDec
 0000033B  BA 000001C8 R     1		mov edx, offset blank
 00000340  E8 00000000 E   *	    call   WriteString
 00000345  BA 00000159 R     1		mov edx, offset enemyDamageTitle ;//prints enemy damage
 0000034A  E8 00000000 E   *	    call   WriteString
 0000034F  A1 00000123 R     1		mov eax, e1.damageMin
 00000354  E8 00000000 E     1		call WriteDec
 00000359  B8 0000002D	     1		mov eax,'-'
 0000035E  E8 00000000 E     1		call WriteChar
 00000363  A1 00000127 R     1		mov eax, e1.damageMax
 00000368  E8 00000000 E     1		call WriteDec
 0000036D  BA 000001C8 R     1		mov edx, offset blank
 00000372  E8 00000000 E   *	    call   WriteString
 00000377  BA 00000169 R     1		mov edx, offset combatOptionsMenuTitle
 0000037C  E8 00000000 E   *	    call   WriteString
 00000381  BA 0000017E R     1		mov edx,offset attackTitle
 00000386  E8 00000000 E   *	    call   WriteString
 0000038B  BA 0000018A R     1		mov edx,offset fleeTitle
 00000390  E8 00000000 E   *	    call   WriteString
 00000395  E8 00000000 E     2		call ReadDec
 0000039A  8B C8	     2		mov ecx, eax
 0000039C  E8 00000000 E     1		call Clrscr
 000003A1  83 F9 00	     1			cmp ecx, 0 ;//switch
 000003A4  74 07	     1			je attack
 000003A6  83 F9 01	     1			cmp ecx, 1
 000003A9  74 0A	     1			je flee
 000003AB  EB 0F	     1			jmp end_switch??0001
 000003AD		     1			attack:
 000003AD  FF 0D 0000011F R  1				dec e1.hp
 000003B3  EB 07	     1				jmp end_switch??0001
 000003B5		     1			flee:
 000003B5  C6 05 0000012F R  1				mov escape,1
	   01
 000003BC		     1			end_switch??0001:
 000003BC  E9 FFFFFF00	     1			jmp WHILE_COMBAT??0001;//default
 000003C1		     1	AND_FALSE_COMBAT??0001:
 000003C1  61		     1	popAD
 000003C2  EB 00				jmp end_switch

 000003C4				end_switch:
 000003C4  E9 FFFFFCAC			jmp while_main ;//default


 000003C9			endwhile_main:
					
					invoke ExitProcess, 0
 000003C9  6A 00	   *	    push   +000000000h
 000003CB  E8 00000000 E   *	    call   ExitProcess

 000003D0			main endp

				end main
Microsoft (R) Macro Assembler Version 14.13.26129.0	    03/27/18 21:58:47
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

_get_input . . . . . . . . . . .	Proc
mCombat  . . . . . . . . . . . .	Proc
mInitializeCharacter . . . . . .	Proc
mInitializeEnemy . . . . . . . .	Proc
mPrintCharacterSheet . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
character  . . . . . . . . . . .	 00000038
  xPos . . . . . . . . . . . . .	 00000000	 DWord
  yPos . . . . . . . . . . . . .	 00000004	 DWord
  characterName  . . . . . . . .	 00000008	 Byte
  level  . . . . . . . . . . . .	 00000010	 DWord
  brawn  . . . . . . . . . . . .	 00000014	 DWord
  agility  . . . . . . . . . . .	 00000018	 DWord
  mind . . . . . . . . . . . . .	 0000001C	 DWord
  fortune  . . . . . . . . . . .	 00000020	 DWord
  hpMax  . . . . . . . . . . . .	 00000024	 DWord
  hp . . . . . . . . . . . . . .	 00000028	 DWord
  damageMin  . . . . . . . . . .	 0000002C	 DWord
  damageMax  . . . . . . . . . .	 00000030	 DWord
  defence  . . . . . . . . . . .	 00000034	 DWord
enemy  . . . . . . . . . . . . .	 0000001C
  enemyName  . . . . . . . . . .	 00000000	 Byte
  hpMax  . . . . . . . . . . . .	 00000008	 DWord
  hp . . . . . . . . . . . . . .	 0000000C	 DWord
  damageMin  . . . . . . . . . .	 00000010	 DWord
  damageMax  . . . . . . . . . .	 00000014	 DWord
  defence  . . . . . . . . . . .	 00000018	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001CC DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003D0 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000003D0 Public STDCALL
  while_main . . . . . . . . . .	L Near	 00000075 _TEXT	
  character_sheet  . . . . . . .	L Near	 000000C5 _TEXT	
  combat . . . . . . . . . . . .	L Near	 00000266 _TEXT	
  WHILE_COMBAT??0001 . . . . . .	L Near	 000002C1 _TEXT	
  AND_COMBAT1??0001  . . . . . .	L Near	 000002CF _TEXT	
  AND_COMBAT2??0001  . . . . . .	L Near	 000002DD _TEXT	
  AND_COMBAT_TRUE??0001  . . . .	L Near	 000002EB _TEXT	
  attack . . . . . . . . . . . .	L Near	 000003AD _TEXT	
  flee . . . . . . . . . . . . .	L Near	 000003B5 _TEXT	
  end_switch??0001 . . . . . . .	L Near	 000003BC _TEXT	
  AND_FALSE_COMBAT??0001 . . . .	L Near	 000003C1 _TEXT	
  end_switch . . . . . . . . . .	L Near	 000003C4 _TEXT	
  endwhile_main  . . . . . . . .	L Near	 000003C9 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
C1 . . . . . . . . . . . . . . .	character  00000004 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
agilityTitle . . . . . . . . . .	Byte	 00000097 _DATA	
attackTitle  . . . . . . . . . .	Byte	 0000017E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 000001C8 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brawnTitle . . . . . . . . . . .	Byte	 0000008E _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
characterSheetTitle  . . . . . .	Byte	 0000003C _DATA	
characterSheet . . . . . . . . .	Byte	 000001A9 _DATA	
combatAttributesTitle  . . . . .	Byte	 000000B5 _DATA	
combatMenuTitle  . . . . . . . .	Byte	 00000132 _DATA	
combatOptionsMenuTitle . . . . .	Byte	 00000169 _DATA	
combatTitle  . . . . . . . . . .	Byte	 000001BD _DATA	
command1 . . . . . . . . . . . .	Byte	 000000E8 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
damageTitle  . . . . . . . . . .	Byte	 000000D3 _DATA	
defenceTitle . . . . . . . . . .	Byte	 000000DD _DATA	
e1 . . . . . . . . . . . . . . .	enemy	 00000113 _DATA	
enemyDamageTitle . . . . . . . .	Byte	 00000159 _DATA	
enemyDefeated  . . . . . . . . .	Byte	 00000131 _DATA	
enemyHPTitle . . . . . . . . . .	Byte	 0000014D _DATA	
enemyNameTitle . . . . . . . . .	Byte	 0000013F _DATA	
escape . . . . . . . . . . . . .	Byte	 0000012F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fleeTitle  . . . . . . . . . . .	Byte	 0000018A _DATA	
fortuneTitle . . . . . . . . . .	Byte	 000000AA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hpTitle  . . . . . . . . . . . .	Byte	 000000CD _DATA	
input_state  . . . . . . . . . .	DWord	 00000000 _DATA	
levelTitle . . . . . . . . . . .	Byte	 0000006C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mainMenuTitle  . . . . . . . . .	Byte	 00000194 _DATA	
mindTitle  . . . . . . . . . . .	Byte	 000000A2 _DATA	
nameTitle  . . . . . . . . . . .	Byte	 00000063 _DATA	
playerDefeated . . . . . . . . .	Byte	 00000130 _DATA	
primaryAttributesTitle . . . . .	Byte	 00000075 _DATA	
quitTitle  . . . . . . . . . . .	Byte	 000001A0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPosTitle  . . . . . . . . . . .	Byte	 00000051 _DATA	
yPosTitle  . . . . . . . . . . .	Byte	 0000005A _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
