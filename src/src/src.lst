Microsoft (R) Macro Assembler Version 14.13.26129.0	    03/28/18 20:48:20
main.asm						     Page 1 - 1


				;// Main.asm - The file that contains the main game loop and launcher
				;// Authors: Thomas and Ben
				;// Since: 3/16/18

				.386
				.model stdcall, flat
				.stack 4096
				include irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				include characterHeader.inc
			      C ;// structure of character object
 00000040		      C character struct 
			      C 
 00000000  00000000	      C xPos           DWORD 0
 00000004  00000000	      C yPos           DWORD 0
 00000008  00000008 [	      C characterName  db    8 dup (?)
	    00
	   ]
-17FFFFF5  00000000	      C level          DWORD 0
-17FFFFF1  00000000	      C exp            DWORD 0
-17FFFFED  00000000	      C expToNext      DWORD 0
			      C 
-17FFFFE9  00000001	      C brawn          DWORD 1 ;//Primary Attributes
-17FFFFE5  00000001	      C agility        DWORD 1
-17FFFFE1  00000001	      C mind           DWORD 1
-17FFFFDD  00000001	      C fortune        DWORD 1
			      C 
-17FFFFD9  00000000	      C hpMax          DWORD 0
-17FFFFD5  00000000	      C hp             DWORD 0
-17FFFFD1  00000000	      C damageMin      DWORD 0
-17FFFFCD  00000000	      C damageMax      DWORD 0
-17FFFFC9  00000000	      C defence        DWORD 0
			      C 
			      C 
			      C 
			      C 
			      C character ends
			      C 
				include enemyHeader.inc
			      C ;// structure of enemy object
 00000020		      C enemy struct 
			      C 
 00000000  00000008 [	      C enemyName  db    8 dup (?)
	    00
	   ]
			      C 
 07230003  00000000	      C hpMax          DWORD 0
 07230007  00000000	      C hp             DWORD 0
 0723000B  00000000	      C damageMin      DWORD 0
 0723000F  00000000	      C damageMax      DWORD 0
 07230013  00000000	      C defence        DWORD 0
 07230017  00000000	      C expReward      DWORD 0
			      C 
			      C enemy ends
			      C 

 00000000			.data

				include input_data.inc
 00000000 00000000	      C input_state dword ?
			      C 
				include get_input.inc
			      C _get_input macro
			      C 
			      C 	Local L
			      C 	call ReadDec
			      C 
			      C 	mov ecx, eax
			      C 
			      C 
			      C endm
			      C 

				include character.inc
			      C 
 00000004 00000000	      C C1 character {0,0,"Name",1,0,100,4,4,4,4,5,5,1,3,}
	   00000000 4E 61
	   6D 65
	   00000004 [
	    00
	   ] 00000001
	   00000000
	   00000064
	   00000004
	   00000004
	   00000004
	   00000004
	   00000005
	   00000005
	   00000001
	   00000003
	   00000000
			      C 
 00000044 2D 2D 43 68 61      C characterSheetTitle byte "--CharacterSheet--"       , 13, 10, 0
	   72 61 63 74 65
	   72 53 68 65 65
	   74 2D 2D 0D 0A
	   00
 00000059 78 50 6F 73 3A      C xPosTitle           byte "xPos: "                   , 0 , 10, 0
	   20 00 0A 00
 00000062 79 50 6F 73 3A      C yPosTitle           byte "yPos: "                   , 0 , 10, 0
	   20 00 0A 00
 0000006B 4E 61 6D 65 3A      C nameTitle           byte "Name: "                   , 0 , 10, 0
	   20 00 0A 00
 00000074 4C 65 76 65 6C      C levelTitle          byte "Level:"                   , 0 , 10, 0
	   3A 00 0A 00
 0000007D 45 78 70 3A 00      C expTitle            byte "Exp:"                     , 0 , 10, 0
	   0A 00
			      C 
			      C 
 00000084 2D 2D 50 72 69      C primaryAttributesTitle byte "--Primary Attributes--", 13, 10, 0
	   6D 61 72 79 20
	   41 74 74 72 69
	   62 75 74 65 73
	   2D 2D 0D 0A 00
 0000009D 42 72 61 77 6E      C brawnTitle          byte "Brawn:"                   , 0 , 10, 0
	   3A 00 0A 00
 000000A6 41 67 69 6C 69      C agilityTitle        byte "Agility:"                 , 0 , 10, 0
	   74 79 3A 00 0A
	   00
 000000B1 4D 69 6E 64 3A      C mindTitle           byte "Mind:"                    , 0 , 10, 0
	   00 0A 00
 000000B9 46 6F 72 74 75      C fortuneTitle        byte "Fortune:"                 , 0 , 10, 0
	   6E 65 3A 00 0A
	   00
			      C 
 000000C4 2D 2D 43 6F 6D      C combatAttributesTitle byte "--Combat Attributes--"  , 13, 10, 0
	   62 61 74 20 41
	   74 74 72 69 62
	   75 74 65 73 2D
	   2D 0D 0A 00
 000000DC 48 50 3A 00 0A      C hpTitle             byte "HP:"                      , 0 , 10, 0
	   00
 000000E2 44 61 6D 61 67      C damageTitle         byte "Damage:"                  , 0 , 10, 0
	   65 3A 00 0A 00
 000000EC 44 65 66 65 6E      C defenceTitle        byte "Defence:"                 , 0 , 10, 0
	   63 65 3A 00 0A
	   00
			      C 
 000000F7 45 6E 74 65 72      C command1 byte "Enter character name. Up to 8 Characters"  , 13, 10, 0
	   20 63 68 61 72
	   61 63 74 65 72
	   20 6E 61 6D 65
	   2E 20 55 70 20
	   74 6F 20 38 20
	   43 68 61 72 61
	   63 74 65 72 73
	   0D 0A 00
			      C 
			      C mPrintCharacterSheet MACRO ;//prints character sheet 
			      C pushAD
			      C 
			      C mov edx, offset characterSheetTitle ;//prints a header
			      C invoke WriteString
			      C 
			      C mov edx, offset xPosTitle ;// prints x position
			      C invoke WriteString
			      C mov eax, c1.xPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset yPosTitle ;// prints y position
			      C invoke WriteString
			      C mov eax, c1.yPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset nameTitle ;// prints character name
			      C invoke WriteString
			      C mov edx, offset c1.CharacterName
			      C Call WriteString
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset levelTitle ;//prints character level
			      C invoke WriteString
			      C mov eax, c1.level
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset expTitle ;//prints character exp
			      C invoke WriteString
			      C mov eax, c1.exp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.expToNext
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset primaryAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset brawnTitle ;//prints character brawn
			      C invoke WriteString
			      C mov eax, c1.brawn
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset agilityTitle ;//prints character agility
			      C invoke WriteString
			      C mov eax, c1.agility
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset mindTitle ;//prints character mind
			      C invoke WriteString
			      C mov eax, c1.mind
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset fortuneTitle ;//prints character fortune
			      C invoke WriteString
			      C mov eax, c1.fortune
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset hpTitle ;//prints character hp
			      C invoke WriteString
			      C mov eax, c1.hp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.hpMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset damageTitle ;//prints character damage
			      C invoke WriteString
			      C mov eax, c1.damageMin
			      C call WriteDec
			      C mov eax,'-'
			      C call WriteChar
			      C mov eax, c1.damageMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset defenceTitle ;//prints character defence
			      C invoke WriteString
			      C mov eax, c1.defence
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C 
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C popAD
			      C endm
			      C 
			      C mGetCharacterName MACRO
			      C pushAD
			      C 
			      C mov edx, offset command1 ;//Player inputs character name
			      C invoke WriteString
			      C mov edx, offset c1.characterName
			      C mov ecx, SIZEOF c1.characterName
			      C call ReadString
			      C 
			      C popAD
			      C endm
			      C 
			      C mInitializeCharacter MACRO ;//prints character sheet
			      C pushAD
			      C 
			      C 
			      C 
			      C inc c1.brawn   ;// sets primary attributes
			      C inc c1.agility
			      C inc c1.mind   
			      C inc c1.fortune
			      C 
			      C mov eax, c1.brawn ;// maxHP & hp initiliaze = brawn*2
			      C sal eax,1 ;// multiply by 2
			      C mov c1.hpMax,eax
			      C mov c1.hp,eax
			      C 
			      C mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
			      C sar eax,1;//divide by 2
			      C mov c1.damageMin,eax
			      C mov ebx,c1.agility
			      C sar ebx,2;//divide by 4
			      C add eax,ebx
			      C mov c1.damageMax,eax
			      C 
			      C 
			      C popAD
			      C endm
			      C 
			      C 
				include enemy.inc
 00000122 42 6F 67 6C 69      C e1 enemy{"Boglin",1,1,1,1}
	   6E
	   00000002 [
	    00
	   ] 00000001
	   00000001
	   00000001
	   00000001
	   00000000
	   00000000
			      C 
			      C 
			      C mInitializeEnemy MACRO
			      C pushAD
			      C 
			      C mov ebx, c1.level ;//initialize enemy hp
			      C mov eax,3
			      C call RandomRange
			      C inc eax
			      C mul ebx
			      C mov e1.hpMax,eax
			      C mov e1.hp,eax
			      C 
			      C mov eax, 2 ;//initialize enemy damage
			      C call RandomRange
			      C inc eax
			      C add eax,ebx
			      C mov e1.damageMin,eax
			      C mov ecx,eax
			      C mov eax,2
			      C call RandomRange
			      C inc eax
			      C add eax,ecx
			      C mov e1.damageMax,eax
			      C 
			      C mov eax,e1.hpMax ;//initialize expReward
			      C mov ebx,10
			      C mul ebx
			      C mov e1.expReward ,eax
			      C 
			      C popAD
			      C endm
			      C 
				include combat.inc
 00000142 00		      C escape         byte 0
 00000143 00		      C playerDefeated byte 0
 00000144 00		      C enemyDefeated  byte 0
			      C 
 00000145 2D 2D 43 4F 4D      C combatMenuTitle  byte "--COMBAT--"   , 13, 10, 0
	   42 41 54 2D 2D
	   0D 0A 00
 00000152 45 6E 65 6D 79      C enemyNameTitle   byte "Enemy Name:"  , 0 , 10, 0
	   20 4E 61 6D 65
	   3A 00 0A 00
 00000160 45 6E 65 6D 79      C enemyHPTitle     byte "Enemy HP:"    , 0 , 10, 0
	   20 48 50 3A 00
	   0A 00
 0000016C 45 6E 65 6D 79      C enemyDamageTitle byte "Enemy Damage:", 0 , 10, 0
	   20 44 61 6D 61
	   67 65 3A 00 0A
	   00
			      C 
			      C 
 0000017C 2D 2D 43 6F 6D      C combatOptionsMenuTitle byte "--Combat Options--", 13, 10, 0
	   62 61 74 20 4F
	   70 74 69 6F 6E
	   73 2D 2D 0D 0A
	   00
 00000191 30 3A 20 41 74      C attackTitle            byte "0: Attack"         , 13, 10, 0
	   74 61 63 6B 0D
	   0A 00
 0000019D 31 3A 20 46 6C      C fleeTitle              byte "1: Flee"           , 13, 10, 0
	   65 65 0D 0A 00
			      C 
 000001A7 59 6F 75 20 45      C escapeEvent          byte "You Escaped!"          , 13, 10, 0
	   73 63 61 70 65
	   64 21 0D 0A 00
 000001B6 59 6F 75 20 77      C playerDefeatedEvent  byte "You were defeated"     , 13, 10, 0
	   65 72 65 20 64
	   65 66 65 61 74
	   65 64 0D 0A 00
 000001CA 59 6F 75 20 44      C enemyDefeatedEvent   byte "You Defeated the Enemy", 13, 10, 0
	   65 66 65 61 74
	   65 64 20 74 68
	   65 20 45 6E 65
	   6D 79 0D 0A 00
			      C 
			      C mCombat MACRO
			      C Local L
			      C pushAD
			      C 
			      C mInitializeEnemy
			      C 
			      C mov eax,c1.hpMax
			      C mov c1.hp,eax
			      C 
			      C mov escape        ,0 ;//combat end conditions
			      C mov playerDefeated,0
			      C mov enemyDefeated ,0
			      C 
			      C WHILE_COMBAT&L:    ;//disgusting triple & while statement
			      C cmp escape,0       ;//while &
			      C je AND_COMBAT1&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT1&L: cmp playerDefeated,0
			      C je AND_COMBAT2&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT2&L: cmp enemyDefeated,0
			      C je AND_COMBAT_TRUE&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT_TRUE&L:
			      C 	
			      C 	mov edx, offset combatMenuTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyNameTitle ;//prints enemy name
			      C 	invoke WriteString
			      C 	mov edx, offset e1.enemyName
			      C 	invoke WriteString
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyHpTitle ;//prints enemy hp
			      C 	invoke WriteString
			      C 	mov eax, e1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, e1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyDamageTitle ;//prints enemy damage
			      C 	invoke WriteString
			      C 	mov eax, e1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, e1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C 	mov edx, offset hpTitle ;//prints character hp
			      C 	invoke WriteString
			      C 	mov eax, c1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, c1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset damageTitle ;//prints character damage
			      C 	invoke WriteString
			      C 	mov eax, c1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, c1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatOptionsMenuTitle ;//prints combat Options
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset attackTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset fleeTitle
			      C 	invoke WriteString
			      C 
			      C 	_get_input
			      C 	
			      C 	call Clrscr
			      C 
			      C 	
			      C 		cmp ecx, 0 ;//switch
			      C 		je attack
			      C 		cmp ecx, 1
			      C 		je flee
			      C 	
			      C 		jmp end_switch&L
			      C 
			      C 		attack:
			      C 			mov eax,c1.damageMax;//player attacks
			      C 			mov ebx,c1.damageMin
			      C 			sub eax,ebx
			      C 			inc eax
			      C 			call RandomRange
			      C 			add eax,ebx
			      C 			sub e1.hp,eax
			      C 
			      C 			cmp e1.hp,0 ;//check to see if enemy died
			      C 			jle enemy_dead
			      C 			jmp end_switch&L
			      C 			enemy_dead:
			      C 				mov enemyDefeated,1
			      C 				jmp AND_FALSE_COMBAT&L
			      C 		flee:
			      C 			mov escape,1
			      C 			
			      C 		end_switch&L:
			      C 
			      C 			mov eax,e1.damageMax;//enemy attacks
			      C 			mov ebx,e1.damageMin
			      C 			sub eax,ebx
			      C 			inc eax
			      C 			call RandomRange
			      C 			add eax,ebx
			      C 			sub c1.hp,eax
			      C 
			      C 			cmp c1.hp,0    ;// checking to see if character died
			      C 			jle character_dead
			      C 			jmp character_not_dead
			      C 			character_dead:
			      C 				mov playerDefeated,1
			      C 			character_not_dead:
			      C 
			      C 		jmp WHILE_COMBAT&L;//default
			      C 
			      C AND_FALSE_COMBAT&L:
			      C 
			      C cmp escape,0
			      C je not_escape
			      C 
			      C mov edx, offset escapeEvent;//will print if player fleed
			      C invoke WriteString
			      C jmp eventDetermined
			      C 
			      C not_escape:
			      C cmp playerDefeated,0
			      C je not_playerDefeated
			      C 
			      C mov edx, offset playerDefeatedEvent;//will print if player was defeated
			      C invoke WriteString
			      C jmp eventDetermined
			      C 
			      C not_playerDefeated:
			      C 
			      C mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
			      C invoke WriteString
			      C 
			      C mov eax,e1.expReward ;//rewarding player exp
			      C add c1.exp,eax
			      C 
			      C eventDetermined:
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C call Clrscr
			      C 
			      C popAD
			      C endm
			      C 
				include levelUp.inc
			      C ;//level up class
 000001E3 4E 6F 74 20 65      C notEnoughResponse byte "Not enough experience", 13, 10, 0
	   6E 6F 75 67 68
	   20 65 78 70 65
	   72 69 65 6E 63
	   65 0D 0A 00
			      C 
			      C 
			      C mLevelUp MACRO
			      C pushAD
			      C 
			      C mov eax,c1.exp
			      C mov ebx,c1.expToNext
			      C cmp eax,ebx
			      C jl notEnough
			      C 
			      C inc c1.level
			      C mInitializeCharacter
			      C 
			      C mov eax,c1.exp
			      C mov ebx,c1.expToNext
			      C sub eax,ebx
			      C mov c1.exp,eax
			      C jmp leveledUp
			      C 
			      C notEnough:
			      C 
			      C mov edx,offset notEnoughResponse
			      C invoke WriteString
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C call Clrscr
			      C 
			      C leveledUp:
			      C popAD
			      C endm
			      C 

				WriteDec proto
				ReadDec proto
				ExitProcess proto, dwExitCode:dword

 000001FB 4D 61 69 6E 20	mainMenuTitle       byte "Main Menu"        , 13, 10, 0
	   4D 65 6E 75 0D
	   0A 00
 00000207 30 20 51 75 69	quitTitle           byte "0 Quit"           , 13, 10, 0
	   74 0D 0A 00
 00000210 31 20 43 68 61	characterSheet      byte "1 Character Sheet", 13, 10, 0
	   72 61 63 74 65
	   72 20 53 68 65
	   65 74 0D 0A 00
 00000224 32 20 43 6F 6D	combatTitle         byte "2 Combat"         , 13, 10, 0
	   62 61 74 0D 0A
	   00
 0000022F 33 20 4C 65 76	levelUpTitle        byte "3 Level Up:"      , 13, 10, 0
	   65 6C 20 55 70
	   3A 0D 0A 00




 0000023D 20 0D 0A 00		blank byte " ", 13, 10, 0




 00000000			.code

 00000000			main proc

				mGetCharacterName
 00000000  60		     1	pushAD
 00000001  BA 000000F7 R     1	mov edx, offset command1 ;//Player inputs character name
 00000006  E8 00000000 E   *	    call   WriteString
 0000000B  BA 0000000C R     1	mov edx, offset c1.characterName
 00000010  B9 00000008	     1	mov ecx, SIZEOF c1.characterName
 00000015  E8 00000000 E     1	call ReadString
 0000001A  61		     1	popAD
				mInitializeCharacter
 0000001B  60		     1	pushAD
 0000001C  FF 05 00000020 R  1	inc c1.brawn   ;// sets primary attributes
 00000022  FF 05 00000024 R  1	inc c1.agility
 00000028  FF 05 00000028 R  1	inc c1.mind   
 0000002E  FF 05 0000002C R  1	inc c1.fortune
 00000034  A1 00000020 R     1	mov eax, c1.brawn ;// maxHP & hp initiliaze = brawn*2
 00000039  D1 E0	     1	sal eax,1 ;// multiply by 2
 0000003B  A3 00000030 R     1	mov c1.hpMax,eax
 00000040  A3 00000034 R     1	mov c1.hp,eax
 00000045  A1 00000020 R     1	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000004A  D1 F8	     1	sar eax,1;//divide by 2
 0000004C  A3 00000038 R     1	mov c1.damageMin,eax
 00000051  8B 1D 00000024 R  1	mov ebx,c1.agility
 00000057  C1 FB 02	     1	sar ebx,2;//divide by 4
 0000005A  03 C3	     1	add eax,ebx
 0000005C  A3 0000003C R     1	mov c1.damageMax,eax
 00000061  61		     1	popAD

 00000062  B9 00000001		mov ecx, 1
 00000067			while_main:						;//while( ecx != 0 )

					
 00000067  BA 000001FB R		mov edx, offset mainMenuTitle ;//Main Menu Display Start
 0000006C  E8 00000000 E		call WriteString
 00000071  BA 00000207 R		mov edx, offset quitTitle 
 00000076  E8 00000000 E		call WriteString
 0000007B  BA 00000210 R		mov edx, offset characterSheet
 00000080  E8 00000000 E		call WriteString    
 00000085  BA 00000224 R		mov edx, offset combatTitle
 0000008A  E8 00000000 E		call WriteString     
 0000008F  BA 0000022F R		mov edx, offset levelUpTitle
 00000094  E8 00000000 E		call WriteString

					_get_input
 00000099  E8 00000000 E     1		call ReadDec
 0000009E  8B C8	     1		mov ecx, eax
					
 000000A0  E8 00000000 E		call Clrscr

 000000A5  83 F9 00			cmp ecx, 0 ;//switch
 000000A8  0F 84 0000050D		je endwhile_main
 000000AE  83 F9 01			cmp ecx, 1
 000000B1  74 17			je character_sheet
 000000B3  83 F9 02			cmp ecx, 2
 000000B6  0F 84 000001E1		je combat
 000000BC  83 F9 03			cmp ecx, 3
 000000BF  0F 84 00000464		je levelUp
 000000C5  E9 000004EC			jmp end_switch

 000000CA				character_sheet:
						mPrintCharacterSheet
 000000CA  60		     1	pushAD
 000000CB  BA 00000044 R     1	mov edx, offset characterSheetTitle ;//prints a header
 000000D0  E8 00000000 E   *	    call   WriteString
 000000D5  BA 00000059 R     1	mov edx, offset xPosTitle ;// prints x position
 000000DA  E8 00000000 E   *	    call   WriteString
 000000DF  A1 00000004 R     1	mov eax, c1.xPos
 000000E4  E8 00000000 E     1	call WriteDec
 000000E9  BA 0000023D R     1	mov edx, offset blank
 000000EE  E8 00000000 E   *	    call   WriteString
 000000F3  BA 00000062 R     1	mov edx, offset yPosTitle ;// prints y position
 000000F8  E8 00000000 E   *	    call   WriteString
 000000FD  A1 00000008 R     1	mov eax, c1.yPos
 00000102  E8 00000000 E     1	call WriteDec
 00000107  BA 0000023D R     1	mov edx, offset blank
 0000010C  E8 00000000 E   *	    call   WriteString
 00000111  BA 0000006B R     1	mov edx, offset nameTitle ;// prints character name
 00000116  E8 00000000 E   *	    call   WriteString
 0000011B  BA 0000000C R     1	mov edx, offset c1.CharacterName
 00000120  E8 00000000 E     1	Call WriteString
 00000125  BA 0000023D R     1	mov edx, offset blank
 0000012A  E8 00000000 E   *	    call   WriteString
 0000012F  BA 00000074 R     1	mov edx, offset levelTitle ;//prints character level
 00000134  E8 00000000 E   *	    call   WriteString
 00000139  A1 00000014 R     1	mov eax, c1.level
 0000013E  E8 00000000 E     1	call WriteDec
 00000143  BA 0000023D R     1	mov edx, offset blank
 00000148  E8 00000000 E   *	    call   WriteString
 0000014D  BA 0000007D R     1	mov edx, offset expTitle ;//prints character exp
 00000152  E8 00000000 E   *	    call   WriteString
 00000157  A1 00000018 R     1	mov eax, c1.exp
 0000015C  E8 00000000 E     1	call WriteDec
 00000161  B8 0000002F	     1	mov eax,'/'
 00000166  E8 00000000 E     1	call WriteChar
 0000016B  A1 0000001C R     1	mov eax, c1.expToNext
 00000170  E8 00000000 E     1	call WriteDec
 00000175  BA 0000023D R     1	mov edx, offset blank
 0000017A  E8 00000000 E   *	    call   WriteString
 0000017F  BA 00000084 R     1	mov edx, offset primaryAttributesTitle ;//prints primary attributes header
 00000184  E8 00000000 E   *	    call   WriteString
 00000189  BA 0000009D R     1	mov edx, offset brawnTitle ;//prints character brawn
 0000018E  E8 00000000 E   *	    call   WriteString
 00000193  A1 00000020 R     1	mov eax, c1.brawn
 00000198  E8 00000000 E     1	call WriteDec
 0000019D  BA 0000023D R     1	mov edx, offset blank
 000001A2  E8 00000000 E   *	    call   WriteString
 000001A7  BA 000000A6 R     1	mov edx, offset agilityTitle ;//prints character agility
 000001AC  E8 00000000 E   *	    call   WriteString
 000001B1  A1 00000024 R     1	mov eax, c1.agility
 000001B6  E8 00000000 E     1	call WriteDec
 000001BB  BA 0000023D R     1	mov edx, offset blank
 000001C0  E8 00000000 E   *	    call   WriteString
 000001C5  BA 000000B1 R     1	mov edx, offset mindTitle ;//prints character mind
 000001CA  E8 00000000 E   *	    call   WriteString
 000001CF  A1 00000028 R     1	mov eax, c1.mind
 000001D4  E8 00000000 E     1	call WriteDec
 000001D9  BA 0000023D R     1	mov edx, offset blank
 000001DE  E8 00000000 E   *	    call   WriteString
 000001E3  BA 000000B9 R     1	mov edx, offset fortuneTitle ;//prints character fortune
 000001E8  E8 00000000 E   *	    call   WriteString
 000001ED  A1 0000002C R     1	mov eax, c1.fortune
 000001F2  E8 00000000 E     1	call WriteDec
 000001F7  BA 0000023D R     1	mov edx, offset blank
 000001FC  E8 00000000 E   *	    call   WriteString
 00000201  BA 000000C4 R     1	mov edx, offset combatAttributesTitle ;//prints primary attributes header
 00000206  E8 00000000 E   *	    call   WriteString
 0000020B  BA 000000DC R     1	mov edx, offset hpTitle ;//prints character hp
 00000210  E8 00000000 E   *	    call   WriteString
 00000215  A1 00000034 R     1	mov eax, c1.hp
 0000021A  E8 00000000 E     1	call WriteDec
 0000021F  B8 0000002F	     1	mov eax,'/'
 00000224  E8 00000000 E     1	call WriteChar
 00000229  A1 00000030 R     1	mov eax, c1.hpMax
 0000022E  E8 00000000 E     1	call WriteDec
 00000233  BA 0000023D R     1	mov edx, offset blank
 00000238  E8 00000000 E   *	    call   WriteString
 0000023D  BA 000000E2 R     1	mov edx, offset damageTitle ;//prints character damage
 00000242  E8 00000000 E   *	    call   WriteString
 00000247  A1 00000038 R     1	mov eax, c1.damageMin
 0000024C  E8 00000000 E     1	call WriteDec
 00000251  B8 0000002D	     1	mov eax,'-'
 00000256  E8 00000000 E     1	call WriteChar
 0000025B  A1 0000003C R     1	mov eax, c1.damageMax
 00000260  E8 00000000 E     1	call WriteDec
 00000265  BA 0000023D R     1	mov edx, offset blank
 0000026A  E8 00000000 E   *	    call   WriteString
 0000026F  BA 000000EC R     1	mov edx, offset defenceTitle ;//prints character defence
 00000274  E8 00000000 E   *	    call   WriteString
 00000279  A1 00000040 R     1	mov eax, c1.defence
 0000027E  E8 00000000 E     1	call WriteDec
 00000283  BA 0000023D R     1	mov edx, offset blank
 00000288  E8 00000000 E   *	    call   WriteString
 0000028D  BA 0000023D R     1	mov edx, offset blank
 00000292  E8 00000000 E   *	    call   WriteString
 00000297  61		     1	popAD
 00000298  E9 00000319				jmp end_switch
 0000029D				combat:
						mCombat
 0000029D  60		     1	pushAD
 0000029E  60		     2	pushAD
 0000029F  8B 1D 00000014 R  2	mov ebx, c1.level ;//initialize enemy hp
 000002A5  B8 00000003	     2	mov eax,3
 000002AA  E8 00000000 E     2	call RandomRange
 000002AF  40		     2	inc eax
 000002B0  F7 E3	     2	mul ebx
 000002B2  A3 0000012A R     2	mov e1.hpMax,eax
 000002B7  A3 0000012E R     2	mov e1.hp,eax
 000002BC  B8 00000002	     2	mov eax, 2 ;//initialize enemy damage
 000002C1  E8 00000000 E     2	call RandomRange
 000002C6  40		     2	inc eax
 000002C7  03 C3	     2	add eax,ebx
 000002C9  A3 00000132 R     2	mov e1.damageMin,eax
 000002CE  8B C8	     2	mov ecx,eax
 000002D0  B8 00000002	     2	mov eax,2
 000002D5  E8 00000000 E     2	call RandomRange
 000002DA  40		     2	inc eax
 000002DB  03 C1	     2	add eax,ecx
 000002DD  A3 00000136 R     2	mov e1.damageMax,eax
 000002E2  A1 0000012A R     2	mov eax,e1.hpMax ;//initialize expReward
 000002E7  BB 0000000A	     2	mov ebx,10
 000002EC  F7 E3	     2	mul ebx
 000002EE  A3 0000013E R     2	mov e1.expReward ,eax
 000002F3  61		     2	popAD
 000002F4  A1 00000030 R     1	mov eax,c1.hpMax
 000002F9  A3 00000034 R     1	mov c1.hp,eax
 000002FE  C6 05 00000142 R  1	mov escape        ,0 ;//combat end conditions
	   00
 00000305  C6 05 00000143 R  1	mov playerDefeated,0
	   00
 0000030C  C6 05 00000144 R  1	mov enemyDefeated ,0
	   00
 00000313		     1	WHILE_COMBAT??0001:    ;//disgusting triple & while statement
 00000313  80 3D 00000142 R  1	cmp escape,0       ;//while &
	   00
 0000031A  74 05	     1	je AND_COMBAT1??0001
 0000031C  E9 000001B4	     1	jmp AND_FALSE_COMBAT??0001
 00000321  80 3D 00000143 R  1	AND_COMBAT1??0001: cmp playerDefeated,0
	   00
 00000328  74 05	     1	je AND_COMBAT2??0001
 0000032A  E9 000001A6	     1	jmp AND_FALSE_COMBAT??0001
 0000032F  80 3D 00000144 R  1	AND_COMBAT2??0001: cmp enemyDefeated,0
	   00
 00000336  74 05	     1	je AND_COMBAT_TRUE??0001
 00000338  E9 00000198	     1	jmp AND_FALSE_COMBAT??0001
 0000033D		     1	AND_COMBAT_TRUE??0001:
 0000033D  BA 00000145 R     1		mov edx, offset combatMenuTitle
 00000342  E8 00000000 E   *	    call   WriteString
 00000347  BA 00000152 R     1		mov edx, offset enemyNameTitle ;//prints enemy name
 0000034C  E8 00000000 E   *	    call   WriteString
 00000351  BA 00000122 R     1		mov edx, offset e1.enemyName
 00000356  E8 00000000 E   *	    call   WriteString
 0000035B  BA 0000023D R     1		mov edx, offset blank
 00000360  E8 00000000 E   *	    call   WriteString
 00000365  BA 00000160 R     1		mov edx, offset enemyHpTitle ;//prints enemy hp
 0000036A  E8 00000000 E   *	    call   WriteString
 0000036F  A1 0000012E R     1		mov eax, e1.hp
 00000374  E8 00000000 E     1		call WriteDec
 00000379  B8 0000002F	     1		mov eax,'/'
 0000037E  E8 00000000 E     1		call WriteChar
 00000383  A1 0000012A R     1		mov eax, e1.hpMax
 00000388  E8 00000000 E     1		call WriteDec
 0000038D  BA 0000023D R     1		mov edx, offset blank
 00000392  E8 00000000 E   *	    call   WriteString
 00000397  BA 0000016C R     1		mov edx, offset enemyDamageTitle ;//prints enemy damage
 0000039C  E8 00000000 E   *	    call   WriteString
 000003A1  A1 00000132 R     1		mov eax, e1.damageMin
 000003A6  E8 00000000 E     1		call WriteDec
 000003AB  B8 0000002D	     1		mov eax,'-'
 000003B0  E8 00000000 E     1		call WriteChar
 000003B5  A1 00000136 R     1		mov eax, e1.damageMax
 000003BA  E8 00000000 E     1		call WriteDec
 000003BF  BA 0000023D R     1		mov edx, offset blank
 000003C4  E8 00000000 E   *	    call   WriteString
 000003C9  BA 000000C4 R     1		mov edx, offset combatAttributesTitle ;//prints primary attributes header
 000003CE  E8 00000000 E   *	    call   WriteString
 000003D3  BA 000000DC R     1		mov edx, offset hpTitle ;//prints character hp
 000003D8  E8 00000000 E   *	    call   WriteString
 000003DD  A1 00000034 R     1		mov eax, c1.hp
 000003E2  E8 00000000 E     1		call WriteDec
 000003E7  B8 0000002F	     1		mov eax,'/'
 000003EC  E8 00000000 E     1		call WriteChar
 000003F1  A1 00000030 R     1		mov eax, c1.hpMax
 000003F6  E8 00000000 E     1		call WriteDec
 000003FB  BA 0000023D R     1		mov edx, offset blank
 00000400  E8 00000000 E   *	    call   WriteString
 00000405  BA 000000E2 R     1		mov edx, offset damageTitle ;//prints character damage
 0000040A  E8 00000000 E   *	    call   WriteString
 0000040F  A1 00000038 R     1		mov eax, c1.damageMin
 00000414  E8 00000000 E     1		call WriteDec
 00000419  B8 0000002D	     1		mov eax,'-'
 0000041E  E8 00000000 E     1		call WriteChar
 00000423  A1 0000003C R     1		mov eax, c1.damageMax
 00000428  E8 00000000 E     1		call WriteDec
 0000042D  BA 0000023D R     1		mov edx, offset blank
 00000432  E8 00000000 E   *	    call   WriteString
 00000437  BA 0000017C R     1		mov edx, offset combatOptionsMenuTitle ;//prints combat Options
 0000043C  E8 00000000 E   *	    call   WriteString
 00000441  BA 00000191 R     1		mov edx,offset attackTitle
 00000446  E8 00000000 E   *	    call   WriteString
 0000044B  BA 0000019D R     1		mov edx,offset fleeTitle
 00000450  E8 00000000 E   *	    call   WriteString
 00000455  E8 00000000 E     2		call ReadDec
 0000045A  8B C8	     2		mov ecx, eax
 0000045C  E8 00000000 E     1		call Clrscr
 00000461  83 F9 00	     1			cmp ecx, 0 ;//switch
 00000464  74 07	     1			je attack
 00000466  83 F9 01	     1			cmp ecx, 1
 00000469  74 31	     1			je flee
 0000046B  EB 36	     1			jmp end_switch??0001
 0000046D		     1			attack:
 0000046D  A1 0000003C R     1				mov eax,c1.damageMax;//player attacks
 00000472  8B 1D 00000038 R  1				mov ebx,c1.damageMin
 00000478  2B C3	     1				sub eax,ebx
 0000047A  40		     1				inc eax
 0000047B  E8 00000000 E     1				call RandomRange
 00000480  03 C3	     1				add eax,ebx
 00000482  29 05 0000012E R  1				sub e1.hp,eax
 00000488  83 3D 0000012E R  1				cmp e1.hp,0 ;//check to see if enemy died
	   00
 0000048F  7E 02	     1				jle enemy_dead
 00000491  EB 10	     1				jmp end_switch??0001
 00000493		     1				enemy_dead:
 00000493  C6 05 00000144 R  1					mov enemyDefeated,1
	   01
 0000049A  EB 39	     1					jmp AND_FALSE_COMBAT??0001
 0000049C		     1			flee:
 0000049C  C6 05 00000142 R  1				mov escape,1
	   01
 000004A3		     1			end_switch??0001:
 000004A3  A1 00000136 R     1				mov eax,e1.damageMax;//enemy attacks
 000004A8  8B 1D 00000132 R  1				mov ebx,e1.damageMin
 000004AE  2B C3	     1				sub eax,ebx
 000004B0  40		     1				inc eax
 000004B1  E8 00000000 E     1				call RandomRange
 000004B6  03 C3	     1				add eax,ebx
 000004B8  29 05 00000034 R  1				sub c1.hp,eax
 000004BE  83 3D 00000034 R  1				cmp c1.hp,0    ;// checking to see if character died
	   00
 000004C5  7E 02	     1				jle character_dead
 000004C7  EB 07	     1				jmp character_not_dead
 000004C9		     1				character_dead:
 000004C9  C6 05 00000143 R  1					mov playerDefeated,1
	   01
 000004D0		     1				character_not_dead:
 000004D0  E9 FFFFFE3E	     1			jmp WHILE_COMBAT??0001;//default
 000004D5		     1	AND_FALSE_COMBAT??0001:
 000004D5  80 3D 00000142 R  1	cmp escape,0
	   00
 000004DC  74 0C	     1	je not_escape
 000004DE  BA 000001A7 R     1	mov edx, offset escapeEvent;//will print if player fleed
 000004E3  E8 00000000 E   *	    call   WriteString
 000004E8  EB 2A	     1	jmp eventDetermined
 000004EA		     1	not_escape:
 000004EA  80 3D 00000143 R  1	cmp playerDefeated,0
	   00
 000004F1  74 0C	     1	je not_playerDefeated
 000004F3  BA 000001B6 R     1	mov edx, offset playerDefeatedEvent;//will print if player was defeated
 000004F8  E8 00000000 E   *	    call   WriteString
 000004FD  EB 15	     1	jmp eventDetermined
 000004FF		     1	not_playerDefeated:
 000004FF  BA 000001CA R     1	mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
 00000504  E8 00000000 E   *	    call   WriteString
 00000509  A1 0000013E R     1	mov eax,e1.expReward ;//rewarding player exp
 0000050E  01 05 00000018 R  1	add c1.exp,eax
 00000514		     1	eventDetermined:
 00000514  B8 000007D0	     1	mov eax,2000
 00000519  E8 00000000 E     1	call Delay
 0000051E  E8 00000000 E     1	call Clrscr
 00000523  61		     1	popAD
 00000524  E9 0000008D				jmp end_switch
 00000529				levelUp:
						mLevelUp
 00000529  60		     1	pushAD
 0000052A  A1 00000018 R     1	mov eax,c1.exp
 0000052F  8B 1D 0000001C R  1	mov ebx,c1.expToNext
 00000535  3B C3	     1	cmp eax,ebx
 00000537  7C 61	     1	jl notEnough
 00000539  FF 05 00000014 R  1	inc c1.level
 0000053F  60		     2	pushAD
 00000540  FF 05 00000020 R  2	inc c1.brawn   ;// sets primary attributes
 00000546  FF 05 00000024 R  2	inc c1.agility
 0000054C  FF 05 00000028 R  2	inc c1.mind   
 00000552  FF 05 0000002C R  2	inc c1.fortune
 00000558  A1 00000020 R     2	mov eax, c1.brawn ;// maxHP & hp initiliaze = brawn*2
 0000055D  D1 E0	     2	sal eax,1 ;// multiply by 2
 0000055F  A3 00000030 R     2	mov c1.hpMax,eax
 00000564  A3 00000034 R     2	mov c1.hp,eax
 00000569  A1 00000020 R     2	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000056E  D1 F8	     2	sar eax,1;//divide by 2
 00000570  A3 00000038 R     2	mov c1.damageMin,eax
 00000575  8B 1D 00000024 R  2	mov ebx,c1.agility
 0000057B  C1 FB 02	     2	sar ebx,2;//divide by 4
 0000057E  03 C3	     2	add eax,ebx
 00000580  A3 0000003C R     2	mov c1.damageMax,eax
 00000585  61		     2	popAD
 00000586  A1 00000018 R     1	mov eax,c1.exp
 0000058B  8B 1D 0000001C R  1	mov ebx,c1.expToNext
 00000591  2B C3	     1	sub eax,ebx
 00000593  A3 00000018 R     1	mov c1.exp,eax
 00000598  EB 19	     1	jmp leveledUp
 0000059A		     1	notEnough:
 0000059A  BA 000001E3 R     1	mov edx,offset notEnoughResponse
 0000059F  E8 00000000 E   *	    call   WriteString
 000005A4  B8 000007D0	     1	mov eax,2000
 000005A9  E8 00000000 E     1	call Delay
 000005AE  E8 00000000 E     1	call Clrscr
 000005B3		     1	leveledUp:
 000005B3  61		     1	popAD
 000005B4  EB 00				jmp end_switch

 000005B6				end_switch:
 000005B6  E9 FFFFFAAC			jmp while_main ;//default


 000005BB			endwhile_main:
					
					invoke ExitProcess, 0
 000005BB  6A 00	   *	    push   +000000000h
 000005BD  E8 00000000 E   *	    call   ExitProcess

 000005C2			main endp

				end main
Microsoft (R) Macro Assembler Version 14.13.26129.0	    03/28/18 20:48:20
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

_get_input . . . . . . . . . . .	Proc
mCombat  . . . . . . . . . . . .	Proc
mGetCharacterName  . . . . . . .	Proc
mInitializeCharacter . . . . . .	Proc
mInitializeEnemy . . . . . . . .	Proc
mLevelUp . . . . . . . . . . . .	Proc
mPrintCharacterSheet . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
character  . . . . . . . . . . .	 00000040
  xPos . . . . . . . . . . . . .	 00000000	 DWord
  yPos . . . . . . . . . . . . .	 00000004	 DWord
  characterName  . . . . . . . .	 00000008	 Byte
  level  . . . . . . . . . . . .	 00000010	 DWord
  exp  . . . . . . . . . . . . .	 00000014	 DWord
  expToNext  . . . . . . . . . .	 00000018	 DWord
  brawn  . . . . . . . . . . . .	 0000001C	 DWord
  agility  . . . . . . . . . . .	 00000020	 DWord
  mind . . . . . . . . . . . . .	 00000024	 DWord
  fortune  . . . . . . . . . . .	 00000028	 DWord
  hpMax  . . . . . . . . . . . .	 0000002C	 DWord
  hp . . . . . . . . . . . . . .	 00000030	 DWord
  damageMin  . . . . . . . . . .	 00000034	 DWord
  damageMax  . . . . . . . . . .	 00000038	 DWord
  defence  . . . . . . . . . . .	 0000003C	 DWord
enemy  . . . . . . . . . . . . .	 00000020
  enemyName  . . . . . . . . . .	 00000000	 Byte
  hpMax  . . . . . . . . . . . .	 00000008	 DWord
  hp . . . . . . . . . . . . . .	 0000000C	 DWord
  damageMin  . . . . . . . . . .	 00000010	 DWord
  damageMax  . . . . . . . . . .	 00000014	 DWord
  defence  . . . . . . . . . . .	 00000018	 DWord
  expReward  . . . . . . . . . .	 0000001C	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000241 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005C2 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000005C2 Public STDCALL
  while_main . . . . . . . . . .	L Near	 00000067 _TEXT	
  character_sheet  . . . . . . .	L Near	 000000CA _TEXT	
  combat . . . . . . . . . . . .	L Near	 0000029D _TEXT	
  WHILE_COMBAT??0001 . . . . . .	L Near	 00000313 _TEXT	
  AND_COMBAT1??0001  . . . . . .	L Near	 00000321 _TEXT	
  AND_COMBAT2??0001  . . . . . .	L Near	 0000032F _TEXT	
  AND_COMBAT_TRUE??0001  . . . .	L Near	 0000033D _TEXT	
  attack . . . . . . . . . . . .	L Near	 0000046D _TEXT	
  enemy_dead . . . . . . . . . .	L Near	 00000493 _TEXT	
  flee . . . . . . . . . . . . .	L Near	 0000049C _TEXT	
  end_switch??0001 . . . . . . .	L Near	 000004A3 _TEXT	
  character_dead . . . . . . . .	L Near	 000004C9 _TEXT	
  character_not_dead . . . . . .	L Near	 000004D0 _TEXT	
  AND_FALSE_COMBAT??0001 . . . .	L Near	 000004D5 _TEXT	
  not_escape . . . . . . . . . .	L Near	 000004EA _TEXT	
  not_playerDefeated . . . . . .	L Near	 000004FF _TEXT	
  eventDetermined  . . . . . . .	L Near	 00000514 _TEXT	
  levelUp  . . . . . . . . . . .	L Near	 00000529 _TEXT	
  notEnough  . . . . . . . . . .	L Near	 0000059A _TEXT	
  leveledUp  . . . . . . . . . .	L Near	 000005B3 _TEXT	
  end_switch . . . . . . . . . .	L Near	 000005B6 _TEXT	
  endwhile_main  . . . . . . . .	L Near	 000005BB _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
C1 . . . . . . . . . . . . . . .	character  00000004 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
agilityTitle . . . . . . . . . .	Byte	 000000A6 _DATA	
attackTitle  . . . . . . . . . .	Byte	 00000191 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 0000023D _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brawnTitle . . . . . . . . . . .	Byte	 0000009D _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
characterSheetTitle  . . . . . .	Byte	 00000044 _DATA	
characterSheet . . . . . . . . .	Byte	 00000210 _DATA	
combatAttributesTitle  . . . . .	Byte	 000000C4 _DATA	
combatMenuTitle  . . . . . . . .	Byte	 00000145 _DATA	
combatOptionsMenuTitle . . . . .	Byte	 0000017C _DATA	
combatTitle  . . . . . . . . . .	Byte	 00000224 _DATA	
command1 . . . . . . . . . . . .	Byte	 000000F7 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
damageTitle  . . . . . . . . . .	Byte	 000000E2 _DATA	
defenceTitle . . . . . . . . . .	Byte	 000000EC _DATA	
e1 . . . . . . . . . . . . . . .	enemy	 00000122 _DATA	
enemyDamageTitle . . . . . . . .	Byte	 0000016C _DATA	
enemyDefeatedEvent . . . . . . .	Byte	 000001CA _DATA	
enemyDefeated  . . . . . . . . .	Byte	 00000144 _DATA	
enemyHPTitle . . . . . . . . . .	Byte	 00000160 _DATA	
enemyNameTitle . . . . . . . . .	Byte	 00000152 _DATA	
escapeEvent  . . . . . . . . . .	Byte	 000001A7 _DATA	
escape . . . . . . . . . . . . .	Byte	 00000142 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
expTitle . . . . . . . . . . . .	Byte	 0000007D _DATA	
fleeTitle  . . . . . . . . . . .	Byte	 0000019D _DATA	
fortuneTitle . . . . . . . . . .	Byte	 000000B9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hpTitle  . . . . . . . . . . . .	Byte	 000000DC _DATA	
input_state  . . . . . . . . . .	DWord	 00000000 _DATA	
levelTitle . . . . . . . . . . .	Byte	 00000074 _DATA	
levelUpTitle . . . . . . . . . .	Byte	 0000022F _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mainMenuTitle  . . . . . . . . .	Byte	 000001FB _DATA	
mindTitle  . . . . . . . . . . .	Byte	 000000B1 _DATA	
nameTitle  . . . . . . . . . . .	Byte	 0000006B _DATA	
notEnoughResponse  . . . . . . .	Byte	 000001E3 _DATA	
playerDefeatedEvent  . . . . . .	Byte	 000001B6 _DATA	
playerDefeated . . . . . . . . .	Byte	 00000143 _DATA	
primaryAttributesTitle . . . . .	Byte	 00000084 _DATA	
quitTitle  . . . . . . . . . . .	Byte	 00000207 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPosTitle  . . . . . . . . . . .	Byte	 00000059 _DATA	
yPosTitle  . . . . . . . . . . .	Byte	 00000062 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
