Microsoft (R) Macro Assembler Version 14.13.26129.0	    04/05/18 20:52:28
main.asm						     Page 1 - 1


				;// Main.asm - The file that contains the main game loop and launcher
				;// Authors: Thomas and Ben
				;// Since: 3/16/18


				;includelib libcmt.lib
				;includelib libvcruntime.lib
				;includelib libucrt.lib
				;includelib legacy_stdio_definitions.lib

				.386
				.model stdcall, flat
				.stack 4096
				include irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				include characterHeader.inc
			      C ;// structure of character object
 0000005C		      C character struct 
			      C 
 00000000  00000000	      C xPos           DWORD 0
 00000004  00000000	      C yPos           DWORD 0
 00000008  00000010 [	      C characterName  db    16 dup (?)
	    00
	   ]
 0000000B  00000000	      C level          DWORD 0
 0000000F  00000000	      C exp            DWORD 0
 00000013  00000000	      C expToNext      DWORD 0
 00000017  00000000	      C gold           DWORD 0
			      C 
 0000001B  00000001	      C brawn          DWORD 1 ;//Primary Attributes
 0000001F  00000001	      C agility        DWORD 1
 00000023  00000001	      C mind           DWORD 1
 00000027  00000001	      C fortune        DWORD 1
			      C 
 0000002B  00000000	      C hpMax          DWORD 0
 0000002F  00000000	      C hp             DWORD 0
 00000033  00000000	      C damageMin      DWORD 0
 00000037  00000000	      C damageMax      DWORD 0
			      C 
 0000003B  00000000	      C weaponCode      DWORD 0
 0000003F  00000000	      C weaponBuyValue  DWORD 0
 00000043  00000000	      C weaponSellValue DWORD 0
 00000047  00000000	      C weaponDamage    DWORD 0
			      C 
			      C 
 0000004B  00000000	      C defence        DWORD 0
			      C 
			      C character ends
			      C 
				include enemyHeader.inc
			      C ;// structure of enemy object
 00000020		      C enemy struct 
			      C 
 00000000  00000008 [	      C enemyName  db    8 dup (?)
	    00
	   ]
			      C 
 07230003  00000000	      C hpMax          DWORD 0
 07230007  00000000	      C hp             DWORD 0
 0723000B  00000000	      C damageMin      DWORD 0
 0723000F  00000000	      C damageMax      DWORD 0
 07230013  00000000	      C defence        DWORD 0
 07230017  00000000	      C expReward      DWORD 0
			      C 
			      C enemy ends
			      C 
				include itemHeader.inc
			      C ;// structure of item object
			      C 
 0000001C		      C item struc
			      C 
 00000000  00000000	      C itemCode  DWORD NULL
 00000004  00000000	      C buyValue  DWORD ?
 00000008  00000000	      C sellValue DWORD ?
 0000000C  00000000	      C prev      DWORD NULL
 00000010  00000000	      C next      DWORD NULL
			      C 
 00000014  00000000	      C combatValue DWORD NULL ;// attack for weapons defense for armor
 00000018  00000000	      C itemType  DWORD NULL
			      C 
			      C item ends
			      C 

 00000000			.data
				include getItemName.inc
			      C ;// gets items name based off code and prints it
 00000000 64 61 67 67 65      C itemName1 byte "dagger" , 0 , 10, 0
	   72 00 0A 00
 00000009 68 61 6C 62 65      C itemName2 byte "halberd"  , 0 , 10, 0
	   72 64 00 0A 00
 00000013 73 77 6F 72 64      C itemName3 byte "sword", 0 , 10, 0
	   00 0A 00
 0000001B 61 78 65 00 0A      C itemName4 byte "axe"  , 0 , 10, 0
	   00
 00000021 73 70 65 61 72      C itemName5 byte "spear"  , 0 , 10, 0
	   00 0A 00
 00000029 6B 61 74 61 6E      C itemName6 byte "katana"  , 0 , 10, 0
	   61 00 0A 00
 00000032 62 6F 77 00 0A      C itemName7 byte "bow"  , 0 , 10, 0
	   00
			      C 
 00000038 45 6D 70 74 79      C defaultName   byte "Empty Slot", 0 , 10, 0
	   20 53 6C 6F 74
	   00 0A 00
			      C 
			      C mGetItemName MACRO
			      C Local L
			      C 
			      C 
			      C ;//item code stored in eax
			      C 
			      C cmp eax,1
			      C je item0&L
			      C cmp eax,2
			      C je item1&L
			      C cmp eax,3
			      C je item2&L
			      C cmp eax,4
			      C je item3&L
			      C 
			      C jmp default&L
			      C 
			      C 
			      C 
			      C item0&L:
			      C 	mov edx, offset itemName1
			      C 
			      C 	jmp print&L
			      C item1&L:
			      C 	mov edx, offset itemName2
			      C 
			      C 	jmp print&L
			      C item2&L:
			      C 	mov edx, offset itemName3
			      C 	
			      C 	jmp print&L
			      C item3&L:
			      C 	mov edx, offset itemName4
			      C 	
			      C 	jmp print&L
			      C 
			      C default&L:
			      C 	mov edx, offset defaultName
			      C 
			      C print&L:
			      C 	invoke WriteString
			      C 
			      C 
			      C endm
			      C 
				include input_data.inc
 00000045 00000000	      C input_state dword ?
			      C 
				include get_input.inc
			      C _get_input macro
			      C 
			      C 	Local L
			      C 	call ReadDec
			      C 
			      C 	mov ecx, eax
			      C 
			      C 
			      C endm
			      C 

				include character.inc
			      C 
 00000049 00000000	      C C1 character {0,0,"Name",1,0,100,0,4,4,4,4,5,5,1,3,}
	   00000000 4E 61
	   6D 65
	   0000000C [
	    00
	   ] 00000001
	   00000000
	   00000064
	   00000000
	   00000004
	   00000004
	   00000004
	   00000004
	   00000005
	   00000005
	   00000001
	   00000003
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
			      C 
 000000A5 2D 2D 43 68 61      C characterSheetTitle byte "--CharacterSheet--"       , 13, 10, 0
	   72 61 63 74 65
	   72 53 68 65 65
	   74 2D 2D 0D 0A
	   00
 000000BA 78 50 6F 73 3A      C xPosTitle           byte "xPos: "                   , 0 , 10, 0
	   20 00 0A 00
 000000C3 79 50 6F 73 3A      C yPosTitle           byte "yPos: "                   , 0 , 10, 0
	   20 00 0A 00
 000000CC 4E 61 6D 65 3A      C nameTitle           byte "Name: "                   , 0 , 10, 0
	   20 00 0A 00
 000000D5 4C 65 76 65 6C      C levelTitle          byte "Level: "                  , 0 , 10, 0
	   3A 20 00 0A 00
 000000DF 45 78 70 3A 20      C expTitle            byte "Exp: "                    , 0 , 10, 0
	   00 0A 00
 000000E7 47 6F 6C 64 3A      C goldTitle           byte "Gold: "                   , 0 , 10, 0
	   20 00 0A 00
			      C 
			      C 
 000000F0 2D 2D 50 72 69      C primaryAttributesTitle byte "--Primary Attributes--", 13, 10, 0
	   6D 61 72 79 20
	   41 74 74 72 69
	   62 75 74 65 73
	   2D 2D 0D 0A 00
 00000109 42 72 61 77 6E      C brawnTitle          byte "Brawn:"                   , 0 , 10, 0
	   3A 00 0A 00
 00000112 41 67 69 6C 69      C agilityTitle        byte "Agility:"                 , 0 , 10, 0
	   74 79 3A 00 0A
	   00
 0000011D 4D 69 6E 64 3A      C mindTitle           byte "Mind:"                    , 0 , 10, 0
	   00 0A 00
 00000125 46 6F 72 74 75      C fortuneTitle        byte "Fortune:"                 , 0 , 10, 0
	   6E 65 3A 00 0A
	   00
			      C 
 00000130 2D 2D 43 6F 6D      C combatAttributesTitle byte "--Combat Attributes--"  , 13, 10, 0
	   62 61 74 20 41
	   74 74 72 69 62
	   75 74 65 73 2D
	   2D 0D 0A 00
 00000148 48 50 3A 00 0A      C hpTitle             byte "HP:"                      , 0 , 10, 0
	   00
 0000014E 44 61 6D 61 67      C damageTitle         byte "Damage:"                  , 0 , 10, 0
	   65 3A 00 0A 00
 00000158 44 65 66 65 6E      C defenceTitle        byte "Defence:"                 , 0 , 10, 0
	   63 65 3A 00 0A
	   00
 00000163 57 65 61 70 6F      C equippedWeaponTitle byte "Weapon:"                  , 0 , 10, 0
	   6E 3A 00 0A 00
			      C 
 0000016D 45 6E 74 65 72      C command1 byte "Enter character name. Up to 15 Characters"  , 13, 10, 0
	   20 63 68 61 72
	   61 63 74 65 72
	   20 6E 61 6D 65
	   2E 20 55 70 20
	   74 6F 20 31 35
	   20 43 68 61 72
	   61 63 74 65 72
	   73 0D 0A 00
			      C 
			      C mPrintCharacterSheet MACRO ;//prints character sheet 
			      C pushAD
			      C 
			      C mov edx, offset characterSheetTitle ;//prints a header
			      C invoke WriteString
			      C 
			      C mov edx, offset xPosTitle ;// prints x position
			      C invoke WriteString
			      C mov eax, c1.xPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset yPosTitle ;// prints y position
			      C invoke WriteString
			      C mov eax, c1.yPos
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset nameTitle ;// prints character name
			      C invoke WriteString
			      C mov edx, offset c1.CharacterName
			      C Call WriteString
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset levelTitle ;//prints character level
			      C invoke WriteString
			      C mov eax, c1.level
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset expTitle ;//prints character exp
			      C invoke WriteString
			      C mov eax, c1.exp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.expToNext
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset goldTitle
			      C invoke WriteString
			      C mov eax, c1.Gold
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C 
			      C mov edx, offset primaryAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset brawnTitle ;//prints character brawn
			      C invoke WriteString
			      C mov eax, c1.brawn
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset agilityTitle ;//prints character agility
			      C invoke WriteString
			      C mov eax, c1.agility
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset mindTitle ;//prints character mind
			      C invoke WriteString
			      C mov eax, c1.mind
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset fortuneTitle ;//prints character fortune
			      C invoke WriteString
			      C mov eax, c1.fortune
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C mov edx, offset hpTitle ;//prints character hp
			      C invoke WriteString
			      C mov eax, c1.hp
			      C call WriteDec
			      C mov eax,'/'
			      C call WriteChar
			      C mov eax, c1.hpMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset damageTitle ;//prints character damage
			      C invoke WriteString
			      C mov eax, c1.damageMin
			      C call WriteDec
			      C mov eax,'-'
			      C call WriteChar
			      C mov eax, c1.damageMax
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset defenceTitle ;//prints character defence
			      C invoke WriteString
			      C mov eax, c1.defence
			      C call WriteDec
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset equippedWeaponTitle
			      C invoke WriteString
			      C mov eax, c1.weaponCode
			      C mGetItemName
			      C 
			      C mov edx, offset blank
			      C invoke WriteString
			      C 
			      C mov edx, offset continueCommand
			      C invoke WriteString
			      C _get_input
			      C call clrscr
			      C 
			      C popAD
			      C endm
			      C 
			      C ;//gets character name
			      C mGetCharacterName MACRO
			      C pushAD
			      C 
			      C mov edx, offset command1 ;//Player inputs character name
			      C invoke WriteString
			      C mov edx, offset c1.characterName
			      C mov ecx, SIZEOF c1.characterName
			      C call ReadString
			      C 
			      C call clrscr
			      C 
			      C popAD
			      C endm
			      C 
			      C ;//initializes character
			      C mInitializeCharacter MACRO ;//prints character sheet
			      C pushAD
			      C 
			      C 
			      C 
			      C inc c1.brawn   ;// sets primary attributes
			      C inc c1.agility
			      C inc c1.mind   
			      C inc c1.fortune
			      C 
			      C mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
			      C sal eax,1 ;// multiply by 2
			      C mov c1.hpMax,eax
			      C mov c1.hp,eax
			      C 
			      C mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
			      C sar eax,1;//divide by 2
			      C add eax,c1.weaponDamage
			      C mov c1.damageMin,eax
			      C mov ebx,c1.agility
			      C sar ebx,2;//divide by 4
			      C add eax,ebx
			      C mov c1.damageMax,eax
			      C 
			      C popAD
			      C endm
			      C 
			      C 
			      C 
				include enemy.inc
 00000199 42 6F 67 6C 69      C e1 enemy{"Boglin",1,1,1,1,1,1}
	   6E
	   00000002 [
	    00
	   ] 00000001
	   00000001
	   00000001
	   00000001
	   00000001
	   00000001
			      C 
			      C ;//initialize emeny
			      C mInitializeEnemy MACRO
			      C pushAD
			      C 
			      C mov ebx, c1.level ;//initialize enemy hp
			      C mov eax,3
			      C call RandomRange
			      C inc eax
			      C mul ebx
			      C mov e1.hpMax,eax
			      C mov e1.hp,eax
			      C 
			      C mov eax, 2 ;//initialize enemy damage
			      C call RandomRange
			      C inc eax
			      C add eax,ebx
			      C mov e1.damageMin,eax
			      C mov ecx,eax
			      C mov eax,2
			      C call RandomRange
			      C inc eax
			      C add eax,ecx
			      C mov e1.damageMax,eax
			      C 
			      C mov eax,e1.hpMax ;//initialize expReward
			      C mov ebx,10
			      C mul ebx
			      C mov e1.expReward ,eax
			      C 
			      C popAD
			      C endm
			      C 
				include combat.inc
 000001B9 00		      C escape         byte 0
 000001BA 00		      C playerDefeated byte 0
 000001BB 00		      C enemyDefeated  byte 0
			      C 
 000001BC 2D 2D 43 4F 4D      C combatMenuTitle  byte "--COMBAT--"   , 13, 10, 0
	   42 41 54 2D 2D
	   0D 0A 00
 000001C9 45 6E 65 6D 79      C enemyNameTitle   byte "Enemy Name:"  , 0 , 10, 0
	   20 4E 61 6D 65
	   3A 00 0A 00
 000001D7 45 6E 65 6D 79      C enemyHPTitle     byte "Enemy HP:"    , 0 , 10, 0
	   20 48 50 3A 00
	   0A 00
 000001E3 45 6E 65 6D 79      C enemyDamageTitle byte "Enemy Damage:", 0 , 10, 0
	   20 44 61 6D 61
	   67 65 3A 00 0A
	   00
			      C 
			      C 
 000001F3 2D 2D 43 6F 6D      C combatOptionsMenuTitle byte "--Combat Options--", 13, 10, 0
	   62 61 74 20 4F
	   70 74 69 6F 6E
	   73 2D 2D 0D 0A
	   00
 00000208 30 3A 20 41 74      C attackTitle            byte "0: Attack"         , 13, 10, 0
	   74 61 63 6B 0D
	   0A 00
 00000214 31 3A 20 46 6C      C fleeTitle              byte "1: Flee"           , 13, 10, 0
	   65 65 0D 0A 00
			      C 
 0000021E 59 6F 75 20 45      C escapeEvent          byte "You Escaped!"          , 13, 10, 0
	   73 63 61 70 65
	   64 21 0D 0A 00
 0000022D 59 6F 75 20 77      C playerDefeatedEvent  byte "You were defeated"     , 13, 10, 0
	   65 72 65 20 64
	   65 66 65 61 74
	   65 64 0D 0A 00
 00000241 59 6F 75 20 44      C enemyDefeatedEvent   byte "You Defeated the Enemy", 13, 10, 0
	   65 66 65 61 74
	   65 64 20 74 68
	   65 20 45 6E 65
	   6D 79 0D 0A 00
			      C 
 0000025A 59 6F 75 20 67      C youGotTitle     byte "You got "    , 0,10,0
	   6F 74 20 00 0A
	   00
 00000265 20 67 6F 6C 64      C goldRewardTitle byte " gold"       ,13,10,0
	   0D 0A 00
 0000026D 20 65 78 70 65      C expRewardTitle  byte " experience" ,13,10,0
	   72 69 65 6E 63
	   65 0D 0A 00
			      C 
 0000027B 59 6F 75 20 74      C youTookTitle  byte "You took "  , 0,10,0
	   6F 6F 6B 20 00
	   0A 00
 00000287 20 64 61 6D 61      C damageCombatTitle   byte " damage"    ,13,10,0
	   67 65 0D 0A 00
 00000291 59 6F 75 20 64      C youDealtTitle byte "You dealt " , 0,10,0
	   65 61 6C 74 20
	   00 0A 00
			      C 
			      C mCombat MACRO
			      C Local L
			      C pushAD
			      C 
			      C mInitializeEnemy
			      C 
			      C mov eax,c1.hpMax
			      C mov c1.hp,eax
			      C 
			      C mov escape        ,0 ;//combat end conditions
			      C mov playerDefeated,0
			      C mov enemyDefeated ,0
			      C 
			      C WHILE_COMBAT&L:    ;//disgusting triple & while statement
			      C cmp escape,0       ;//while &
			      C je AND_COMBAT1&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT1&L: cmp playerDefeated,0
			      C je AND_COMBAT2&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT2&L: cmp enemyDefeated,0
			      C je AND_COMBAT_TRUE&L
			      C jmp AND_FALSE_COMBAT&L
			      C AND_COMBAT_TRUE&L:
			      C 	
			      C 	mov edx, offset combatMenuTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyNameTitle ;//prints enemy name
			      C 	invoke WriteString
			      C 	mov edx, offset e1.enemyName
			      C 	invoke WriteString
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyHpTitle ;//prints enemy hp
			      C 	invoke WriteString
			      C 	mov eax, e1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, e1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset enemyDamageTitle ;//prints enemy damage
			      C 	invoke WriteString
			      C 	mov eax, e1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, e1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatAttributesTitle ;//prints primary attributes header
			      C invoke WriteString
			      C 
			      C 	mov edx, offset hpTitle ;//prints character hp
			      C 	invoke WriteString
			      C 	mov eax, c1.hp
			      C 	call WriteDec
			      C 	mov eax,'/'
			      C 	call WriteChar
			      C 	mov eax, c1.hpMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset damageTitle ;//prints character damage
			      C 	invoke WriteString
			      C 	mov eax, c1.damageMin
			      C 	call WriteDec
			      C 	mov eax,'-'
			      C 	call WriteChar
			      C 	mov eax, c1.damageMax
			      C 	call WriteDec
			      C 	mov edx, offset blank
			      C 	invoke WriteString
			      C 
			      C 	mov edx, offset combatOptionsMenuTitle ;//prints combat Options
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset attackTitle
			      C 	invoke WriteString
			      C 
			      C 	mov edx,offset fleeTitle
			      C 	invoke WriteString
			      C 
			      C 	_get_input
			      C 	
			      C 	call Clrscr
			      C 
			      C 	
			      C 		cmp ecx, 0 ;//switch
			      C 		je attack&L
			      C 		cmp ecx, 1
			      C 		je flee&L
			      C 	
			      C 		jmp end_switch&L
			      C 
			      C 		attack&L:
			      C 			mov eax,c1.damageMax;//player attacks
			      C 			mov ebx,c1.damageMin
			      C 			sub eax,ebx
			      C 			inc eax
			      C 			call RandomRange
			      C 			add eax,ebx
			      C 			sub e1.hp,eax
			      C 
			      C 			mov edx, offset youDealtTitle
			      C 			invoke WriteString
			      C 			call WriteDec
			      C 			mov edx, offset damageCombatTitle
			      C 			invoke WriteString
			      C 
			      C 			mov edx, offset continueCommand
			      C 			invoke WriteString
			      C 			_get_input
			      C 
			      C 			cmp e1.hp,0 ;//check to see if enemy died
			      C 			jle enemy_dead&L
			      C 			jmp end_switch&L
			      C 			enemy_dead&L:
			      C 				mov enemyDefeated,1
			      C 				jmp AND_FALSE_COMBAT&L
			      C 		flee&L:
			      C 			mov escape,1
			      C 			
			      C 		end_switch&L:
			      C 
			      C 			mov eax,e1.damageMax;//enemy attacks
			      C 			mov ebx,e1.damageMin
			      C 			sub eax,ebx
			      C 			inc eax
			      C 			call RandomRange
			      C 			add eax,ebx
			      C 			sub c1.hp,eax
			      C 
			      C 			mov edx, offset youTookTitle
			      C 			invoke WriteString
			      C 			call WriteDec
			      C 			mov edx, offset damageCombatTitle
			      C 			invoke WriteString
			      C 
			      C 			mov edx, offset continueCommand
			      C 			invoke WriteString
			      C 			_get_input
			      C 
			      C 			call Clrscr
			      C 
			      C 			cmp c1.hp,0    ;// checking to see if character died
			      C 			jle character_dead&L
			      C 			jmp character_not_dead&L
			      C 			character_dead&L:
			      C 				mov playerDefeated,1
			      C 			character_not_dead&L:
			      C 
			      C 		jmp WHILE_COMBAT&L;//default
			      C 
			      C AND_FALSE_COMBAT&L:
			      C 
			      C cmp escape,0
			      C je not_escape&L
			      C 
			      C mov edx, offset escapeEvent;//will print if player fleed
			      C invoke WriteString
			      C jmp eventDetermined&L
			      C 
			      C not_escape&L:
			      C cmp playerDefeated,0
			      C je not_playerDefeated&L
			      C 
			      C mov edx, offset playerDefeatedEvent;//will print if player was defeated
			      C invoke WriteString
			      C jmp eventDetermined&L
			      C 
			      C not_playerDefeated&L:
			      C 
			      C mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
			      C invoke WriteString
			      C 
			      C mov eax, offset t1 ;//adds axe to inventory
			      C mAddItem
			      C 
			      C mov eax, c1.level
			      C mov ecx,10
			      C mul ecx
			      C call RandomRange
			      C mov ebx,c1.gold
			      C add ebx,eax
			      C mov c1.gold,ebx
			      C 
			      C 
			      C mov edx,offset youGotTitle
			      C invoke WriteString
			      C call WriteDec
			      C mov edx,offset goldRewardTitle
			      C invoke WriteString
			      C 
			      C mov eax,e1.expReward ;//rewarding player exp
			      C add c1.exp,eax
			      C 
			      C mov edx,offset youGotTitle
			      C invoke WriteString
			      C call WriteDec
			      C mov edx,offset expRewardTitle
			      C invoke WriteString
			      C 
			      C 
			      C 
			      C eventDetermined&L:
			      C 
			      C mov edx, offset continueCommand
			      C invoke WriteString
			      C 
			      C _get_input
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C call Clrscr
			      C 
			      C popAD
			      C endm
			      C 
				include levelUp.inc
			      C ;//level up class
 0000029E 4E 6F 74 20 65      C notEnoughResponse byte "Not enough experience"  , 13, 10, 0
	   6E 6F 75 67 68
	   20 65 78 70 65
	   72 69 65 6E 63
	   65 0D 0A 00
 000002B6 59 6F 75 20 6C      C leveledUpResponse byte "You leveled up!"        , 13, 10, 0
	   65 76 65 6C 65
	   64 20 75 70 21
	   0D 0A 00
 000002C8 49 6E 63 72 65      C attributeSelection byte "Increase an attribute" , 13, 10, 0
	   61 73 65 20 61
	   6E 20 61 74 74
	   72 69 62 75 74
	   65 0D 0A 00
			      C 
 000002E0 30 20 42 72 61      C brawnAttribute   byte "0 Brawn"   ,13,10,0
	   77 6E 0D 0A 00
 000002EA 31 20 41 67 69      C agilityAttribute byte "1 Agility" ,13,10,0
	   6C 69 74 79 0D
	   0A 00
 000002F6 32 20 4D 69 6E      C mindAttribute    byte "2 Mind"    ,13,10,0
	   64 0D 0A 00
 000002FF 33 20 46 6F 72      C fortuneAttribute byte "3 Fortune" ,13,10,0
	   74 75 6E 65 0D
	   0A 00
			      C 
			      C mLevelUp MACRO
			      C pushAD
			      C 
			      C mov eax,c1.exp
			      C mov ebx,c1.expToNext
			      C cmp eax,ebx
			      C jl notEnough
			      C 
			      C inc c1.level
			      C mInitializeCharacter
			      C 
			      C mov eax,c1.exp
			      C mov ebx,c1.expToNext
			      C sub eax,ebx
			      C mov c1.exp,eax
			      C 
			      C 
			      C mov edx, offset attributeSelection
			      C invoke WriteString
			      C mov edx, offset brawnAttribute
			      C invoke WriteString
			      C mov edx, offset agilityAttribute
			      C invoke WriteString
			      C mov edx, offset mindAttribute
			      C invoke WriteString
			      C mov edx, offset fortuneAttribute
			      C invoke WriteString
			      C 
			      C _get_input
			      C 
			      C invalidAttribute:
			      C cmp ecx,0
			      C je brawn
			      C cmp ecx,1
			      C je agility
			      C cmp ecx,2
			      C je mind
			      C cmp ecx,3
			      C je fortune
			      C jmp invalidAttribute
			      C 
			      C brawn:
			      C 	inc c1.brawn
			      C 	jmp validAttribute
			      C agility:
			      C 	inc c1.agility
			      C 	jmp validAttribute
			      C mind:
			      C 	inc c1.mind
			      C 	jmp validAttribute
			      C fortune:
			      C 	inc c1.fortune
			      C 	jmp validAttribute
			      C 
			      C 
			      C 	validAttribute:
			      C call clrscr
			      C 
			      C mov edx,offset leveledUpResponse
			      C invoke WriteString
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C jmp leveledUp
			      C 
			      C notEnough:
			      C 
			      C mov edx,offset notEnoughResponse
			      C invoke WriteString
			      C 
			      C mov eax,2000
			      C call Delay
			      C 
			      C 
			      C 
			      C leveledUp:
			      C 
			      C call Clrscr
			      C 
			      C popAD
			      C endm
			      C 
				include inventory.inc
			      C ;//inventory using linked list
			      C ;//linked list of 10 items 
			      C 
 0000030B 00000000	      C i10 item {0,0,0,i9,null}
	   00000000
	   00000000
	   00000327 R
	   00000000
	   00000000
	   00000000
 00000327 00000000	      C i9 item {0,0,0,i8,i10}
	   00000000
	   00000000
	   00000343 R
	   0000030B R
	   00000000
	   00000000
 00000343 00000000	      C i8 item {0,0,0,i7,i9}
	   00000000
	   00000000
	   0000035F R
	   00000327 R
	   00000000
	   00000000
 0000035F 00000000	      C i7 item {0,0,0,i6,i8}
	   00000000
	   00000000
	   0000037B R
	   00000343 R
	   00000000
	   00000000
 0000037B 00000000	      C i6 item {0,0,0,i5,i7}
	   00000000
	   00000000
	   00000397 R
	   0000035F R
	   00000000
	   00000000
 00000397 00000000	      C i5 item {0,0,0,i4,i6}
	   00000000
	   00000000
	   000003B3 R
	   0000037B R
	   00000000
	   00000000
 000003B3 00000000	      C i4 item {0,0,0,i3,i5}
	   00000000
	   00000000
	   000003CF R
	   00000397 R
	   00000000
	   00000000
 000003CF 00000001	      C i3 item {1,1,2,i2,i4,5,"W"}
	   00000001
	   00000002
	   000003EB R
	   000003B3 R
	   00000005
	   00000057
 000003EB 00000002	      C i2 item {2,1,2,i1,i3,10,"W"}
	   00000001
	   00000002
	   00000407 R
	   000003CF R
	   0000000A
	   00000057
 00000407 00000003	      C i1 item {3,1,2,null,i2,3,"A"}
	   00000001
	   00000002
	   00000000
	   000003EB R
	   00000003
	   00000041
			      C 
 00000423 00000004	      C t1 item {4,1,2,NULL,NULL,3}
	   00000001
	   00000002
	   00000000
	   00000000
	   00000003
	   00000000
			      C 
 0000043F  00000008 [	      C tempString  db    8 dup (?)
	    00
	   ]
			      C 
 00000447 2D 2D 53 65 6C      C selectItemTitle byte "--Select an Item--", 13, 10, 0
	   65 63 74 20 61
	   6E 20 49 74 65
	   6D 2D 2D 0D 0A
	   00
			      C 
			      C 
 0000045C 31 20 44 69 73      C discardTitle byte "1 Discard: "   , 13, 10, 0
	   63 61 72 64 3A
	   20 0D 0A 00
 0000046A 32 20 45 71 75      C equipTitle   byte "2 Equip: "     , 13, 10, 0
	   69 70 3A 20 0D
	   0A 00
 00000476 33 20 49 74 65      C infoTitle    byte "3 Item Info "  , 13, 10, 0
	   6D 20 49 6E 66
	   6F 20 0D 0A 00
			      C 
 00000485 49 74 65 6D 20      C itemNameTitle        byte "Item Name: "      , 0, 10, 0
	   4E 61 6D 65 3A
	   20 00 0A 00
 00000493 53 65 6C 6C 20      C itemSellValueTitle   byte "Sell Value: "     , 0, 10, 0
	   56 61 6C 75 65
	   3A 20 00 0A 00
 000004A2 42 75 79 20 56      C itemBuyValueTitle    byte "Buy Value: "      , 0, 10, 0
	   61 6C 75 65 3A
	   20 00 0A 00
 000004B0 43 6F 6D 62 61      C itemCombatValueTitle byte "Combat Value:"    , 0, 10, 0
	   74 20 56 61 6C
	   75 65 3A 00 0A
	   00
 000004C0 49 74 65 6D 20      C itemType             byte "Item Type:   "    , 0, 10, 0
	   54 79 70 65 3A
	   20 20 20 00 0A
	   00
			      C 
 000004D0 49 4E 56 45 4E      C inventoryFullTitle   byte "INVENTORY FULL"   , 0, 10, 0
	   54 4F 52 59 20
	   46 55 4C 4C 00
	   0A 00
			      C 
			      C ;//displays inventory
			      C mDisplayInventory MACRO
			      C Local L
			      C pushAD
			      C 
			      C xor ecx,ecx
			      C DO1&L:
			      C 
			      C mov eax,ecx
			      C call WriteDec
			      C mov eax, ':'
			      C call WriteChar
			      C mov eax, [ebx].item.itemCode
			      C mGetItemName
			      C mov edx,offset blank
			      C call WriteString
			      C 
			      C mov eBx,[ebx].item.next
			      C 
			      C inc ecx
			      C cmp ebx,null
			      C jne DO1&L
			      C 
			      C popAD
			      C endm
			      C 
			      C mInventory MACRO
			      C 
			      C mov edx, offset selectItemTitle
			      C call WriteString
			      C 
			      C mov eBx, offset i1
			      C mDisplayInventory
			      C _get_input
			      C 
			      C cmp ecx,0
			      C 	je item0
			      C cmp ecx,1
			      C 	je item1
			      C cmp ecx,2
			      C 	je item2
			      C cmp ecx,3
			      C 	je item3
			      C cmp ecx,4
			      C 	je item4
			      C cmp ecx,5
			      C 	je item5
			      C cmp ecx,6
			      C 	je item6
			      C cmp ecx,7
			      C 	je item7
			      C cmp ecx,8
			      C 	je item8
			      C cmp ecx,9
			      C 	je item9
			      C 
			      C item0:
			      C 	mov ebx,offset i1 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item1:
			      C 	mov ebx,offset i2 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item2:
			      C 	mov ebx,offset i3 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item3:
			      C 	mov ebx,offset i4 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item4:
			      C 	mov ebx,offset i5 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item5:
			      C 	mov ebx,offset i6 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item6:
			      C 	mov ebx,offset i7 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item7:
			      C 	mov ebx,offset i8 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item8:
			      C 	mov ebx,offset i9 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C item9:
			      C 	mov ebx,offset i10 ;//storing item for use
			      C 	mitemOptions
			      C 	jmp endInventory
			      C 
			      C endInventory:
			      C 
			      C call clrscr
			      C endm
			      C 
			      C mitemOptions MACRO
			      C local L
			      C 
			      C mov edx, offset exitTitle
			      C call WriteString
			      C mov edx, offset discardTitle
			      C call WriteString
			      C mov edx, offset equipTitle
			      C call WriteString
			      C mov edx, offset infoTitle
			      C call WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx,909
			      C je exit&L
			      C cmp ecx,1
			      C je removeItem&L
			      C cmp ecx,2
			      C je equipItem&L
			      C cmp ecx,3
			      C je infoItem&L
			      C jmp endCase&L
			      C 
			      C exit&L:
			      C 	jmp endCase&L
			      C removeItem&L:
			      C 	mRemoveItem
			      C 	jmp endCase&L
			      C equipItem&L:
			      C 	mEquip
			      C 	jmp endCase&L
			      C infoItem&L:
			      C 	call clrscr
			      C 	mDisplayItemInfo
			      C 	mov eax,2000
			      C 	call Delay
			      C 
			      C endCase&L:
			      C 
			      C endm
			      C 
			      C ;//remove an item from inventory
			      C mRemoveItem MACRO
			      C 
			      C ;//ebx is item being removed
			      C 
			      C mov [ebx].item.itemCode,null
			      C mov [ebx].item.sellValue,0
			      C mov [ebx].item.buyValue,0
			      C 
			      C endm;//mRemoveItem
			      C 
			      C ;//equips item
			      C mEquip MACRO
			      C Local L
			      C 
			      C ;//ebx is item being equipped
			      C 
			      C cmp c1.weaponCode,0
			      C je notEquipped&L
			      C 
			      C mov edx,ebx
			      C mDequip
			      C mov ebx,edx
			      C 
			      C notEquipped&L:
			      C mov edx, [ebx].item.itemCode
			      C mov c1.weaponCode, edx
			      C mov edx, [ebx].item.combatValue
			      C mov c1.weaponDamage, edx
			      C mov edx, [ebx].item.buyValue
			      C mov c1.weaponBuyValue,edx
			      C mov edx,[ebx].item.sellValue
			      C mov c1.weaponsellValue,edx
			      C mRemoveItem
			      C mInitializeCharacter
			      C 
			      C endm;//mEquip
			      C 
			      C ;//displays item Info
			      C mDisplayItemInfo MACRO
			      C ;ebx is item Info
			      C 
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemBuyValueTitle ;displays buy value
			      C call WriteString
			      C mov eax, [ebx].item.buyValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemSellValueTitle ;displays sell value 
			      C call WriteString
			      C mov eax, [ebx].item.SellValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C mov edx, offset itemCombatValueTitle ;displays combat value
			      C call WriteString
			      C mov eax, [ebx].item.combatValue
			      C call WriteDec
			      C mov edx, offset blank
			      C call WriteString
			      C 
			      C endm
			      C 
			      C mDequip MACRO
			      C Local L
			      C 
			      C cmp c1.weaponCode,0
			      C je nothingEquipped&L
			      C 
			      C mov ebx, offset i1
			      C 
			      C notEmpty&L:
			      C cmp [ebx].item.itemCode,0
			      C je isEmpty&L 
			      C cmp [ebx].item.next,null
			      C je inventoryFull&L
			      C mov ebx,[ebx].item.next
			      C jmp notEmpty&L
			      C 
			      C isEmpty&L:
			      C 
			      C mov eax, c1.weaponCode
			      C mov [ebx].item.itemCode,eax
			      C mov c1.weaponCode,0
			      C 
			      C mov eax, c1.weaponBuyValue
			      C mov [ebx].item.buyValue,eax
			      C mov c1.weaponBuyValue,0
			      C 
			      C mov eax, c1.weaponSellValue
			      C mov [ebx].item.sellValue,eax
			      C mov c1.weaponSellValue,0
			      C 
			      C mov eax, c1.weaponDamage
			      C mov [ebx].item.combatValue,eax
			      C mov c1.weaponDamage,0
			      C mInitializeCharacter
			      C jmp nothingEquipped&L
			      C 
			      C 
			      C inventoryFull&L:
			      C 
			      C mov edx, offset inventoryFullTitle
			      C invoke WriteString
			      C 
			      C mov eax, 1500
			      C call Delay
			      C call clrscr
			      C 
			      C nothingEquipped&L:
			      C 
			      C endm
			      C 
			      C mAddItem MACRO
			      C Local L
			      C ;//item is in eax
			      C 
			      C mov ebx, offset i1
			      C 
			      C notEmpty&L:
			      C cmp [ebx].item.itemCode,0
			      C je isEmpty&L 
			      C cmp [ebx].item.next,null
			      C je inventoryFull&L
			      C mov ebx,[ebx].item.next
			      C jmp notEmpty&L
			      C 
			      C isEmpty&L:
			      C 
			      C mov ecx, [eax].item.itemCode
			      C mov [ebx].item.itemCode,ecx
			      C 
			      C mov ecx, [eax].item.buyValue
			      C mov [ebx].item.buyValue,ecx
			      C 
			      C mov ecx, [eax].item.sellValue
			      C mov [ebx].item.sellValue,ecx
			      C 
			      C mov ecx, [eax].item.combatValue
			      C mov [ebx].item.combatValue,ecx
			      C 
			      C jmp end&L
			      C 
			      C inventoryFull&L:
			      C mov edx, offset inventoryFullTitle
			      C invoke WriteString
			      C 
			      C mov eax, 1500
			      C call Delay
			      C call clrscr
			      C 
			      C end&L:
			      C 
			      C endm
			      C 
			      C 
				include shop.inc
 000004E1 00000000	      C s10 item {0,0,0,s9,null}
	   00000000
	   00000000
	   000004FD R
	   00000000
	   00000000
	   00000000
 000004FD 00000000	      C s9 item {0,0,0,s8,s10}
	   00000000
	   00000000
	   00000519 R
	   000004E1 R
	   00000000
	   00000000
 00000519 00000000	      C s8 item {0,0,0,s7,s9}
	   00000000
	   00000000
	   00000535 R
	   000004FD R
	   00000000
	   00000000
 00000535 00000000	      C s7 item {0,0,0,s6,s8}
	   00000000
	   00000000
	   00000551 R
	   00000519 R
	   00000000
	   00000000
 00000551 00000000	      C s6 item {0,0,0,s5,s7}
	   00000000
	   00000000
	   0000056D R
	   00000535 R
	   00000000
	   00000000
 0000056D 00000000	      C s5 item {0,0,0,s4,s6}
	   00000000
	   00000000
	   00000589 R
	   00000551 R
	   00000000
	   00000000
 00000589 00000000	      C s4 item {0,0,0,s3,s5}
	   00000000
	   00000000
	   000005A5 R
	   0000056D R
	   00000000
	   00000000
 000005A5 00000001	      C s3 item {1,1,2,s2,s4,5,"W"}
	   00000001
	   00000002
	   000005C1 R
	   00000589 R
	   00000005
	   00000057
 000005C1 00000001	      C s2 item {1,1,2,s1,s3,10,"W"}
	   00000001
	   00000002
	   000005DD R
	   000005A5 R
	   0000000A
	   00000057
 000005DD 00000003	      C s1 item {3,1,2,null,s2,3,"A"}
	   00000001
	   00000002
	   00000000
	   000005C1 R
	   00000003
	   00000041
			      C 
 000005F9 2D 2D 53 48 4F      C shopMenuTitle    byte "--SHOP--"        , 13, 10, 0
	   50 2D 2D 0D 0A
	   00
			      C 
 00000604 31 30 20 53 77      C sellModeTitle byte "10 Switch to Sell Mode" , 13, 10, 0
	   69 74 63 68 20
	   74 6F 20 53 65
	   6C 6C 20 4D 6F
	   64 65 0D 0A 00
 0000061D 31 30 20 53 77      C buyModeTitle byte "10 Switch to Buy Mode" , 13, 10, 0
	   69 74 63 68 20
	   74 6F 20 42 75
	   79 20 4D 6F 64
	   65 0D 0A 00
 00000635 32 20 42 75 79      C buyTitle      byte "2 Buy:"                 , 13, 10, 0
	   3A 0D 0A 00
			      C 
 0000063E 31 20 53 65 6C      C sellTitle  byte "1 Sell:"  , 13, 10, 0
	   6C 3A 0D 0A 00
			      C 
 00000648 41 20 68 6F 6F      C shopPrompt1 byte "A hooded figure approaches" , 13, 10, 0
	   64 65 64 20 66
	   69 67 75 72 65
	   20 61 70 70 72
	   6F 61 63 68 65
	   73 0D 0A 00
 00000665 27 57 6F 75 6C      C shopPrompt2 byte "'Would you like to buy some of my wares?' " , 13, 10, 0
	   64 20 79 6F 75
	   20 6C 69 6B 65
	   20 74 6F 20 62
	   75 79 20 73 6F
	   6D 65 20 6F 66
	   20 6D 79 20 77
	   61 72 65 73 3F
	   27 20 0D 0A 00
			      C 
 00000692 4E 6F 74 20 45      C notEnoughGoldTitle byte "Not Enough Gold" , 13, 10, 0
	   6E 6F 75 67 68
	   20 47 6F 6C 64
	   0D 0A 00
			      C 
			      C mShop MACRO
			      C Local L
			      C 
			      C 
			      C 
			      C mov edx, offset shopPrompt1
			      C invoke WriteString
			      C mov edx, offset shopPrompt2
			      C invoke WriteString
			      C 
			      C call crlf
			      C 
			      C mov edx, offset continueCommand
			      C invoke WriteString
			      C 
			      C _get_input
			      C 
			      C call clrscr
			      C 
			      C stillShopping&L:
			      C 
			      C mov edx, offset shopMenuTitle
			      C invoke WriteString
			      C mov edx, offset exitTitle
			      C invoke WriteString
			      C 
			      C mov ebx, offset s1;//moving first item to read linked list
			      C mDisplayInventory
			      C 
			      C mov edx,offset sellModeTitle
			      C invoke WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx,909
			      C 	je exitShop&L
			      C cmp ecx,0
			      C 	je item0&L
			      C cmp ecx,1
			      C 	je item1&L
			      C cmp ecx,2
			      C 	je item2&L
			      C cmp ecx,3
			      C 	je item3&L
			      C cmp ecx,4
			      C 	je item4&L
			      C cmp ecx,5
			      C 	je item5&L
			      C cmp ecx,6
			      C 	je item6&L
			      C cmp ecx,7
			      C 	je item7&L
			      C cmp ecx,8
			      C 	je item8&L
			      C cmp ecx,9
			      C 	je item9&L
			      C cmp ecx,10
			      C 	je sellMode&L
			      C jmp exitShop&L
			      C 
			      C item0&L:
			      C 	mov ebx,offset s1 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item1&L:
			      C 	mov ebx,offset s2 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item2&L:
			      C 	mov ebx,offset s3 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item3&L:
			      C 	mov ebx,offset s4 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item4&L:
			      C 	mov ebx,offset s5 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item5&L:
			      C 	mov ebx,offset s6 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item6&L:
			      C 	mov ebx,offset s7 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item7&L:
			      C 	mov ebx,offset s8 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item8&L:
			      C 	mov ebx,offset s9 ;//storing item for use
			      C 	mBuyOptions
			      C 	jmp stillShopping&L
			      C item9&L:
			      C 	mov ebx,offset s10 ;//storing item for use
			      C sellMode&L:
			      C 	call clrscr
			      C 	mSellMode
			      C 	
			      C 
			      C 
			      C 
			      C jmp stillShopping&L
			      C exitShop&L:
			      C 
			      C Call clrscr
			      C 
			      C endm
			      C 
			      C mBuyOptions MACRO
			      C local L
			      C mov edx, offset exitTitle
			      C mov edx, offset buyTitle
			      C call WriteString
			      C mov edx, offset infoTitle
			      C call WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx,909
			      C je exit&L
			      C 
			      C cmp ecx,2
			      C je buyItem&L
			      C cmp ecx,3
			      C je infoItem&L
			      C jmp endCase&L
			      C 
			      C exit&L:
			      C 	jmp endCase&L
			      C buyItem&L:
			      C 
			      C 	mov edx, c1.gold 
			      C 	mov eax, [ebx].item.buyValue
			      C 	cmp edx,eax
			      C 	jb notEnoughGold&L
			      C 
			      C 	sub c1.gold,eax ;//decrease yout gold
			      C 
			      C 	mov eax,ebx ;//moving for add
			      C 	mov edx,ebx ;//storing for remove
			      C 	mAddItem    ;//adding item to inventory
			      C 	mov ebx,edx ;//moving for remove
			      C 	mRemoveItem ;//removing item from shop
			      C 
			      C 	jmp endCase&L
			      C 
			      C 	notEnoughGold&L:
			      C 
			      C 	call clrscr
			      C 	mov edx, offset notEnoughGoldTitle
			      C 	invoke WriteString
			      C 	mov eax,2000
			      C 	call Delay
			      C 
			      C 	jmp endCase&L
			      C 
			      C infoItem&L:
			      C 	call clrscr
			      C 	mDisplayItemInfo
			      C 	mov eax,2000
			      C 	call Delay
			      C 	
			      C endCase&L:
			      C 
			      C endm
			      C 
			      C mSellMode MACRO
			      C Local L
			      C 
			      C  stillShopping&L:
			      C 
			      C mov ebx, offset i1
			      C 
			      C 
			      C 
			      C mDisplayInventory
			      C 
			      C mov edx, offset buyModeTitle
			      C invoke WriteString
			      C _get_input
			      C 
			      C cmp ecx,0
			      C 	je item0&L
			      C cmp ecx,1
			      C 	je item1&L
			      C cmp ecx,2
			      C 	je item2&L
			      C cmp ecx,3
			      C 	je item3&L
			      C cmp ecx,4
			      C 	je item4&L
			      C cmp ecx,5
			      C 	je item5&L
			      C cmp ecx,6
			      C 	je item6&L
			      C cmp ecx,7
			      C 	je item7&L
			      C cmp ecx,8
			      C 	je item8&L
			      C cmp ecx,9
			      C 	je item9&L
			      C cmp ecx,10
			      C 	je switchToBuyMode&L
			      C 
			      C item0&L:
			      C 	mov ebx,offset i1 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item1&L:
			      C 	mov ebx,offset i2 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item2&L:
			      C 	mov ebx,offset i3 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item3&L:
			      C 	mov ebx,offset i4 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item4&L:
			      C 	mov ebx,offset i5 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item5&L:
			      C 	mov ebx,offset i6 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item6&L:
			      C 	mov ebx,offset i7 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item7&L:
			      C 	mov ebx,offset i8 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item8&L:
			      C 	mov ebx,offset i9 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C item9&L:
			      C 	mov ebx,offset i10 ;//storing item for use
			      C 	mSellOptions
			      C 	jmp stillShopping&L
			      C 
			      C 	
			      C 	
			      C 
			      C 
			      C switchToBuyMode&L:
			      C call clrscr
			      C 
			      C endm
			      C 
			      C mSellOptions MACRO
			      C Local L
			      C call clrscr
			      C 
			      C mov edx, offset sellTitle
			      C invoke WriteString
			      C 
			      C _get_input
			      C 
			      C cmp ecx, 1
			      C je doSell&L
			      C 
			      C doSell&L:
			      C mov eax,[ebx].item.sellValue
			      C mov edx,c1.gold
			      C add edx,eax
			      C mov c1.gold,edx
			      C 
			      C mRemoveItem
			      C 
			      C endm
			      C 
			      C 
				include travel.inc
			      C mTravel MACRO
			      C Local L
			      C 
			      C mov eax,10
			      C call RandomRange 
			      C 
			      C cmp eax,3 ;// 30% chance for shop
			      C jl shop&L
			      C jmp combat&L
			      C shop&L:
			      C 	mShop
			      C combat&L:
			      C 	mCombat
			      C endm
			      C 

				WriteDec proto
				ReadDec proto
				ExitProcess proto, dwExitCode:dword

 000006A4 4D 61 69 6E 20	mainMenuTitle    byte "Main Menu"        , 13, 10, 0
	   4D 65 6E 75 0D
	   0A 00
 000006B0 39 30 39 20 51	quitTitle        byte "909 Quit"         , 13, 10, 0
	   75 69 74 0D 0A
	   00
 000006BB 31 20 43 68 61	characterSheet   byte "1 Character Sheet", 13, 10, 0
	   72 61 63 74 65
	   72 20 53 68 65
	   65 74 0D 0A 00
 000006CF 32 20 43 6F 6D	combatTitle      byte "2 Combat"         , 13, 10, 0
	   62 61 74 0D 0A
	   00
 000006DA 33 20 4C 65 76	levelUpTitle     byte "3 Level Up"       , 13, 10, 0
	   65 6C 20 55 70
	   0D 0A 00
 000006E7 34 20 49 6E 76	inventoryTitle   byte "4 Inventory"      , 13, 10, 0
	   65 6E 74 6F 72
	   79 0D 0A 00
 000006F5 35 20 44 65 71	dequipTitle      byte "5 Dequip"         , 13, 10, 0
	   75 69 70 0D 0A
	   00
 00000700 36 20 53 68 6F	shopTitle        byte "6 Shop"           , 13, 10, 0
	   70 0D 0A 00
 00000709 37 20 54 72 61	travelTitle      byte "7 Travel"         , 13, 10, 0
	   76 65 6C 0D 0A
	   00

 00000714 50 72 65 73 73	continueCommand byte "Press Enter to Continue",13, 10, 0
	   20 45 6E 74 65
	   72 20 74 6F 20
	   43 6F 6E 74 69
	   6E 75 65 0D 0A
	   00

 0000072E 39 30 39 20 45	exitTitle    byte "909 Exit: ", 13, 10, 0
	   78 69 74 3A 20
	   0D 0A 00

 0000073B 20 0D 0A 00		blank byte " ", 13, 10, 0

				save_character proto C character: ptr byte,  filename: ptr byte
				test_print_num proto C


 00000000			.code

 00000000			main proc C

				mGetCharacterName
 00000000  60		     1	pushAD
 00000001  BA 0000016D R     1	mov edx, offset command1 ;//Player inputs character name
 00000006  E8 00000000 E   *	    call   WriteString
 0000000B  BA 00000051 R     1	mov edx, offset c1.characterName
 00000010  B9 00000010	     1	mov ecx, SIZEOF c1.characterName
 00000015  E8 00000000 E     1	call ReadString
 0000001A  E8 00000000 E     1	call clrscr
 0000001F  61		     1	popAD
				mInitializeCharacter
 00000020  60		     1	pushAD
 00000021  FF 05 00000071 R  1	inc c1.brawn   ;// sets primary attributes
 00000027  FF 05 00000075 R  1	inc c1.agility
 0000002D  FF 05 00000079 R  1	inc c1.mind   
 00000033  FF 05 0000007D R  1	inc c1.fortune
 00000039  A1 00000071 R     1	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 0000003E  D1 E0	     1	sal eax,1 ;// multiply by 2
 00000040  A3 00000081 R     1	mov c1.hpMax,eax
 00000045  A3 00000085 R     1	mov c1.hp,eax
 0000004A  A1 00000071 R     1	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000004F  D1 F8	     1	sar eax,1;//divide by 2
 00000051  03 05 0000009D R  1	add eax,c1.weaponDamage
 00000057  A3 00000089 R     1	mov c1.damageMin,eax
 0000005C  8B 1D 00000075 R  1	mov ebx,c1.agility
 00000062  C1 FB 02	     1	sar ebx,2;//divide by 4
 00000065  03 C3	     1	add eax,ebx
 00000067  A3 0000008D R     1	mov c1.damageMax,eax
 0000006C  61		     1	popAD

 0000006D  B9 00000001		mov ecx, 1
 00000072			while_main:						;//while( ecx != 0 )

					
 00000072  BA 000006A4 R		mov edx, offset mainMenuTitle ;//Main Menu Display Start
 00000077  E8 00000000 E		call WriteString
 0000007C  BA 000006B0 R			mov edx, offset quitTitle
 00000081  E8 00000000 E			call WriteString
 00000086  BA 000006BB R			mov edx, offset characterSheet
 0000008B  E8 00000000 E			call WriteString
 00000090  BA 000006CF R			mov edx, offset combatTitle
 00000095  E8 00000000 E			call WriteString
 0000009A  BA 000006DA R			mov edx, offset levelUpTitle
 0000009F  E8 00000000 E			call WriteString
 000000A4  BA 000006E7 R			mov edx, offset inventoryTitle
 000000A9  E8 00000000 E			call WriteString
 000000AE  BA 000006F5 R			mov edx, offset dequipTitle
 000000B3  E8 00000000 E			call WriteString
 000000B8  BA 00000700 R			mov edx, offset shopTitle
 000000BD  E8 00000000 E			call WriteString
 000000C2  BA 00000709 R			mov edx, offset travelTitle
 000000C7  E8 00000000 E			call WriteString

						_get_input
 000000CC  E8 00000000 E     1		call ReadDec
 000000D1  8B C8	     1		mov ecx, eax

 000000D3  E8 00000000 E			call Clrscr

 000000D8  81 F9 0000038D		cmp ecx, 909;//switch
 000000DE  0F 84 00004500		je endwhile_main
 000000E4  83 F9 01			cmp ecx, 1
 000000E7  74 3B			je character_sheet
 000000E9  83 F9 02			cmp ecx, 2
 000000EC  0F 84 00000284		je combat
 000000F2  83 F9 03			cmp ecx, 3
 000000F5  0F 84 00000609		je levelUp
 000000FB  83 F9 04			cmp ecx, 4
 000000FE  0F 84 00000722		je inventory
 00000104  83 F9 05			cmp ecx, 5
 00000107  0F 84 00001F12		je dequip
 0000010D  83 F9 06			cmp ecx, 6
 00000110  0F 84 00001FE3		je shop
 00000116  83 F9 07			cmp ecx, 7
 00000119  0F 84 00003080		je travel
 0000011F  E9 000044BB			jmp end_switch

 00000124				character_sheet:
						mPrintCharacterSheet
 00000124  60		     1	pushAD
 00000125  BA 000000A5 R     1	mov edx, offset characterSheetTitle ;//prints a header
 0000012A  E8 00000000 E   *	    call   WriteString
 0000012F  BA 000000BA R     1	mov edx, offset xPosTitle ;// prints x position
 00000134  E8 00000000 E   *	    call   WriteString
 00000139  A1 00000049 R     1	mov eax, c1.xPos
 0000013E  E8 00000000 E     1	call WriteDec
 00000143  BA 0000073B R     1	mov edx, offset blank
 00000148  E8 00000000 E   *	    call   WriteString
 0000014D  BA 000000C3 R     1	mov edx, offset yPosTitle ;// prints y position
 00000152  E8 00000000 E   *	    call   WriteString
 00000157  A1 0000004D R     1	mov eax, c1.yPos
 0000015C  E8 00000000 E     1	call WriteDec
 00000161  BA 0000073B R     1	mov edx, offset blank
 00000166  E8 00000000 E   *	    call   WriteString
 0000016B  BA 000000CC R     1	mov edx, offset nameTitle ;// prints character name
 00000170  E8 00000000 E   *	    call   WriteString
 00000175  BA 00000051 R     1	mov edx, offset c1.CharacterName
 0000017A  E8 00000000 E     1	Call WriteString
 0000017F  BA 0000073B R     1	mov edx, offset blank
 00000184  E8 00000000 E   *	    call   WriteString
 00000189  BA 000000D5 R     1	mov edx, offset levelTitle ;//prints character level
 0000018E  E8 00000000 E   *	    call   WriteString
 00000193  A1 00000061 R     1	mov eax, c1.level
 00000198  E8 00000000 E     1	call WriteDec
 0000019D  BA 0000073B R     1	mov edx, offset blank
 000001A2  E8 00000000 E   *	    call   WriteString
 000001A7  BA 000000DF R     1	mov edx, offset expTitle ;//prints character exp
 000001AC  E8 00000000 E   *	    call   WriteString
 000001B1  A1 00000065 R     1	mov eax, c1.exp
 000001B6  E8 00000000 E     1	call WriteDec
 000001BB  B8 0000002F	     1	mov eax,'/'
 000001C0  E8 00000000 E     1	call WriteChar
 000001C5  A1 00000069 R     1	mov eax, c1.expToNext
 000001CA  E8 00000000 E     1	call WriteDec
 000001CF  BA 0000073B R     1	mov edx, offset blank
 000001D4  E8 00000000 E   *	    call   WriteString
 000001D9  BA 000000E7 R     1	mov edx, offset goldTitle
 000001DE  E8 00000000 E   *	    call   WriteString
 000001E3  A1 0000006D R     1	mov eax, c1.Gold
 000001E8  E8 00000000 E     1	call WriteDec
 000001ED  BA 0000073B R     1	mov edx, offset blank
 000001F2  E8 00000000 E   *	    call   WriteString
 000001F7  BA 000000F0 R     1	mov edx, offset primaryAttributesTitle ;//prints primary attributes header
 000001FC  E8 00000000 E   *	    call   WriteString
 00000201  BA 00000109 R     1	mov edx, offset brawnTitle ;//prints character brawn
 00000206  E8 00000000 E   *	    call   WriteString
 0000020B  A1 00000071 R     1	mov eax, c1.brawn
 00000210  E8 00000000 E     1	call WriteDec
 00000215  BA 0000073B R     1	mov edx, offset blank
 0000021A  E8 00000000 E   *	    call   WriteString
 0000021F  BA 00000112 R     1	mov edx, offset agilityTitle ;//prints character agility
 00000224  E8 00000000 E   *	    call   WriteString
 00000229  A1 00000075 R     1	mov eax, c1.agility
 0000022E  E8 00000000 E     1	call WriteDec
 00000233  BA 0000073B R     1	mov edx, offset blank
 00000238  E8 00000000 E   *	    call   WriteString
 0000023D  BA 0000011D R     1	mov edx, offset mindTitle ;//prints character mind
 00000242  E8 00000000 E   *	    call   WriteString
 00000247  A1 00000079 R     1	mov eax, c1.mind
 0000024C  E8 00000000 E     1	call WriteDec
 00000251  BA 0000073B R     1	mov edx, offset blank
 00000256  E8 00000000 E   *	    call   WriteString
 0000025B  BA 00000125 R     1	mov edx, offset fortuneTitle ;//prints character fortune
 00000260  E8 00000000 E   *	    call   WriteString
 00000265  A1 0000007D R     1	mov eax, c1.fortune
 0000026A  E8 00000000 E     1	call WriteDec
 0000026F  BA 0000073B R     1	mov edx, offset blank
 00000274  E8 00000000 E   *	    call   WriteString
 00000279  BA 00000130 R     1	mov edx, offset combatAttributesTitle ;//prints primary attributes header
 0000027E  E8 00000000 E   *	    call   WriteString
 00000283  BA 00000148 R     1	mov edx, offset hpTitle ;//prints character hp
 00000288  E8 00000000 E   *	    call   WriteString
 0000028D  A1 00000085 R     1	mov eax, c1.hp
 00000292  E8 00000000 E     1	call WriteDec
 00000297  B8 0000002F	     1	mov eax,'/'
 0000029C  E8 00000000 E     1	call WriteChar
 000002A1  A1 00000081 R     1	mov eax, c1.hpMax
 000002A6  E8 00000000 E     1	call WriteDec
 000002AB  BA 0000073B R     1	mov edx, offset blank
 000002B0  E8 00000000 E   *	    call   WriteString
 000002B5  BA 0000014E R     1	mov edx, offset damageTitle ;//prints character damage
 000002BA  E8 00000000 E   *	    call   WriteString
 000002BF  A1 00000089 R     1	mov eax, c1.damageMin
 000002C4  E8 00000000 E     1	call WriteDec
 000002C9  B8 0000002D	     1	mov eax,'-'
 000002CE  E8 00000000 E     1	call WriteChar
 000002D3  A1 0000008D R     1	mov eax, c1.damageMax
 000002D8  E8 00000000 E     1	call WriteDec
 000002DD  BA 0000073B R     1	mov edx, offset blank
 000002E2  E8 00000000 E   *	    call   WriteString
 000002E7  BA 00000158 R     1	mov edx, offset defenceTitle ;//prints character defence
 000002EC  E8 00000000 E   *	    call   WriteString
 000002F1  A1 000000A1 R     1	mov eax, c1.defence
 000002F6  E8 00000000 E     1	call WriteDec
 000002FB  BA 0000073B R     1	mov edx, offset blank
 00000300  E8 00000000 E   *	    call   WriteString
 00000305  BA 00000163 R     1	mov edx, offset equippedWeaponTitle
 0000030A  E8 00000000 E   *	    call   WriteString
 0000030F  A1 00000091 R     1	mov eax, c1.weaponCode
 00000314  83 F8 01	     2	cmp eax,1
 00000317  74 11	     2	je item0??0001
 00000319  83 F8 02	     2	cmp eax,2
 0000031C  74 13	     2	je item1??0001
 0000031E  83 F8 03	     2	cmp eax,3
 00000321  74 15	     2	je item2??0001
 00000323  83 F8 04	     2	cmp eax,4
 00000326  74 17	     2	je item3??0001
 00000328  EB 1C	     2	jmp default??0001
 0000032A		     2	item0??0001:
 0000032A  BA 00000000 R     2		mov edx, offset itemName1
 0000032F  EB 1A	     2		jmp print??0001
 00000331		     2	item1??0001:
 00000331  BA 00000009 R     2		mov edx, offset itemName2
 00000336  EB 13	     2		jmp print??0001
 00000338		     2	item2??0001:
 00000338  BA 00000013 R     2		mov edx, offset itemName3
 0000033D  EB 0C	     2		jmp print??0001
 0000033F		     2	item3??0001:
 0000033F  BA 0000001B R     2		mov edx, offset itemName4
 00000344  EB 05	     2		jmp print??0001
 00000346		     2	default??0001:
 00000346  BA 00000038 R     2		mov edx, offset defaultName
 0000034B		     2	print??0001:
 0000034B  E8 00000000 E   *	    call   WriteString
 00000350  BA 0000073B R     1	mov edx, offset blank
 00000355  E8 00000000 E   *	    call   WriteString
 0000035A  BA 00000714 R     1	mov edx, offset continueCommand
 0000035F  E8 00000000 E   *	    call   WriteString
 00000364  E8 00000000 E     2		call ReadDec
 00000369  8B C8	     2		mov ecx, eax
 0000036B  E8 00000000 E     1	call clrscr
 00000370  61		     1	popAD
 00000371  E9 00004269				jmp end_switch
 00000376				combat:
						mCombat
 00000376  60		     1	pushAD
 00000377  60		     2	pushAD
 00000378  8B 1D 00000061 R  2	mov ebx, c1.level ;//initialize enemy hp
 0000037E  B8 00000003	     2	mov eax,3
 00000383  E8 00000000 E     2	call RandomRange
 00000388  40		     2	inc eax
 00000389  F7 E3	     2	mul ebx
 0000038B  A3 000001A1 R     2	mov e1.hpMax,eax
 00000390  A3 000001A5 R     2	mov e1.hp,eax
 00000395  B8 00000002	     2	mov eax, 2 ;//initialize enemy damage
 0000039A  E8 00000000 E     2	call RandomRange
 0000039F  40		     2	inc eax
 000003A0  03 C3	     2	add eax,ebx
 000003A2  A3 000001A9 R     2	mov e1.damageMin,eax
 000003A7  8B C8	     2	mov ecx,eax
 000003A9  B8 00000002	     2	mov eax,2
 000003AE  E8 00000000 E     2	call RandomRange
 000003B3  40		     2	inc eax
 000003B4  03 C1	     2	add eax,ecx
 000003B6  A3 000001AD R     2	mov e1.damageMax,eax
 000003BB  A1 000001A1 R     2	mov eax,e1.hpMax ;//initialize expReward
 000003C0  BB 0000000A	     2	mov ebx,10
 000003C5  F7 E3	     2	mul ebx
 000003C7  A3 000001B5 R     2	mov e1.expReward ,eax
 000003CC  61		     2	popAD
 000003CD  A1 00000081 R     1	mov eax,c1.hpMax
 000003D2  A3 00000085 R     1	mov c1.hp,eax
 000003D7  C6 05 000001B9 R  1	mov escape        ,0 ;//combat end conditions
	   00
 000003DE  C6 05 000001BA R  1	mov playerDefeated,0
	   00
 000003E5  C6 05 000001BB R  1	mov enemyDefeated ,0
	   00
 000003EC		     1	WHILE_COMBAT??0003:    ;//disgusting triple & while statement
 000003EC  80 3D 000001B9 R  1	cmp escape,0       ;//while &
	   00
 000003F3  74 05	     1	je AND_COMBAT1??0003
 000003F5  E9 0000020D	     1	jmp AND_FALSE_COMBAT??0003
 000003FA  80 3D 000001BA R  1	AND_COMBAT1??0003: cmp playerDefeated,0
	   00
 00000401  74 05	     1	je AND_COMBAT2??0003
 00000403  E9 000001FF	     1	jmp AND_FALSE_COMBAT??0003
 00000408  80 3D 000001BB R  1	AND_COMBAT2??0003: cmp enemyDefeated,0
	   00
 0000040F  74 05	     1	je AND_COMBAT_TRUE??0003
 00000411  E9 000001F1	     1	jmp AND_FALSE_COMBAT??0003
 00000416		     1	AND_COMBAT_TRUE??0003:
 00000416  BA 000001BC R     1		mov edx, offset combatMenuTitle
 0000041B  E8 00000000 E   *	    call   WriteString
 00000420  BA 000001C9 R     1		mov edx, offset enemyNameTitle ;//prints enemy name
 00000425  E8 00000000 E   *	    call   WriteString
 0000042A  BA 00000199 R     1		mov edx, offset e1.enemyName
 0000042F  E8 00000000 E   *	    call   WriteString
 00000434  BA 0000073B R     1		mov edx, offset blank
 00000439  E8 00000000 E   *	    call   WriteString
 0000043E  BA 000001D7 R     1		mov edx, offset enemyHpTitle ;//prints enemy hp
 00000443  E8 00000000 E   *	    call   WriteString
 00000448  A1 000001A5 R     1		mov eax, e1.hp
 0000044D  E8 00000000 E     1		call WriteDec
 00000452  B8 0000002F	     1		mov eax,'/'
 00000457  E8 00000000 E     1		call WriteChar
 0000045C  A1 000001A1 R     1		mov eax, e1.hpMax
 00000461  E8 00000000 E     1		call WriteDec
 00000466  BA 0000073B R     1		mov edx, offset blank
 0000046B  E8 00000000 E   *	    call   WriteString
 00000470  BA 000001E3 R     1		mov edx, offset enemyDamageTitle ;//prints enemy damage
 00000475  E8 00000000 E   *	    call   WriteString
 0000047A  A1 000001A9 R     1		mov eax, e1.damageMin
 0000047F  E8 00000000 E     1		call WriteDec
 00000484  B8 0000002D	     1		mov eax,'-'
 00000489  E8 00000000 E     1		call WriteChar
 0000048E  A1 000001AD R     1		mov eax, e1.damageMax
 00000493  E8 00000000 E     1		call WriteDec
 00000498  BA 0000073B R     1		mov edx, offset blank
 0000049D  E8 00000000 E   *	    call   WriteString
 000004A2  BA 00000130 R     1		mov edx, offset combatAttributesTitle ;//prints primary attributes header
 000004A7  E8 00000000 E   *	    call   WriteString
 000004AC  BA 00000148 R     1		mov edx, offset hpTitle ;//prints character hp
 000004B1  E8 00000000 E   *	    call   WriteString
 000004B6  A1 00000085 R     1		mov eax, c1.hp
 000004BB  E8 00000000 E     1		call WriteDec
 000004C0  B8 0000002F	     1		mov eax,'/'
 000004C5  E8 00000000 E     1		call WriteChar
 000004CA  A1 00000081 R     1		mov eax, c1.hpMax
 000004CF  E8 00000000 E     1		call WriteDec
 000004D4  BA 0000073B R     1		mov edx, offset blank
 000004D9  E8 00000000 E   *	    call   WriteString
 000004DE  BA 0000014E R     1		mov edx, offset damageTitle ;//prints character damage
 000004E3  E8 00000000 E   *	    call   WriteString
 000004E8  A1 00000089 R     1		mov eax, c1.damageMin
 000004ED  E8 00000000 E     1		call WriteDec
 000004F2  B8 0000002D	     1		mov eax,'-'
 000004F7  E8 00000000 E     1		call WriteChar
 000004FC  A1 0000008D R     1		mov eax, c1.damageMax
 00000501  E8 00000000 E     1		call WriteDec
 00000506  BA 0000073B R     1		mov edx, offset blank
 0000050B  E8 00000000 E   *	    call   WriteString
 00000510  BA 000001F3 R     1		mov edx, offset combatOptionsMenuTitle ;//prints combat Options
 00000515  E8 00000000 E   *	    call   WriteString
 0000051A  BA 00000208 R     1		mov edx,offset attackTitle
 0000051F  E8 00000000 E   *	    call   WriteString
 00000524  BA 00000214 R     1		mov edx,offset fleeTitle
 00000529  E8 00000000 E   *	    call   WriteString
 0000052E  E8 00000000 E     2		call ReadDec
 00000533  8B C8	     2		mov ecx, eax
 00000535  E8 00000000 E     1		call Clrscr
 0000053A  83 F9 00	     1			cmp ecx, 0 ;//switch
 0000053D  74 07	     1			je attack??0003
 0000053F  83 F9 01	     1			cmp ecx, 1
 00000542  74 5B	     1			je flee??0003
 00000544  EB 60	     1			jmp end_switch??0003
 00000546		     1			attack??0003:
 00000546  A1 0000008D R     1				mov eax,c1.damageMax;//player attacks
 0000054B  8B 1D 00000089 R  1				mov ebx,c1.damageMin
 00000551  2B C3	     1				sub eax,ebx
 00000553  40		     1				inc eax
 00000554  E8 00000000 E     1				call RandomRange
 00000559  03 C3	     1				add eax,ebx
 0000055B  29 05 000001A5 R  1				sub e1.hp,eax
 00000561  BA 00000291 R     1				mov edx, offset youDealtTitle
 00000566  E8 00000000 E   *	    call   WriteString
 0000056B  E8 00000000 E     1				call WriteDec
 00000570  BA 00000287 R     1				mov edx, offset damageCombatTitle
 00000575  E8 00000000 E   *	    call   WriteString
 0000057A  BA 00000714 R     1				mov edx, offset continueCommand
 0000057F  E8 00000000 E   *	    call   WriteString
 00000584  E8 00000000 E     2		call ReadDec
 00000589  8B C8	     2		mov ecx, eax
 0000058B  83 3D 000001A5 R  1				cmp e1.hp,0 ;//check to see if enemy died
	   00
 00000592  7E 02	     1				jle enemy_dead??0003
 00000594  EB 10	     1				jmp end_switch??0003
 00000596		     1				enemy_dead??0003:
 00000596  C6 05 000001BB R  1					mov enemyDefeated,1
	   01
 0000059D  EB 68	     1					jmp AND_FALSE_COMBAT??0003
 0000059F		     1			flee??0003:
 0000059F  C6 05 000001B9 R  1				mov escape,1
	   01
 000005A6		     1			end_switch??0003:
 000005A6  A1 000001AD R     1				mov eax,e1.damageMax;//enemy attacks
 000005AB  8B 1D 000001A9 R  1				mov ebx,e1.damageMin
 000005B1  2B C3	     1				sub eax,ebx
 000005B3  40		     1				inc eax
 000005B4  E8 00000000 E     1				call RandomRange
 000005B9  03 C3	     1				add eax,ebx
 000005BB  29 05 00000085 R  1				sub c1.hp,eax
 000005C1  BA 0000027B R     1				mov edx, offset youTookTitle
 000005C6  E8 00000000 E   *	    call   WriteString
 000005CB  E8 00000000 E     1				call WriteDec
 000005D0  BA 00000287 R     1				mov edx, offset damageCombatTitle
 000005D5  E8 00000000 E   *	    call   WriteString
 000005DA  BA 00000714 R     1				mov edx, offset continueCommand
 000005DF  E8 00000000 E   *	    call   WriteString
 000005E4  E8 00000000 E     2		call ReadDec
 000005E9  8B C8	     2		mov ecx, eax
 000005EB  E8 00000000 E     1				call Clrscr
 000005F0  83 3D 00000085 R  1				cmp c1.hp,0    ;// checking to see if character died
	   00
 000005F7  7E 02	     1				jle character_dead??0003
 000005F9  EB 07	     1				jmp character_not_dead??0003
 000005FB		     1				character_dead??0003:
 000005FB  C6 05 000001BA R  1					mov playerDefeated,1
	   01
 00000602		     1				character_not_dead??0003:
 00000602  E9 FFFFFDE5	     1			jmp WHILE_COMBAT??0003;//default
 00000607		     1	AND_FALSE_COMBAT??0003:
 00000607  80 3D 000001B9 R  1	cmp escape,0
	   00
 0000060E  74 0F	     1	je not_escape??0003
 00000610  BA 0000021E R     1	mov edx, offset escapeEvent;//will print if player fleed
 00000615  E8 00000000 E   *	    call   WriteString
 0000061A  E9 000000C9	     1	jmp eventDetermined??0003
 0000061F		     1	not_escape??0003:
 0000061F  80 3D 000001BA R  1	cmp playerDefeated,0
	   00
 00000626  74 0F	     1	je not_playerDefeated??0003
 00000628  BA 0000022D R     1	mov edx, offset playerDefeatedEvent;//will print if player was defeated
 0000062D  E8 00000000 E   *	    call   WriteString
 00000632  E9 000000B1	     1	jmp eventDetermined??0003
 00000637		     1	not_playerDefeated??0003:
 00000637  BA 00000241 R     1	mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
 0000063C  E8 00000000 E   *	    call   WriteString
 00000641  B8 00000423 R     1	mov eax, offset t1 ;//adds axe to inventory
 00000646  BB 00000407 R     2	mov ebx, offset i1
 0000064B		     2	notEmpty??0007:
 0000064B  83 3B 00	     2	cmp [ebx].item.itemCode,0
 0000064E  74 0B	     2	je isEmpty??0007 
 00000650  83 7B 10 00	     2	cmp [ebx].item.next,null
 00000654  74 1D	     2	je inventoryFull??0007
 00000656  8B 5B 10	     2	mov ebx,[ebx].item.next
 00000659  EB F0	     2	jmp notEmpty??0007
 0000065B		     2	isEmpty??0007:
 0000065B  8B 08	     2	mov ecx, [eax].item.itemCode
 0000065D  89 0B	     2	mov [ebx].item.itemCode,ecx
 0000065F  8B 48 04	     2	mov ecx, [eax].item.buyValue
 00000662  89 4B 04	     2	mov [ebx].item.buyValue,ecx
 00000665  8B 48 08	     2	mov ecx, [eax].item.sellValue
 00000668  89 4B 08	     2	mov [ebx].item.sellValue,ecx
 0000066B  8B 48 14	     2	mov ecx, [eax].item.combatValue
 0000066E  89 4B 14	     2	mov [ebx].item.combatValue,ecx
 00000671  EB 19	     2	jmp end??0007
 00000673		     2	inventoryFull??0007:
 00000673  BA 000004D0 R     2	mov edx, offset inventoryFullTitle
 00000678  E8 00000000 E   *	    call   WriteString
 0000067D  B8 000005DC	     2	mov eax, 1500
 00000682  E8 00000000 E     2	call Delay
 00000687  E8 00000000 E     2	call clrscr
 0000068C		     2	end??0007:
 0000068C  A1 00000061 R     1	mov eax, c1.level
 00000691  B9 0000000A	     1	mov ecx,10
 00000696  F7 E1	     1	mul ecx
 00000698  E8 00000000 E     1	call RandomRange
 0000069D  8B 1D 0000006D R  1	mov ebx,c1.gold
 000006A3  03 D8	     1	add ebx,eax
 000006A5  89 1D 0000006D R  1	mov c1.gold,ebx
 000006AB  BA 0000025A R     1	mov edx,offset youGotTitle
 000006B0  E8 00000000 E   *	    call   WriteString
 000006B5  E8 00000000 E     1	call WriteDec
 000006BA  BA 00000265 R     1	mov edx,offset goldRewardTitle
 000006BF  E8 00000000 E   *	    call   WriteString
 000006C4  A1 000001B5 R     1	mov eax,e1.expReward ;//rewarding player exp
 000006C9  01 05 00000065 R  1	add c1.exp,eax
 000006CF  BA 0000025A R     1	mov edx,offset youGotTitle
 000006D4  E8 00000000 E   *	    call   WriteString
 000006D9  E8 00000000 E     1	call WriteDec
 000006DE  BA 0000026D R     1	mov edx,offset expRewardTitle
 000006E3  E8 00000000 E   *	    call   WriteString
 000006E8		     1	eventDetermined??0003:
 000006E8  BA 00000714 R     1	mov edx, offset continueCommand
 000006ED  E8 00000000 E   *	    call   WriteString
 000006F2  E8 00000000 E     2		call ReadDec
 000006F7  8B C8	     2		mov ecx, eax
 000006F9  E8 00000000 E     1	call Clrscr
 000006FE  61		     1	popAD
 000006FF  E9 00003EDB				jmp end_switch
 00000704				levelUp:
						mLevelUp
 00000704  60		     1	pushAD
 00000705  A1 00000065 R     1	mov eax,c1.exp
 0000070A  8B 1D 00000069 R  1	mov ebx,c1.expToNext
 00000710  3B C3	     1	cmp eax,ebx
 00000712  0F 8C 000000EF    1	jl notEnough
 00000718  FF 05 00000061 R  1	inc c1.level
 0000071E  60		     2	pushAD
 0000071F  FF 05 00000071 R  2	inc c1.brawn   ;// sets primary attributes
 00000725  FF 05 00000075 R  2	inc c1.agility
 0000072B  FF 05 00000079 R  2	inc c1.mind   
 00000731  FF 05 0000007D R  2	inc c1.fortune
 00000737  A1 00000071 R     2	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 0000073C  D1 E0	     2	sal eax,1 ;// multiply by 2
 0000073E  A3 00000081 R     2	mov c1.hpMax,eax
 00000743  A3 00000085 R     2	mov c1.hp,eax
 00000748  A1 00000071 R     2	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 0000074D  D1 F8	     2	sar eax,1;//divide by 2
 0000074F  03 05 0000009D R  2	add eax,c1.weaponDamage
 00000755  A3 00000089 R     2	mov c1.damageMin,eax
 0000075A  8B 1D 00000075 R  2	mov ebx,c1.agility
 00000760  C1 FB 02	     2	sar ebx,2;//divide by 4
 00000763  03 C3	     2	add eax,ebx
 00000765  A3 0000008D R     2	mov c1.damageMax,eax
 0000076A  61		     2	popAD
 0000076B  A1 00000065 R     1	mov eax,c1.exp
 00000770  8B 1D 00000069 R  1	mov ebx,c1.expToNext
 00000776  2B C3	     1	sub eax,ebx
 00000778  A3 00000065 R     1	mov c1.exp,eax
 0000077D  BA 000002C8 R     1	mov edx, offset attributeSelection
 00000782  E8 00000000 E   *	    call   WriteString
 00000787  BA 000002E0 R     1	mov edx, offset brawnAttribute
 0000078C  E8 00000000 E   *	    call   WriteString
 00000791  BA 000002EA R     1	mov edx, offset agilityAttribute
 00000796  E8 00000000 E   *	    call   WriteString
 0000079B  BA 000002F6 R     1	mov edx, offset mindAttribute
 000007A0  E8 00000000 E   *	    call   WriteString
 000007A5  BA 000002FF R     1	mov edx, offset fortuneAttribute
 000007AA  E8 00000000 E   *	    call   WriteString
 000007AF  E8 00000000 E     2		call ReadDec
 000007B4  8B C8	     2		mov ecx, eax
 000007B6		     1	invalidAttribute:
 000007B6  83 F9 00	     1	cmp ecx,0
 000007B9  74 11	     1	je brawn
 000007BB  83 F9 01	     1	cmp ecx,1
 000007BE  74 14	     1	je agility
 000007C0  83 F9 02	     1	cmp ecx,2
 000007C3  74 17	     1	je mind
 000007C5  83 F9 03	     1	cmp ecx,3
 000007C8  74 1A	     1	je fortune
 000007CA  EB EA	     1	jmp invalidAttribute
 000007CC		     1	brawn:
 000007CC  FF 05 00000071 R  1		inc c1.brawn
 000007D2  EB 18	     1		jmp validAttribute
 000007D4		     1	agility:
 000007D4  FF 05 00000075 R  1		inc c1.agility
 000007DA  EB 10	     1		jmp validAttribute
 000007DC		     1	mind:
 000007DC  FF 05 00000079 R  1		inc c1.mind
 000007E2  EB 08	     1		jmp validAttribute
 000007E4		     1	fortune:
 000007E4  FF 05 0000007D R  1		inc c1.fortune
 000007EA  EB 00	     1		jmp validAttribute
 000007EC		     1		validAttribute:
 000007EC  E8 00000000 E     1	call clrscr
 000007F1  BA 000002B6 R     1	mov edx,offset leveledUpResponse
 000007F6  E8 00000000 E   *	    call   WriteString
 000007FB  B8 000007D0	     1	mov eax,2000
 00000800  E8 00000000 E     1	call Delay
 00000805  EB 14	     1	jmp leveledUp
 00000807		     1	notEnough:
 00000807  BA 0000029E R     1	mov edx,offset notEnoughResponse
 0000080C  E8 00000000 E   *	    call   WriteString
 00000811  B8 000007D0	     1	mov eax,2000
 00000816  E8 00000000 E     1	call Delay
 0000081B		     1	leveledUp:
 0000081B  E8 00000000 E     1	call Clrscr
 00000820  61		     1	popAD
 00000821  E9 00003DB9				jmp end_switch
 00000826				inventory:
						mInventory
 00000826  BA 00000447 R     1	mov edx, offset selectItemTitle
 0000082B  E8 00000000 E     1	call WriteString
 00000830  BB 00000407 R     1	mov eBx, offset i1
 00000835  60		     2	pushAD
 00000836  33 C9	     2	xor ecx,ecx
 00000838		     2	DO1??000A:
 00000838  8B C1	     2	mov eax,ecx
 0000083A  E8 00000000 E     2	call WriteDec
 0000083F  B8 0000003A	     2	mov eax, ':'
 00000844  E8 00000000 E     2	call WriteChar
 00000849  8B 03	     2	mov eax, [ebx].item.itemCode
 0000084B  83 F8 01	     3	cmp eax,1
 0000084E  74 11	     3	je item0??000B
 00000850  83 F8 02	     3	cmp eax,2
 00000853  74 13	     3	je item1??000B
 00000855  83 F8 03	     3	cmp eax,3
 00000858  74 15	     3	je item2??000B
 0000085A  83 F8 04	     3	cmp eax,4
 0000085D  74 17	     3	je item3??000B
 0000085F  EB 1C	     3	jmp default??000B
 00000861		     3	item0??000B:
 00000861  BA 00000000 R     3		mov edx, offset itemName1
 00000866  EB 1A	     3		jmp print??000B
 00000868		     3	item1??000B:
 00000868  BA 00000009 R     3		mov edx, offset itemName2
 0000086D  EB 13	     3		jmp print??000B
 0000086F		     3	item2??000B:
 0000086F  BA 00000013 R     3		mov edx, offset itemName3
 00000874  EB 0C	     3		jmp print??000B
 00000876		     3	item3??000B:
 00000876  BA 0000001B R     3		mov edx, offset itemName4
 0000087B  EB 05	     3		jmp print??000B
 0000087D		     3	default??000B:
 0000087D  BA 00000038 R     3		mov edx, offset defaultName
 00000882		     3	print??000B:
 00000882  E8 00000000 E   *	    call   WriteString
 00000887  BA 0000073B R     2	mov edx,offset blank
 0000088C  E8 00000000 E     2	call WriteString
 00000891  8B 5B 10	     2	mov eBx,[ebx].item.next
 00000894  41		     2	inc ecx
 00000895  83 FB 00	     2	cmp ebx,null
 00000898  75 9E	     2	jne DO1??000A
 0000089A  61		     2	popAD
 0000089B  E8 00000000 E     2		call ReadDec
 000008A0  8B C8	     2		mov ecx, eax
 000008A2  83 F9 00	     1	cmp ecx,0
 000008A5  74 51	     1		je item0
 000008A7  83 F9 01	     1	cmp ecx,1
 000008AA  0F 84 00000298    1		je item1
 000008B0  83 F9 02	     1	cmp ecx,2
 000008B3  0F 84 000004DF    1		je item2
 000008B9  83 F9 03	     1	cmp ecx,3
 000008BC  0F 84 00000726    1		je item3
 000008C2  83 F9 04	     1	cmp ecx,4
 000008C5  0F 84 0000096D    1		je item4
 000008CB  83 F9 05	     1	cmp ecx,5
 000008CE  0F 84 00000BB4    1		je item5
 000008D4  83 F9 06	     1	cmp ecx,6
 000008D7  0F 84 00000DFB    1		je item6
 000008DD  83 F9 07	     1	cmp ecx,7
 000008E0  0F 84 00001042    1		je item7
 000008E6  83 F9 08	     1	cmp ecx,8
 000008E9  0F 84 00001289    1		je item8
 000008EF  83 F9 09	     1	cmp ecx,9
 000008F2  0F 84 000014D0    1		je item9
 000008F8		     1	item0:
 000008F8  BB 00000407 R     1		mov ebx,offset i1 ;//storing item for use
 000008FD  BA 0000072E R     2	mov edx, offset exitTitle
 00000902  E8 00000000 E     2	call WriteString
 00000907  BA 0000045C R     2	mov edx, offset discardTitle
 0000090C  E8 00000000 E     2	call WriteString
 00000911  BA 0000046A R     2	mov edx, offset equipTitle
 00000916  E8 00000000 E     2	call WriteString
 0000091B  BA 00000476 R     2	mov edx, offset infoTitle
 00000920  E8 00000000 E     2	call WriteString
 00000925  E8 00000000 E     3		call ReadDec
 0000092A  8B C8	     3		mov ecx, eax
 0000092C  81 F9 0000038D    2	cmp ecx,909
 00000932  74 18	     2	je exit??000D
 00000934  83 F9 01	     2	cmp ecx,1
 00000937  74 18	     2	je removeItem??000D
 00000939  83 F9 02	     2	cmp ecx,2
 0000093C  74 2C	     2	je equipItem??000D
 0000093E  83 F9 03	     2	cmp ecx,3
 00000941  0F 84 0000018F    2	je infoItem??000D
 00000947  E9 000001F7	     2	jmp endCase??000D
 0000094C		     2	exit??000D:
 0000094C  E9 000001F2	     2		jmp endCase??000D
 00000951		     2	removeItem??000D:
 00000951  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000957  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000095E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000965  E9 000001D9	     2		jmp endCase??000D
 0000096A		     2	equipItem??000D:
 0000096A  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 00000971  0F 84 000000D9    3	je notEquipped??000F
 00000977  8B D3	     3	mov edx,ebx
 00000979  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 00000980  0F 84 000000C8    4	je nothingEquipped??0010
 00000986  BB 00000407 R     4	mov ebx, offset i1
 0000098B		     4	notEmpty??0010:
 0000098B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 0000098E  74 0F	     4	je isEmpty??0010 
 00000990  83 7B 10 00	     4	cmp [ebx].item.next,null
 00000994  0F 84 0000009B    4	je inventoryFull??0010
 0000099A  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000099D  EB EC	     4	jmp notEmpty??0010
 0000099F		     4	isEmpty??0010:
 0000099F  A1 00000091 R     4	mov eax, c1.weaponCode
 000009A4  89 03	     4	mov [ebx].item.itemCode,eax
 000009A6  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 000009B0  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 000009B5  89 43 04	     4	mov [ebx].item.buyValue,eax
 000009B8  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 000009C2  A1 00000099 R     4	mov eax, c1.weaponSellValue
 000009C7  89 43 08	     4	mov [ebx].item.sellValue,eax
 000009CA  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 000009D4  A1 0000009D R     4	mov eax, c1.weaponDamage
 000009D9  89 43 14	     4	mov [ebx].item.combatValue,eax
 000009DC  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 000009E6  60		     5	pushAD
 000009E7  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 000009ED  FF 05 00000075 R  5	inc c1.agility
 000009F3  FF 05 00000079 R  5	inc c1.mind   
 000009F9  FF 05 0000007D R  5	inc c1.fortune
 000009FF  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000A04  D1 E0	     5	sal eax,1 ;// multiply by 2
 00000A06  A3 00000081 R     5	mov c1.hpMax,eax
 00000A0B  A3 00000085 R     5	mov c1.hp,eax
 00000A10  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000A15  D1 F8	     5	sar eax,1;//divide by 2
 00000A17  03 05 0000009D R  5	add eax,c1.weaponDamage
 00000A1D  A3 00000089 R     5	mov c1.damageMin,eax
 00000A22  8B 1D 00000075 R  5	mov ebx,c1.agility
 00000A28  C1 FB 02	     5	sar ebx,2;//divide by 4
 00000A2B  03 C3	     5	add eax,ebx
 00000A2D  A3 0000008D R     5	mov c1.damageMax,eax
 00000A32  61		     5	popAD
 00000A33  EB 19	     4	jmp nothingEquipped??0010
 00000A35		     4	inventoryFull??0010:
 00000A35  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00000A3A  E8 00000000 E   *	    call   WriteString
 00000A3F  B8 000005DC	     4	mov eax, 1500
 00000A44  E8 00000000 E     4	call Delay
 00000A49  E8 00000000 E     4	call clrscr
 00000A4E		     4	nothingEquipped??0010:
 00000A4E  8B DA	     3	mov ebx,edx
 00000A50		     3	notEquipped??000F:
 00000A50  8B 13	     3	mov edx, [ebx].item.itemCode
 00000A52  89 15 00000091 R  3	mov c1.weaponCode, edx
 00000A58  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000A5B  89 15 0000009D R  3	mov c1.weaponDamage, edx
 00000A61  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000A64  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 00000A6A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000A6D  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00000A73  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000A79  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000A80  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000A87  60		     4	pushAD
 00000A88  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 00000A8E  FF 05 00000075 R  4	inc c1.agility
 00000A94  FF 05 00000079 R  4	inc c1.mind   
 00000A9A  FF 05 0000007D R  4	inc c1.fortune
 00000AA0  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000AA5  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000AA7  A3 00000081 R     4	mov c1.hpMax,eax
 00000AAC  A3 00000085 R     4	mov c1.hp,eax
 00000AB1  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000AB6  D1 F8	     4	sar eax,1;//divide by 2
 00000AB8  03 05 0000009D R  4	add eax,c1.weaponDamage
 00000ABE  A3 00000089 R     4	mov c1.damageMin,eax
 00000AC3  8B 1D 00000075 R  4	mov ebx,c1.agility
 00000AC9  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000ACC  03 C3	     4	add eax,ebx
 00000ACE  A3 0000008D R     4	mov c1.damageMax,eax
 00000AD3  61		     4	popAD
 00000AD4  EB 6D	     2		jmp endCase??000D
 00000AD6		     2	infoItem??000D:
 00000AD6  E8 00000000 E     2		call clrscr
 00000ADB  BA 0000073B R     3	mov edx, offset blank
 00000AE0  E8 00000000 E     3	call WriteString
 00000AE5  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000AEA  E8 00000000 E     3	call WriteString
 00000AEF  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000AF2  E8 00000000 E     3	call WriteDec
 00000AF7  BA 0000073B R     3	mov edx, offset blank
 00000AFC  E8 00000000 E     3	call WriteString
 00000B01  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000B06  E8 00000000 E     3	call WriteString
 00000B0B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000B0E  E8 00000000 E     3	call WriteDec
 00000B13  BA 0000073B R     3	mov edx, offset blank
 00000B18  E8 00000000 E     3	call WriteString
 00000B1D  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000B22  E8 00000000 E     3	call WriteString
 00000B27  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000B2A  E8 00000000 E     3	call WriteDec
 00000B2F  BA 0000073B R     3	mov edx, offset blank
 00000B34  E8 00000000 E     3	call WriteString
 00000B39  B8 000007D0	     2		mov eax,2000
 00000B3E  E8 00000000 E     2		call Delay
 00000B43		     2	endCase??000D:
 00000B43  E9 000014CD	     1		jmp endInventory
 00000B48		     1	item1:
 00000B48  BB 000003EB R     1		mov ebx,offset i2 ;//storing item for use
 00000B4D  BA 0000072E R     2	mov edx, offset exitTitle
 00000B52  E8 00000000 E     2	call WriteString
 00000B57  BA 0000045C R     2	mov edx, offset discardTitle
 00000B5C  E8 00000000 E     2	call WriteString
 00000B61  BA 0000046A R     2	mov edx, offset equipTitle
 00000B66  E8 00000000 E     2	call WriteString
 00000B6B  BA 00000476 R     2	mov edx, offset infoTitle
 00000B70  E8 00000000 E     2	call WriteString
 00000B75  E8 00000000 E     3		call ReadDec
 00000B7A  8B C8	     3		mov ecx, eax
 00000B7C  81 F9 0000038D    2	cmp ecx,909
 00000B82  74 18	     2	je exit??0011
 00000B84  83 F9 01	     2	cmp ecx,1
 00000B87  74 18	     2	je removeItem??0011
 00000B89  83 F9 02	     2	cmp ecx,2
 00000B8C  74 2C	     2	je equipItem??0011
 00000B8E  83 F9 03	     2	cmp ecx,3
 00000B91  0F 84 0000018F    2	je infoItem??0011
 00000B97  E9 000001F7	     2	jmp endCase??0011
 00000B9C		     2	exit??0011:
 00000B9C  E9 000001F2	     2		jmp endCase??0011
 00000BA1		     2	removeItem??0011:
 00000BA1  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000BA7  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000BAE  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000BB5  E9 000001D9	     2		jmp endCase??0011
 00000BBA		     2	equipItem??0011:
 00000BBA  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 00000BC1  0F 84 000000D9    3	je notEquipped??0013
 00000BC7  8B D3	     3	mov edx,ebx
 00000BC9  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 00000BD0  0F 84 000000C8    4	je nothingEquipped??0014
 00000BD6  BB 00000407 R     4	mov ebx, offset i1
 00000BDB		     4	notEmpty??0014:
 00000BDB  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00000BDE  74 0F	     4	je isEmpty??0014 
 00000BE0  83 7B 10 00	     4	cmp [ebx].item.next,null
 00000BE4  0F 84 0000009B    4	je inventoryFull??0014
 00000BEA  8B 5B 10	     4	mov ebx,[ebx].item.next
 00000BED  EB EC	     4	jmp notEmpty??0014
 00000BEF		     4	isEmpty??0014:
 00000BEF  A1 00000091 R     4	mov eax, c1.weaponCode
 00000BF4  89 03	     4	mov [ebx].item.itemCode,eax
 00000BF6  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 00000C00  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 00000C05  89 43 04	     4	mov [ebx].item.buyValue,eax
 00000C08  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 00000C12  A1 00000099 R     4	mov eax, c1.weaponSellValue
 00000C17  89 43 08	     4	mov [ebx].item.sellValue,eax
 00000C1A  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 00000C24  A1 0000009D R     4	mov eax, c1.weaponDamage
 00000C29  89 43 14	     4	mov [ebx].item.combatValue,eax
 00000C2C  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 00000C36  60		     5	pushAD
 00000C37  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 00000C3D  FF 05 00000075 R  5	inc c1.agility
 00000C43  FF 05 00000079 R  5	inc c1.mind   
 00000C49  FF 05 0000007D R  5	inc c1.fortune
 00000C4F  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000C54  D1 E0	     5	sal eax,1 ;// multiply by 2
 00000C56  A3 00000081 R     5	mov c1.hpMax,eax
 00000C5B  A3 00000085 R     5	mov c1.hp,eax
 00000C60  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000C65  D1 F8	     5	sar eax,1;//divide by 2
 00000C67  03 05 0000009D R  5	add eax,c1.weaponDamage
 00000C6D  A3 00000089 R     5	mov c1.damageMin,eax
 00000C72  8B 1D 00000075 R  5	mov ebx,c1.agility
 00000C78  C1 FB 02	     5	sar ebx,2;//divide by 4
 00000C7B  03 C3	     5	add eax,ebx
 00000C7D  A3 0000008D R     5	mov c1.damageMax,eax
 00000C82  61		     5	popAD
 00000C83  EB 19	     4	jmp nothingEquipped??0014
 00000C85		     4	inventoryFull??0014:
 00000C85  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00000C8A  E8 00000000 E   *	    call   WriteString
 00000C8F  B8 000005DC	     4	mov eax, 1500
 00000C94  E8 00000000 E     4	call Delay
 00000C99  E8 00000000 E     4	call clrscr
 00000C9E		     4	nothingEquipped??0014:
 00000C9E  8B DA	     3	mov ebx,edx
 00000CA0		     3	notEquipped??0013:
 00000CA0  8B 13	     3	mov edx, [ebx].item.itemCode
 00000CA2  89 15 00000091 R  3	mov c1.weaponCode, edx
 00000CA8  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000CAB  89 15 0000009D R  3	mov c1.weaponDamage, edx
 00000CB1  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000CB4  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 00000CBA  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000CBD  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00000CC3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000CC9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000CD0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000CD7  60		     4	pushAD
 00000CD8  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 00000CDE  FF 05 00000075 R  4	inc c1.agility
 00000CE4  FF 05 00000079 R  4	inc c1.mind   
 00000CEA  FF 05 0000007D R  4	inc c1.fortune
 00000CF0  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000CF5  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000CF7  A3 00000081 R     4	mov c1.hpMax,eax
 00000CFC  A3 00000085 R     4	mov c1.hp,eax
 00000D01  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000D06  D1 F8	     4	sar eax,1;//divide by 2
 00000D08  03 05 0000009D R  4	add eax,c1.weaponDamage
 00000D0E  A3 00000089 R     4	mov c1.damageMin,eax
 00000D13  8B 1D 00000075 R  4	mov ebx,c1.agility
 00000D19  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000D1C  03 C3	     4	add eax,ebx
 00000D1E  A3 0000008D R     4	mov c1.damageMax,eax
 00000D23  61		     4	popAD
 00000D24  EB 6D	     2		jmp endCase??0011
 00000D26		     2	infoItem??0011:
 00000D26  E8 00000000 E     2		call clrscr
 00000D2B  BA 0000073B R     3	mov edx, offset blank
 00000D30  E8 00000000 E     3	call WriteString
 00000D35  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000D3A  E8 00000000 E     3	call WriteString
 00000D3F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000D42  E8 00000000 E     3	call WriteDec
 00000D47  BA 0000073B R     3	mov edx, offset blank
 00000D4C  E8 00000000 E     3	call WriteString
 00000D51  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000D56  E8 00000000 E     3	call WriteString
 00000D5B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000D5E  E8 00000000 E     3	call WriteDec
 00000D63  BA 0000073B R     3	mov edx, offset blank
 00000D68  E8 00000000 E     3	call WriteString
 00000D6D  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000D72  E8 00000000 E     3	call WriteString
 00000D77  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000D7A  E8 00000000 E     3	call WriteDec
 00000D7F  BA 0000073B R     3	mov edx, offset blank
 00000D84  E8 00000000 E     3	call WriteString
 00000D89  B8 000007D0	     2		mov eax,2000
 00000D8E  E8 00000000 E     2		call Delay
 00000D93		     2	endCase??0011:
 00000D93  E9 0000127D	     1		jmp endInventory
 00000D98		     1	item2:
 00000D98  BB 000003CF R     1		mov ebx,offset i3 ;//storing item for use
 00000D9D  BA 0000072E R     2	mov edx, offset exitTitle
 00000DA2  E8 00000000 E     2	call WriteString
 00000DA7  BA 0000045C R     2	mov edx, offset discardTitle
 00000DAC  E8 00000000 E     2	call WriteString
 00000DB1  BA 0000046A R     2	mov edx, offset equipTitle
 00000DB6  E8 00000000 E     2	call WriteString
 00000DBB  BA 00000476 R     2	mov edx, offset infoTitle
 00000DC0  E8 00000000 E     2	call WriteString
 00000DC5  E8 00000000 E     3		call ReadDec
 00000DCA  8B C8	     3		mov ecx, eax
 00000DCC  81 F9 0000038D    2	cmp ecx,909
 00000DD2  74 18	     2	je exit??0015
 00000DD4  83 F9 01	     2	cmp ecx,1
 00000DD7  74 18	     2	je removeItem??0015
 00000DD9  83 F9 02	     2	cmp ecx,2
 00000DDC  74 2C	     2	je equipItem??0015
 00000DDE  83 F9 03	     2	cmp ecx,3
 00000DE1  0F 84 0000018F    2	je infoItem??0015
 00000DE7  E9 000001F7	     2	jmp endCase??0015
 00000DEC		     2	exit??0015:
 00000DEC  E9 000001F2	     2		jmp endCase??0015
 00000DF1		     2	removeItem??0015:
 00000DF1  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00000DF7  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00000DFE  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00000E05  E9 000001D9	     2		jmp endCase??0015
 00000E0A		     2	equipItem??0015:
 00000E0A  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 00000E11  0F 84 000000D9    3	je notEquipped??0017
 00000E17  8B D3	     3	mov edx,ebx
 00000E19  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 00000E20  0F 84 000000C8    4	je nothingEquipped??0018
 00000E26  BB 00000407 R     4	mov ebx, offset i1
 00000E2B		     4	notEmpty??0018:
 00000E2B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00000E2E  74 0F	     4	je isEmpty??0018 
 00000E30  83 7B 10 00	     4	cmp [ebx].item.next,null
 00000E34  0F 84 0000009B    4	je inventoryFull??0018
 00000E3A  8B 5B 10	     4	mov ebx,[ebx].item.next
 00000E3D  EB EC	     4	jmp notEmpty??0018
 00000E3F		     4	isEmpty??0018:
 00000E3F  A1 00000091 R     4	mov eax, c1.weaponCode
 00000E44  89 03	     4	mov [ebx].item.itemCode,eax
 00000E46  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 00000E50  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 00000E55  89 43 04	     4	mov [ebx].item.buyValue,eax
 00000E58  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 00000E62  A1 00000099 R     4	mov eax, c1.weaponSellValue
 00000E67  89 43 08	     4	mov [ebx].item.sellValue,eax
 00000E6A  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 00000E74  A1 0000009D R     4	mov eax, c1.weaponDamage
 00000E79  89 43 14	     4	mov [ebx].item.combatValue,eax
 00000E7C  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 00000E86  60		     5	pushAD
 00000E87  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 00000E8D  FF 05 00000075 R  5	inc c1.agility
 00000E93  FF 05 00000079 R  5	inc c1.mind   
 00000E99  FF 05 0000007D R  5	inc c1.fortune
 00000E9F  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000EA4  D1 E0	     5	sal eax,1 ;// multiply by 2
 00000EA6  A3 00000081 R     5	mov c1.hpMax,eax
 00000EAB  A3 00000085 R     5	mov c1.hp,eax
 00000EB0  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000EB5  D1 F8	     5	sar eax,1;//divide by 2
 00000EB7  03 05 0000009D R  5	add eax,c1.weaponDamage
 00000EBD  A3 00000089 R     5	mov c1.damageMin,eax
 00000EC2  8B 1D 00000075 R  5	mov ebx,c1.agility
 00000EC8  C1 FB 02	     5	sar ebx,2;//divide by 4
 00000ECB  03 C3	     5	add eax,ebx
 00000ECD  A3 0000008D R     5	mov c1.damageMax,eax
 00000ED2  61		     5	popAD
 00000ED3  EB 19	     4	jmp nothingEquipped??0018
 00000ED5		     4	inventoryFull??0018:
 00000ED5  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00000EDA  E8 00000000 E   *	    call   WriteString
 00000EDF  B8 000005DC	     4	mov eax, 1500
 00000EE4  E8 00000000 E     4	call Delay
 00000EE9  E8 00000000 E     4	call clrscr
 00000EEE		     4	nothingEquipped??0018:
 00000EEE  8B DA	     3	mov ebx,edx
 00000EF0		     3	notEquipped??0017:
 00000EF0  8B 13	     3	mov edx, [ebx].item.itemCode
 00000EF2  89 15 00000091 R  3	mov c1.weaponCode, edx
 00000EF8  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00000EFB  89 15 0000009D R  3	mov c1.weaponDamage, edx
 00000F01  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00000F04  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 00000F0A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00000F0D  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00000F13  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00000F19  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00000F20  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00000F27  60		     4	pushAD
 00000F28  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 00000F2E  FF 05 00000075 R  4	inc c1.agility
 00000F34  FF 05 00000079 R  4	inc c1.mind   
 00000F3A  FF 05 0000007D R  4	inc c1.fortune
 00000F40  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00000F45  D1 E0	     4	sal eax,1 ;// multiply by 2
 00000F47  A3 00000081 R     4	mov c1.hpMax,eax
 00000F4C  A3 00000085 R     4	mov c1.hp,eax
 00000F51  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00000F56  D1 F8	     4	sar eax,1;//divide by 2
 00000F58  03 05 0000009D R  4	add eax,c1.weaponDamage
 00000F5E  A3 00000089 R     4	mov c1.damageMin,eax
 00000F63  8B 1D 00000075 R  4	mov ebx,c1.agility
 00000F69  C1 FB 02	     4	sar ebx,2;//divide by 4
 00000F6C  03 C3	     4	add eax,ebx
 00000F6E  A3 0000008D R     4	mov c1.damageMax,eax
 00000F73  61		     4	popAD
 00000F74  EB 6D	     2		jmp endCase??0015
 00000F76		     2	infoItem??0015:
 00000F76  E8 00000000 E     2		call clrscr
 00000F7B  BA 0000073B R     3	mov edx, offset blank
 00000F80  E8 00000000 E     3	call WriteString
 00000F85  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00000F8A  E8 00000000 E     3	call WriteString
 00000F8F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00000F92  E8 00000000 E     3	call WriteDec
 00000F97  BA 0000073B R     3	mov edx, offset blank
 00000F9C  E8 00000000 E     3	call WriteString
 00000FA1  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00000FA6  E8 00000000 E     3	call WriteString
 00000FAB  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00000FAE  E8 00000000 E     3	call WriteDec
 00000FB3  BA 0000073B R     3	mov edx, offset blank
 00000FB8  E8 00000000 E     3	call WriteString
 00000FBD  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00000FC2  E8 00000000 E     3	call WriteString
 00000FC7  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00000FCA  E8 00000000 E     3	call WriteDec
 00000FCF  BA 0000073B R     3	mov edx, offset blank
 00000FD4  E8 00000000 E     3	call WriteString
 00000FD9  B8 000007D0	     2		mov eax,2000
 00000FDE  E8 00000000 E     2		call Delay
 00000FE3		     2	endCase??0015:
 00000FE3  E9 0000102D	     1		jmp endInventory
 00000FE8		     1	item3:
 00000FE8  BB 000003B3 R     1		mov ebx,offset i4 ;//storing item for use
 00000FED  BA 0000072E R     2	mov edx, offset exitTitle
 00000FF2  E8 00000000 E     2	call WriteString
 00000FF7  BA 0000045C R     2	mov edx, offset discardTitle
 00000FFC  E8 00000000 E     2	call WriteString
 00001001  BA 0000046A R     2	mov edx, offset equipTitle
 00001006  E8 00000000 E     2	call WriteString
 0000100B  BA 00000476 R     2	mov edx, offset infoTitle
 00001010  E8 00000000 E     2	call WriteString
 00001015  E8 00000000 E     3		call ReadDec
 0000101A  8B C8	     3		mov ecx, eax
 0000101C  81 F9 0000038D    2	cmp ecx,909
 00001022  74 18	     2	je exit??0019
 00001024  83 F9 01	     2	cmp ecx,1
 00001027  74 18	     2	je removeItem??0019
 00001029  83 F9 02	     2	cmp ecx,2
 0000102C  74 2C	     2	je equipItem??0019
 0000102E  83 F9 03	     2	cmp ecx,3
 00001031  0F 84 0000018F    2	je infoItem??0019
 00001037  E9 000001F7	     2	jmp endCase??0019
 0000103C		     2	exit??0019:
 0000103C  E9 000001F2	     2		jmp endCase??0019
 00001041		     2	removeItem??0019:
 00001041  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001047  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000104E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001055  E9 000001D9	     2		jmp endCase??0019
 0000105A		     2	equipItem??0019:
 0000105A  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 00001061  0F 84 000000D9    3	je notEquipped??001B
 00001067  8B D3	     3	mov edx,ebx
 00001069  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 00001070  0F 84 000000C8    4	je nothingEquipped??001C
 00001076  BB 00000407 R     4	mov ebx, offset i1
 0000107B		     4	notEmpty??001C:
 0000107B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 0000107E  74 0F	     4	je isEmpty??001C 
 00001080  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001084  0F 84 0000009B    4	je inventoryFull??001C
 0000108A  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000108D  EB EC	     4	jmp notEmpty??001C
 0000108F		     4	isEmpty??001C:
 0000108F  A1 00000091 R     4	mov eax, c1.weaponCode
 00001094  89 03	     4	mov [ebx].item.itemCode,eax
 00001096  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 000010A0  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 000010A5  89 43 04	     4	mov [ebx].item.buyValue,eax
 000010A8  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 000010B2  A1 00000099 R     4	mov eax, c1.weaponSellValue
 000010B7  89 43 08	     4	mov [ebx].item.sellValue,eax
 000010BA  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 000010C4  A1 0000009D R     4	mov eax, c1.weaponDamage
 000010C9  89 43 14	     4	mov [ebx].item.combatValue,eax
 000010CC  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 000010D6  60		     5	pushAD
 000010D7  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 000010DD  FF 05 00000075 R  5	inc c1.agility
 000010E3  FF 05 00000079 R  5	inc c1.mind   
 000010E9  FF 05 0000007D R  5	inc c1.fortune
 000010EF  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000010F4  D1 E0	     5	sal eax,1 ;// multiply by 2
 000010F6  A3 00000081 R     5	mov c1.hpMax,eax
 000010FB  A3 00000085 R     5	mov c1.hp,eax
 00001100  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001105  D1 F8	     5	sar eax,1;//divide by 2
 00001107  03 05 0000009D R  5	add eax,c1.weaponDamage
 0000110D  A3 00000089 R     5	mov c1.damageMin,eax
 00001112  8B 1D 00000075 R  5	mov ebx,c1.agility
 00001118  C1 FB 02	     5	sar ebx,2;//divide by 4
 0000111B  03 C3	     5	add eax,ebx
 0000111D  A3 0000008D R     5	mov c1.damageMax,eax
 00001122  61		     5	popAD
 00001123  EB 19	     4	jmp nothingEquipped??001C
 00001125		     4	inventoryFull??001C:
 00001125  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 0000112A  E8 00000000 E   *	    call   WriteString
 0000112F  B8 000005DC	     4	mov eax, 1500
 00001134  E8 00000000 E     4	call Delay
 00001139  E8 00000000 E     4	call clrscr
 0000113E		     4	nothingEquipped??001C:
 0000113E  8B DA	     3	mov ebx,edx
 00001140		     3	notEquipped??001B:
 00001140  8B 13	     3	mov edx, [ebx].item.itemCode
 00001142  89 15 00000091 R  3	mov c1.weaponCode, edx
 00001148  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000114B  89 15 0000009D R  3	mov c1.weaponDamage, edx
 00001151  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001154  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 0000115A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 0000115D  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00001163  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001169  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001170  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001177  60		     4	pushAD
 00001178  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 0000117E  FF 05 00000075 R  4	inc c1.agility
 00001184  FF 05 00000079 R  4	inc c1.mind   
 0000118A  FF 05 0000007D R  4	inc c1.fortune
 00001190  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001195  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001197  A3 00000081 R     4	mov c1.hpMax,eax
 0000119C  A3 00000085 R     4	mov c1.hp,eax
 000011A1  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000011A6  D1 F8	     4	sar eax,1;//divide by 2
 000011A8  03 05 0000009D R  4	add eax,c1.weaponDamage
 000011AE  A3 00000089 R     4	mov c1.damageMin,eax
 000011B3  8B 1D 00000075 R  4	mov ebx,c1.agility
 000011B9  C1 FB 02	     4	sar ebx,2;//divide by 4
 000011BC  03 C3	     4	add eax,ebx
 000011BE  A3 0000008D R     4	mov c1.damageMax,eax
 000011C3  61		     4	popAD
 000011C4  EB 6D	     2		jmp endCase??0019
 000011C6		     2	infoItem??0019:
 000011C6  E8 00000000 E     2		call clrscr
 000011CB  BA 0000073B R     3	mov edx, offset blank
 000011D0  E8 00000000 E     3	call WriteString
 000011D5  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000011DA  E8 00000000 E     3	call WriteString
 000011DF  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000011E2  E8 00000000 E     3	call WriteDec
 000011E7  BA 0000073B R     3	mov edx, offset blank
 000011EC  E8 00000000 E     3	call WriteString
 000011F1  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000011F6  E8 00000000 E     3	call WriteString
 000011FB  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000011FE  E8 00000000 E     3	call WriteDec
 00001203  BA 0000073B R     3	mov edx, offset blank
 00001208  E8 00000000 E     3	call WriteString
 0000120D  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001212  E8 00000000 E     3	call WriteString
 00001217  8B 43 14	     3	mov eax, [ebx].item.combatValue
 0000121A  E8 00000000 E     3	call WriteDec
 0000121F  BA 0000073B R     3	mov edx, offset blank
 00001224  E8 00000000 E     3	call WriteString
 00001229  B8 000007D0	     2		mov eax,2000
 0000122E  E8 00000000 E     2		call Delay
 00001233		     2	endCase??0019:
 00001233  E9 00000DDD	     1		jmp endInventory
 00001238		     1	item4:
 00001238  BB 00000397 R     1		mov ebx,offset i5 ;//storing item for use
 0000123D  BA 0000072E R     2	mov edx, offset exitTitle
 00001242  E8 00000000 E     2	call WriteString
 00001247  BA 0000045C R     2	mov edx, offset discardTitle
 0000124C  E8 00000000 E     2	call WriteString
 00001251  BA 0000046A R     2	mov edx, offset equipTitle
 00001256  E8 00000000 E     2	call WriteString
 0000125B  BA 00000476 R     2	mov edx, offset infoTitle
 00001260  E8 00000000 E     2	call WriteString
 00001265  E8 00000000 E     3		call ReadDec
 0000126A  8B C8	     3		mov ecx, eax
 0000126C  81 F9 0000038D    2	cmp ecx,909
 00001272  74 18	     2	je exit??001D
 00001274  83 F9 01	     2	cmp ecx,1
 00001277  74 18	     2	je removeItem??001D
 00001279  83 F9 02	     2	cmp ecx,2
 0000127C  74 2C	     2	je equipItem??001D
 0000127E  83 F9 03	     2	cmp ecx,3
 00001281  0F 84 0000018F    2	je infoItem??001D
 00001287  E9 000001F7	     2	jmp endCase??001D
 0000128C		     2	exit??001D:
 0000128C  E9 000001F2	     2		jmp endCase??001D
 00001291		     2	removeItem??001D:
 00001291  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001297  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000129E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000012A5  E9 000001D9	     2		jmp endCase??001D
 000012AA		     2	equipItem??001D:
 000012AA  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 000012B1  0F 84 000000D9    3	je notEquipped??001F
 000012B7  8B D3	     3	mov edx,ebx
 000012B9  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 000012C0  0F 84 000000C8    4	je nothingEquipped??0020
 000012C6  BB 00000407 R     4	mov ebx, offset i1
 000012CB		     4	notEmpty??0020:
 000012CB  83 3B 00	     4	cmp [ebx].item.itemCode,0
 000012CE  74 0F	     4	je isEmpty??0020 
 000012D0  83 7B 10 00	     4	cmp [ebx].item.next,null
 000012D4  0F 84 0000009B    4	je inventoryFull??0020
 000012DA  8B 5B 10	     4	mov ebx,[ebx].item.next
 000012DD  EB EC	     4	jmp notEmpty??0020
 000012DF		     4	isEmpty??0020:
 000012DF  A1 00000091 R     4	mov eax, c1.weaponCode
 000012E4  89 03	     4	mov [ebx].item.itemCode,eax
 000012E6  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 000012F0  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 000012F5  89 43 04	     4	mov [ebx].item.buyValue,eax
 000012F8  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 00001302  A1 00000099 R     4	mov eax, c1.weaponSellValue
 00001307  89 43 08	     4	mov [ebx].item.sellValue,eax
 0000130A  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 00001314  A1 0000009D R     4	mov eax, c1.weaponDamage
 00001319  89 43 14	     4	mov [ebx].item.combatValue,eax
 0000131C  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 00001326  60		     5	pushAD
 00001327  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 0000132D  FF 05 00000075 R  5	inc c1.agility
 00001333  FF 05 00000079 R  5	inc c1.mind   
 00001339  FF 05 0000007D R  5	inc c1.fortune
 0000133F  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001344  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001346  A3 00000081 R     5	mov c1.hpMax,eax
 0000134B  A3 00000085 R     5	mov c1.hp,eax
 00001350  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001355  D1 F8	     5	sar eax,1;//divide by 2
 00001357  03 05 0000009D R  5	add eax,c1.weaponDamage
 0000135D  A3 00000089 R     5	mov c1.damageMin,eax
 00001362  8B 1D 00000075 R  5	mov ebx,c1.agility
 00001368  C1 FB 02	     5	sar ebx,2;//divide by 4
 0000136B  03 C3	     5	add eax,ebx
 0000136D  A3 0000008D R     5	mov c1.damageMax,eax
 00001372  61		     5	popAD
 00001373  EB 19	     4	jmp nothingEquipped??0020
 00001375		     4	inventoryFull??0020:
 00001375  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 0000137A  E8 00000000 E   *	    call   WriteString
 0000137F  B8 000005DC	     4	mov eax, 1500
 00001384  E8 00000000 E     4	call Delay
 00001389  E8 00000000 E     4	call clrscr
 0000138E		     4	nothingEquipped??0020:
 0000138E  8B DA	     3	mov ebx,edx
 00001390		     3	notEquipped??001F:
 00001390  8B 13	     3	mov edx, [ebx].item.itemCode
 00001392  89 15 00000091 R  3	mov c1.weaponCode, edx
 00001398  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000139B  89 15 0000009D R  3	mov c1.weaponDamage, edx
 000013A1  8B 53 04	     3	mov edx, [ebx].item.buyValue
 000013A4  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 000013AA  8B 53 08	     3	mov edx,[ebx].item.sellValue
 000013AD  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 000013B3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 000013B9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 000013C0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000013C7  60		     4	pushAD
 000013C8  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 000013CE  FF 05 00000075 R  4	inc c1.agility
 000013D4  FF 05 00000079 R  4	inc c1.mind   
 000013DA  FF 05 0000007D R  4	inc c1.fortune
 000013E0  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000013E5  D1 E0	     4	sal eax,1 ;// multiply by 2
 000013E7  A3 00000081 R     4	mov c1.hpMax,eax
 000013EC  A3 00000085 R     4	mov c1.hp,eax
 000013F1  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000013F6  D1 F8	     4	sar eax,1;//divide by 2
 000013F8  03 05 0000009D R  4	add eax,c1.weaponDamage
 000013FE  A3 00000089 R     4	mov c1.damageMin,eax
 00001403  8B 1D 00000075 R  4	mov ebx,c1.agility
 00001409  C1 FB 02	     4	sar ebx,2;//divide by 4
 0000140C  03 C3	     4	add eax,ebx
 0000140E  A3 0000008D R     4	mov c1.damageMax,eax
 00001413  61		     4	popAD
 00001414  EB 6D	     2		jmp endCase??001D
 00001416		     2	infoItem??001D:
 00001416  E8 00000000 E     2		call clrscr
 0000141B  BA 0000073B R     3	mov edx, offset blank
 00001420  E8 00000000 E     3	call WriteString
 00001425  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000142A  E8 00000000 E     3	call WriteString
 0000142F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001432  E8 00000000 E     3	call WriteDec
 00001437  BA 0000073B R     3	mov edx, offset blank
 0000143C  E8 00000000 E     3	call WriteString
 00001441  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001446  E8 00000000 E     3	call WriteString
 0000144B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 0000144E  E8 00000000 E     3	call WriteDec
 00001453  BA 0000073B R     3	mov edx, offset blank
 00001458  E8 00000000 E     3	call WriteString
 0000145D  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001462  E8 00000000 E     3	call WriteString
 00001467  8B 43 14	     3	mov eax, [ebx].item.combatValue
 0000146A  E8 00000000 E     3	call WriteDec
 0000146F  BA 0000073B R     3	mov edx, offset blank
 00001474  E8 00000000 E     3	call WriteString
 00001479  B8 000007D0	     2		mov eax,2000
 0000147E  E8 00000000 E     2		call Delay
 00001483		     2	endCase??001D:
 00001483  E9 00000B8D	     1		jmp endInventory
 00001488		     1	item5:
 00001488  BB 0000037B R     1		mov ebx,offset i6 ;//storing item for use
 0000148D  BA 0000072E R     2	mov edx, offset exitTitle
 00001492  E8 00000000 E     2	call WriteString
 00001497  BA 0000045C R     2	mov edx, offset discardTitle
 0000149C  E8 00000000 E     2	call WriteString
 000014A1  BA 0000046A R     2	mov edx, offset equipTitle
 000014A6  E8 00000000 E     2	call WriteString
 000014AB  BA 00000476 R     2	mov edx, offset infoTitle
 000014B0  E8 00000000 E     2	call WriteString
 000014B5  E8 00000000 E     3		call ReadDec
 000014BA  8B C8	     3		mov ecx, eax
 000014BC  81 F9 0000038D    2	cmp ecx,909
 000014C2  74 18	     2	je exit??0021
 000014C4  83 F9 01	     2	cmp ecx,1
 000014C7  74 18	     2	je removeItem??0021
 000014C9  83 F9 02	     2	cmp ecx,2
 000014CC  74 2C	     2	je equipItem??0021
 000014CE  83 F9 03	     2	cmp ecx,3
 000014D1  0F 84 0000018F    2	je infoItem??0021
 000014D7  E9 000001F7	     2	jmp endCase??0021
 000014DC		     2	exit??0021:
 000014DC  E9 000001F2	     2		jmp endCase??0021
 000014E1		     2	removeItem??0021:
 000014E1  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000014E7  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000014EE  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000014F5  E9 000001D9	     2		jmp endCase??0021
 000014FA		     2	equipItem??0021:
 000014FA  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 00001501  0F 84 000000D9    3	je notEquipped??0023
 00001507  8B D3	     3	mov edx,ebx
 00001509  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 00001510  0F 84 000000C8    4	je nothingEquipped??0024
 00001516  BB 00000407 R     4	mov ebx, offset i1
 0000151B		     4	notEmpty??0024:
 0000151B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 0000151E  74 0F	     4	je isEmpty??0024 
 00001520  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001524  0F 84 0000009B    4	je inventoryFull??0024
 0000152A  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000152D  EB EC	     4	jmp notEmpty??0024
 0000152F		     4	isEmpty??0024:
 0000152F  A1 00000091 R     4	mov eax, c1.weaponCode
 00001534  89 03	     4	mov [ebx].item.itemCode,eax
 00001536  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 00001540  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 00001545  89 43 04	     4	mov [ebx].item.buyValue,eax
 00001548  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 00001552  A1 00000099 R     4	mov eax, c1.weaponSellValue
 00001557  89 43 08	     4	mov [ebx].item.sellValue,eax
 0000155A  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 00001564  A1 0000009D R     4	mov eax, c1.weaponDamage
 00001569  89 43 14	     4	mov [ebx].item.combatValue,eax
 0000156C  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 00001576  60		     5	pushAD
 00001577  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 0000157D  FF 05 00000075 R  5	inc c1.agility
 00001583  FF 05 00000079 R  5	inc c1.mind   
 00001589  FF 05 0000007D R  5	inc c1.fortune
 0000158F  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001594  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001596  A3 00000081 R     5	mov c1.hpMax,eax
 0000159B  A3 00000085 R     5	mov c1.hp,eax
 000015A0  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000015A5  D1 F8	     5	sar eax,1;//divide by 2
 000015A7  03 05 0000009D R  5	add eax,c1.weaponDamage
 000015AD  A3 00000089 R     5	mov c1.damageMin,eax
 000015B2  8B 1D 00000075 R  5	mov ebx,c1.agility
 000015B8  C1 FB 02	     5	sar ebx,2;//divide by 4
 000015BB  03 C3	     5	add eax,ebx
 000015BD  A3 0000008D R     5	mov c1.damageMax,eax
 000015C2  61		     5	popAD
 000015C3  EB 19	     4	jmp nothingEquipped??0024
 000015C5		     4	inventoryFull??0024:
 000015C5  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 000015CA  E8 00000000 E   *	    call   WriteString
 000015CF  B8 000005DC	     4	mov eax, 1500
 000015D4  E8 00000000 E     4	call Delay
 000015D9  E8 00000000 E     4	call clrscr
 000015DE		     4	nothingEquipped??0024:
 000015DE  8B DA	     3	mov ebx,edx
 000015E0		     3	notEquipped??0023:
 000015E0  8B 13	     3	mov edx, [ebx].item.itemCode
 000015E2  89 15 00000091 R  3	mov c1.weaponCode, edx
 000015E8  8B 53 14	     3	mov edx, [ebx].item.combatValue
 000015EB  89 15 0000009D R  3	mov c1.weaponDamage, edx
 000015F1  8B 53 04	     3	mov edx, [ebx].item.buyValue
 000015F4  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 000015FA  8B 53 08	     3	mov edx,[ebx].item.sellValue
 000015FD  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00001603  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001609  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001610  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001617  60		     4	pushAD
 00001618  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 0000161E  FF 05 00000075 R  4	inc c1.agility
 00001624  FF 05 00000079 R  4	inc c1.mind   
 0000162A  FF 05 0000007D R  4	inc c1.fortune
 00001630  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001635  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001637  A3 00000081 R     4	mov c1.hpMax,eax
 0000163C  A3 00000085 R     4	mov c1.hp,eax
 00001641  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001646  D1 F8	     4	sar eax,1;//divide by 2
 00001648  03 05 0000009D R  4	add eax,c1.weaponDamage
 0000164E  A3 00000089 R     4	mov c1.damageMin,eax
 00001653  8B 1D 00000075 R  4	mov ebx,c1.agility
 00001659  C1 FB 02	     4	sar ebx,2;//divide by 4
 0000165C  03 C3	     4	add eax,ebx
 0000165E  A3 0000008D R     4	mov c1.damageMax,eax
 00001663  61		     4	popAD
 00001664  EB 6D	     2		jmp endCase??0021
 00001666		     2	infoItem??0021:
 00001666  E8 00000000 E     2		call clrscr
 0000166B  BA 0000073B R     3	mov edx, offset blank
 00001670  E8 00000000 E     3	call WriteString
 00001675  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000167A  E8 00000000 E     3	call WriteString
 0000167F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001682  E8 00000000 E     3	call WriteDec
 00001687  BA 0000073B R     3	mov edx, offset blank
 0000168C  E8 00000000 E     3	call WriteString
 00001691  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001696  E8 00000000 E     3	call WriteString
 0000169B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 0000169E  E8 00000000 E     3	call WriteDec
 000016A3  BA 0000073B R     3	mov edx, offset blank
 000016A8  E8 00000000 E     3	call WriteString
 000016AD  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000016B2  E8 00000000 E     3	call WriteString
 000016B7  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000016BA  E8 00000000 E     3	call WriteDec
 000016BF  BA 0000073B R     3	mov edx, offset blank
 000016C4  E8 00000000 E     3	call WriteString
 000016C9  B8 000007D0	     2		mov eax,2000
 000016CE  E8 00000000 E     2		call Delay
 000016D3		     2	endCase??0021:
 000016D3  E9 0000093D	     1		jmp endInventory
 000016D8		     1	item6:
 000016D8  BB 0000035F R     1		mov ebx,offset i7 ;//storing item for use
 000016DD  BA 0000072E R     2	mov edx, offset exitTitle
 000016E2  E8 00000000 E     2	call WriteString
 000016E7  BA 0000045C R     2	mov edx, offset discardTitle
 000016EC  E8 00000000 E     2	call WriteString
 000016F1  BA 0000046A R     2	mov edx, offset equipTitle
 000016F6  E8 00000000 E     2	call WriteString
 000016FB  BA 00000476 R     2	mov edx, offset infoTitle
 00001700  E8 00000000 E     2	call WriteString
 00001705  E8 00000000 E     3		call ReadDec
 0000170A  8B C8	     3		mov ecx, eax
 0000170C  81 F9 0000038D    2	cmp ecx,909
 00001712  74 18	     2	je exit??0025
 00001714  83 F9 01	     2	cmp ecx,1
 00001717  74 18	     2	je removeItem??0025
 00001719  83 F9 02	     2	cmp ecx,2
 0000171C  74 2C	     2	je equipItem??0025
 0000171E  83 F9 03	     2	cmp ecx,3
 00001721  0F 84 0000018F    2	je infoItem??0025
 00001727  E9 000001F7	     2	jmp endCase??0025
 0000172C		     2	exit??0025:
 0000172C  E9 000001F2	     2		jmp endCase??0025
 00001731		     2	removeItem??0025:
 00001731  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001737  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000173E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001745  E9 000001D9	     2		jmp endCase??0025
 0000174A		     2	equipItem??0025:
 0000174A  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 00001751  0F 84 000000D9    3	je notEquipped??0027
 00001757  8B D3	     3	mov edx,ebx
 00001759  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 00001760  0F 84 000000C8    4	je nothingEquipped??0028
 00001766  BB 00000407 R     4	mov ebx, offset i1
 0000176B		     4	notEmpty??0028:
 0000176B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 0000176E  74 0F	     4	je isEmpty??0028 
 00001770  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001774  0F 84 0000009B    4	je inventoryFull??0028
 0000177A  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000177D  EB EC	     4	jmp notEmpty??0028
 0000177F		     4	isEmpty??0028:
 0000177F  A1 00000091 R     4	mov eax, c1.weaponCode
 00001784  89 03	     4	mov [ebx].item.itemCode,eax
 00001786  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 00001790  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 00001795  89 43 04	     4	mov [ebx].item.buyValue,eax
 00001798  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 000017A2  A1 00000099 R     4	mov eax, c1.weaponSellValue
 000017A7  89 43 08	     4	mov [ebx].item.sellValue,eax
 000017AA  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 000017B4  A1 0000009D R     4	mov eax, c1.weaponDamage
 000017B9  89 43 14	     4	mov [ebx].item.combatValue,eax
 000017BC  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 000017C6  60		     5	pushAD
 000017C7  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 000017CD  FF 05 00000075 R  5	inc c1.agility
 000017D3  FF 05 00000079 R  5	inc c1.mind   
 000017D9  FF 05 0000007D R  5	inc c1.fortune
 000017DF  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000017E4  D1 E0	     5	sal eax,1 ;// multiply by 2
 000017E6  A3 00000081 R     5	mov c1.hpMax,eax
 000017EB  A3 00000085 R     5	mov c1.hp,eax
 000017F0  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000017F5  D1 F8	     5	sar eax,1;//divide by 2
 000017F7  03 05 0000009D R  5	add eax,c1.weaponDamage
 000017FD  A3 00000089 R     5	mov c1.damageMin,eax
 00001802  8B 1D 00000075 R  5	mov ebx,c1.agility
 00001808  C1 FB 02	     5	sar ebx,2;//divide by 4
 0000180B  03 C3	     5	add eax,ebx
 0000180D  A3 0000008D R     5	mov c1.damageMax,eax
 00001812  61		     5	popAD
 00001813  EB 19	     4	jmp nothingEquipped??0028
 00001815		     4	inventoryFull??0028:
 00001815  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 0000181A  E8 00000000 E   *	    call   WriteString
 0000181F  B8 000005DC	     4	mov eax, 1500
 00001824  E8 00000000 E     4	call Delay
 00001829  E8 00000000 E     4	call clrscr
 0000182E		     4	nothingEquipped??0028:
 0000182E  8B DA	     3	mov ebx,edx
 00001830		     3	notEquipped??0027:
 00001830  8B 13	     3	mov edx, [ebx].item.itemCode
 00001832  89 15 00000091 R  3	mov c1.weaponCode, edx
 00001838  8B 53 14	     3	mov edx, [ebx].item.combatValue
 0000183B  89 15 0000009D R  3	mov c1.weaponDamage, edx
 00001841  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001844  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 0000184A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 0000184D  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00001853  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001859  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001860  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001867  60		     4	pushAD
 00001868  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 0000186E  FF 05 00000075 R  4	inc c1.agility
 00001874  FF 05 00000079 R  4	inc c1.mind   
 0000187A  FF 05 0000007D R  4	inc c1.fortune
 00001880  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001885  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001887  A3 00000081 R     4	mov c1.hpMax,eax
 0000188C  A3 00000085 R     4	mov c1.hp,eax
 00001891  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001896  D1 F8	     4	sar eax,1;//divide by 2
 00001898  03 05 0000009D R  4	add eax,c1.weaponDamage
 0000189E  A3 00000089 R     4	mov c1.damageMin,eax
 000018A3  8B 1D 00000075 R  4	mov ebx,c1.agility
 000018A9  C1 FB 02	     4	sar ebx,2;//divide by 4
 000018AC  03 C3	     4	add eax,ebx
 000018AE  A3 0000008D R     4	mov c1.damageMax,eax
 000018B3  61		     4	popAD
 000018B4  EB 6D	     2		jmp endCase??0025
 000018B6		     2	infoItem??0025:
 000018B6  E8 00000000 E     2		call clrscr
 000018BB  BA 0000073B R     3	mov edx, offset blank
 000018C0  E8 00000000 E     3	call WriteString
 000018C5  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000018CA  E8 00000000 E     3	call WriteString
 000018CF  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000018D2  E8 00000000 E     3	call WriteDec
 000018D7  BA 0000073B R     3	mov edx, offset blank
 000018DC  E8 00000000 E     3	call WriteString
 000018E1  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000018E6  E8 00000000 E     3	call WriteString
 000018EB  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000018EE  E8 00000000 E     3	call WriteDec
 000018F3  BA 0000073B R     3	mov edx, offset blank
 000018F8  E8 00000000 E     3	call WriteString
 000018FD  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001902  E8 00000000 E     3	call WriteString
 00001907  8B 43 14	     3	mov eax, [ebx].item.combatValue
 0000190A  E8 00000000 E     3	call WriteDec
 0000190F  BA 0000073B R     3	mov edx, offset blank
 00001914  E8 00000000 E     3	call WriteString
 00001919  B8 000007D0	     2		mov eax,2000
 0000191E  E8 00000000 E     2		call Delay
 00001923		     2	endCase??0025:
 00001923  E9 000006ED	     1		jmp endInventory
 00001928		     1	item7:
 00001928  BB 00000343 R     1		mov ebx,offset i8 ;//storing item for use
 0000192D  BA 0000072E R     2	mov edx, offset exitTitle
 00001932  E8 00000000 E     2	call WriteString
 00001937  BA 0000045C R     2	mov edx, offset discardTitle
 0000193C  E8 00000000 E     2	call WriteString
 00001941  BA 0000046A R     2	mov edx, offset equipTitle
 00001946  E8 00000000 E     2	call WriteString
 0000194B  BA 00000476 R     2	mov edx, offset infoTitle
 00001950  E8 00000000 E     2	call WriteString
 00001955  E8 00000000 E     3		call ReadDec
 0000195A  8B C8	     3		mov ecx, eax
 0000195C  81 F9 0000038D    2	cmp ecx,909
 00001962  74 18	     2	je exit??0029
 00001964  83 F9 01	     2	cmp ecx,1
 00001967  74 18	     2	je removeItem??0029
 00001969  83 F9 02	     2	cmp ecx,2
 0000196C  74 2C	     2	je equipItem??0029
 0000196E  83 F9 03	     2	cmp ecx,3
 00001971  0F 84 0000018F    2	je infoItem??0029
 00001977  E9 000001F7	     2	jmp endCase??0029
 0000197C		     2	exit??0029:
 0000197C  E9 000001F2	     2		jmp endCase??0029
 00001981		     2	removeItem??0029:
 00001981  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001987  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000198E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001995  E9 000001D9	     2		jmp endCase??0029
 0000199A		     2	equipItem??0029:
 0000199A  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 000019A1  0F 84 000000D9    3	je notEquipped??002B
 000019A7  8B D3	     3	mov edx,ebx
 000019A9  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 000019B0  0F 84 000000C8    4	je nothingEquipped??002C
 000019B6  BB 00000407 R     4	mov ebx, offset i1
 000019BB		     4	notEmpty??002C:
 000019BB  83 3B 00	     4	cmp [ebx].item.itemCode,0
 000019BE  74 0F	     4	je isEmpty??002C 
 000019C0  83 7B 10 00	     4	cmp [ebx].item.next,null
 000019C4  0F 84 0000009B    4	je inventoryFull??002C
 000019CA  8B 5B 10	     4	mov ebx,[ebx].item.next
 000019CD  EB EC	     4	jmp notEmpty??002C
 000019CF		     4	isEmpty??002C:
 000019CF  A1 00000091 R     4	mov eax, c1.weaponCode
 000019D4  89 03	     4	mov [ebx].item.itemCode,eax
 000019D6  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 000019E0  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 000019E5  89 43 04	     4	mov [ebx].item.buyValue,eax
 000019E8  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 000019F2  A1 00000099 R     4	mov eax, c1.weaponSellValue
 000019F7  89 43 08	     4	mov [ebx].item.sellValue,eax
 000019FA  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 00001A04  A1 0000009D R     4	mov eax, c1.weaponDamage
 00001A09  89 43 14	     4	mov [ebx].item.combatValue,eax
 00001A0C  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 00001A16  60		     5	pushAD
 00001A17  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 00001A1D  FF 05 00000075 R  5	inc c1.agility
 00001A23  FF 05 00000079 R  5	inc c1.mind   
 00001A29  FF 05 0000007D R  5	inc c1.fortune
 00001A2F  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001A34  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001A36  A3 00000081 R     5	mov c1.hpMax,eax
 00001A3B  A3 00000085 R     5	mov c1.hp,eax
 00001A40  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001A45  D1 F8	     5	sar eax,1;//divide by 2
 00001A47  03 05 0000009D R  5	add eax,c1.weaponDamage
 00001A4D  A3 00000089 R     5	mov c1.damageMin,eax
 00001A52  8B 1D 00000075 R  5	mov ebx,c1.agility
 00001A58  C1 FB 02	     5	sar ebx,2;//divide by 4
 00001A5B  03 C3	     5	add eax,ebx
 00001A5D  A3 0000008D R     5	mov c1.damageMax,eax
 00001A62  61		     5	popAD
 00001A63  EB 19	     4	jmp nothingEquipped??002C
 00001A65		     4	inventoryFull??002C:
 00001A65  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00001A6A  E8 00000000 E   *	    call   WriteString
 00001A6F  B8 000005DC	     4	mov eax, 1500
 00001A74  E8 00000000 E     4	call Delay
 00001A79  E8 00000000 E     4	call clrscr
 00001A7E		     4	nothingEquipped??002C:
 00001A7E  8B DA	     3	mov ebx,edx
 00001A80		     3	notEquipped??002B:
 00001A80  8B 13	     3	mov edx, [ebx].item.itemCode
 00001A82  89 15 00000091 R  3	mov c1.weaponCode, edx
 00001A88  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00001A8B  89 15 0000009D R  3	mov c1.weaponDamage, edx
 00001A91  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001A94  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 00001A9A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00001A9D  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00001AA3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001AA9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001AB0  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001AB7  60		     4	pushAD
 00001AB8  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 00001ABE  FF 05 00000075 R  4	inc c1.agility
 00001AC4  FF 05 00000079 R  4	inc c1.mind   
 00001ACA  FF 05 0000007D R  4	inc c1.fortune
 00001AD0  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001AD5  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001AD7  A3 00000081 R     4	mov c1.hpMax,eax
 00001ADC  A3 00000085 R     4	mov c1.hp,eax
 00001AE1  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001AE6  D1 F8	     4	sar eax,1;//divide by 2
 00001AE8  03 05 0000009D R  4	add eax,c1.weaponDamage
 00001AEE  A3 00000089 R     4	mov c1.damageMin,eax
 00001AF3  8B 1D 00000075 R  4	mov ebx,c1.agility
 00001AF9  C1 FB 02	     4	sar ebx,2;//divide by 4
 00001AFC  03 C3	     4	add eax,ebx
 00001AFE  A3 0000008D R     4	mov c1.damageMax,eax
 00001B03  61		     4	popAD
 00001B04  EB 6D	     2		jmp endCase??0029
 00001B06		     2	infoItem??0029:
 00001B06  E8 00000000 E     2		call clrscr
 00001B0B  BA 0000073B R     3	mov edx, offset blank
 00001B10  E8 00000000 E     3	call WriteString
 00001B15  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00001B1A  E8 00000000 E     3	call WriteString
 00001B1F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001B22  E8 00000000 E     3	call WriteDec
 00001B27  BA 0000073B R     3	mov edx, offset blank
 00001B2C  E8 00000000 E     3	call WriteString
 00001B31  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001B36  E8 00000000 E     3	call WriteString
 00001B3B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00001B3E  E8 00000000 E     3	call WriteDec
 00001B43  BA 0000073B R     3	mov edx, offset blank
 00001B48  E8 00000000 E     3	call WriteString
 00001B4D  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001B52  E8 00000000 E     3	call WriteString
 00001B57  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00001B5A  E8 00000000 E     3	call WriteDec
 00001B5F  BA 0000073B R     3	mov edx, offset blank
 00001B64  E8 00000000 E     3	call WriteString
 00001B69  B8 000007D0	     2		mov eax,2000
 00001B6E  E8 00000000 E     2		call Delay
 00001B73		     2	endCase??0029:
 00001B73  E9 0000049D	     1		jmp endInventory
 00001B78		     1	item8:
 00001B78  BB 00000327 R     1		mov ebx,offset i9 ;//storing item for use
 00001B7D  BA 0000072E R     2	mov edx, offset exitTitle
 00001B82  E8 00000000 E     2	call WriteString
 00001B87  BA 0000045C R     2	mov edx, offset discardTitle
 00001B8C  E8 00000000 E     2	call WriteString
 00001B91  BA 0000046A R     2	mov edx, offset equipTitle
 00001B96  E8 00000000 E     2	call WriteString
 00001B9B  BA 00000476 R     2	mov edx, offset infoTitle
 00001BA0  E8 00000000 E     2	call WriteString
 00001BA5  E8 00000000 E     3		call ReadDec
 00001BAA  8B C8	     3		mov ecx, eax
 00001BAC  81 F9 0000038D    2	cmp ecx,909
 00001BB2  74 18	     2	je exit??002D
 00001BB4  83 F9 01	     2	cmp ecx,1
 00001BB7  74 18	     2	je removeItem??002D
 00001BB9  83 F9 02	     2	cmp ecx,2
 00001BBC  74 2C	     2	je equipItem??002D
 00001BBE  83 F9 03	     2	cmp ecx,3
 00001BC1  0F 84 0000018F    2	je infoItem??002D
 00001BC7  E9 000001F7	     2	jmp endCase??002D
 00001BCC		     2	exit??002D:
 00001BCC  E9 000001F2	     2		jmp endCase??002D
 00001BD1		     2	removeItem??002D:
 00001BD1  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001BD7  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00001BDE  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001BE5  E9 000001D9	     2		jmp endCase??002D
 00001BEA		     2	equipItem??002D:
 00001BEA  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 00001BF1  0F 84 000000D9    3	je notEquipped??002F
 00001BF7  8B D3	     3	mov edx,ebx
 00001BF9  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 00001C00  0F 84 000000C8    4	je nothingEquipped??0030
 00001C06  BB 00000407 R     4	mov ebx, offset i1
 00001C0B		     4	notEmpty??0030:
 00001C0B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00001C0E  74 0F	     4	je isEmpty??0030 
 00001C10  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001C14  0F 84 0000009B    4	je inventoryFull??0030
 00001C1A  8B 5B 10	     4	mov ebx,[ebx].item.next
 00001C1D  EB EC	     4	jmp notEmpty??0030
 00001C1F		     4	isEmpty??0030:
 00001C1F  A1 00000091 R     4	mov eax, c1.weaponCode
 00001C24  89 03	     4	mov [ebx].item.itemCode,eax
 00001C26  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 00001C30  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 00001C35  89 43 04	     4	mov [ebx].item.buyValue,eax
 00001C38  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 00001C42  A1 00000099 R     4	mov eax, c1.weaponSellValue
 00001C47  89 43 08	     4	mov [ebx].item.sellValue,eax
 00001C4A  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 00001C54  A1 0000009D R     4	mov eax, c1.weaponDamage
 00001C59  89 43 14	     4	mov [ebx].item.combatValue,eax
 00001C5C  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 00001C66  60		     5	pushAD
 00001C67  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 00001C6D  FF 05 00000075 R  5	inc c1.agility
 00001C73  FF 05 00000079 R  5	inc c1.mind   
 00001C79  FF 05 0000007D R  5	inc c1.fortune
 00001C7F  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001C84  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001C86  A3 00000081 R     5	mov c1.hpMax,eax
 00001C8B  A3 00000085 R     5	mov c1.hp,eax
 00001C90  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001C95  D1 F8	     5	sar eax,1;//divide by 2
 00001C97  03 05 0000009D R  5	add eax,c1.weaponDamage
 00001C9D  A3 00000089 R     5	mov c1.damageMin,eax
 00001CA2  8B 1D 00000075 R  5	mov ebx,c1.agility
 00001CA8  C1 FB 02	     5	sar ebx,2;//divide by 4
 00001CAB  03 C3	     5	add eax,ebx
 00001CAD  A3 0000008D R     5	mov c1.damageMax,eax
 00001CB2  61		     5	popAD
 00001CB3  EB 19	     4	jmp nothingEquipped??0030
 00001CB5		     4	inventoryFull??0030:
 00001CB5  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00001CBA  E8 00000000 E   *	    call   WriteString
 00001CBF  B8 000005DC	     4	mov eax, 1500
 00001CC4  E8 00000000 E     4	call Delay
 00001CC9  E8 00000000 E     4	call clrscr
 00001CCE		     4	nothingEquipped??0030:
 00001CCE  8B DA	     3	mov ebx,edx
 00001CD0		     3	notEquipped??002F:
 00001CD0  8B 13	     3	mov edx, [ebx].item.itemCode
 00001CD2  89 15 00000091 R  3	mov c1.weaponCode, edx
 00001CD8  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00001CDB  89 15 0000009D R  3	mov c1.weaponDamage, edx
 00001CE1  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001CE4  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 00001CEA  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00001CED  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00001CF3  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001CF9  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001D00  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001D07  60		     4	pushAD
 00001D08  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 00001D0E  FF 05 00000075 R  4	inc c1.agility
 00001D14  FF 05 00000079 R  4	inc c1.mind   
 00001D1A  FF 05 0000007D R  4	inc c1.fortune
 00001D20  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001D25  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001D27  A3 00000081 R     4	mov c1.hpMax,eax
 00001D2C  A3 00000085 R     4	mov c1.hp,eax
 00001D31  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001D36  D1 F8	     4	sar eax,1;//divide by 2
 00001D38  03 05 0000009D R  4	add eax,c1.weaponDamage
 00001D3E  A3 00000089 R     4	mov c1.damageMin,eax
 00001D43  8B 1D 00000075 R  4	mov ebx,c1.agility
 00001D49  C1 FB 02	     4	sar ebx,2;//divide by 4
 00001D4C  03 C3	     4	add eax,ebx
 00001D4E  A3 0000008D R     4	mov c1.damageMax,eax
 00001D53  61		     4	popAD
 00001D54  EB 6D	     2		jmp endCase??002D
 00001D56		     2	infoItem??002D:
 00001D56  E8 00000000 E     2		call clrscr
 00001D5B  BA 0000073B R     3	mov edx, offset blank
 00001D60  E8 00000000 E     3	call WriteString
 00001D65  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00001D6A  E8 00000000 E     3	call WriteString
 00001D6F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001D72  E8 00000000 E     3	call WriteDec
 00001D77  BA 0000073B R     3	mov edx, offset blank
 00001D7C  E8 00000000 E     3	call WriteString
 00001D81  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001D86  E8 00000000 E     3	call WriteString
 00001D8B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00001D8E  E8 00000000 E     3	call WriteDec
 00001D93  BA 0000073B R     3	mov edx, offset blank
 00001D98  E8 00000000 E     3	call WriteString
 00001D9D  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001DA2  E8 00000000 E     3	call WriteString
 00001DA7  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00001DAA  E8 00000000 E     3	call WriteDec
 00001DAF  BA 0000073B R     3	mov edx, offset blank
 00001DB4  E8 00000000 E     3	call WriteString
 00001DB9  B8 000007D0	     2		mov eax,2000
 00001DBE  E8 00000000 E     2		call Delay
 00001DC3		     2	endCase??002D:
 00001DC3  E9 0000024D	     1		jmp endInventory
 00001DC8		     1	item9:
 00001DC8  BB 0000030B R     1		mov ebx,offset i10 ;//storing item for use
 00001DCD  BA 0000072E R     2	mov edx, offset exitTitle
 00001DD2  E8 00000000 E     2	call WriteString
 00001DD7  BA 0000045C R     2	mov edx, offset discardTitle
 00001DDC  E8 00000000 E     2	call WriteString
 00001DE1  BA 0000046A R     2	mov edx, offset equipTitle
 00001DE6  E8 00000000 E     2	call WriteString
 00001DEB  BA 00000476 R     2	mov edx, offset infoTitle
 00001DF0  E8 00000000 E     2	call WriteString
 00001DF5  E8 00000000 E     3		call ReadDec
 00001DFA  8B C8	     3		mov ecx, eax
 00001DFC  81 F9 0000038D    2	cmp ecx,909
 00001E02  74 18	     2	je exit??0031
 00001E04  83 F9 01	     2	cmp ecx,1
 00001E07  74 18	     2	je removeItem??0031
 00001E09  83 F9 02	     2	cmp ecx,2
 00001E0C  74 2C	     2	je equipItem??0031
 00001E0E  83 F9 03	     2	cmp ecx,3
 00001E11  0F 84 0000018F    2	je infoItem??0031
 00001E17  E9 000001F7	     2	jmp endCase??0031
 00001E1C		     2	exit??0031:
 00001E1C  E9 000001F2	     2		jmp endCase??0031
 00001E21		     2	removeItem??0031:
 00001E21  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00001E27  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00001E2E  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00001E35  E9 000001D9	     2		jmp endCase??0031
 00001E3A		     2	equipItem??0031:
 00001E3A  83 3D 00000091 R  3	cmp c1.weaponCode,0
	   00
 00001E41  0F 84 000000D9    3	je notEquipped??0033
 00001E47  8B D3	     3	mov edx,ebx
 00001E49  83 3D 00000091 R  4	cmp c1.weaponCode,0
	   00
 00001E50  0F 84 000000C8    4	je nothingEquipped??0034
 00001E56  BB 00000407 R     4	mov ebx, offset i1
 00001E5B		     4	notEmpty??0034:
 00001E5B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00001E5E  74 0F	     4	je isEmpty??0034 
 00001E60  83 7B 10 00	     4	cmp [ebx].item.next,null
 00001E64  0F 84 0000009B    4	je inventoryFull??0034
 00001E6A  8B 5B 10	     4	mov ebx,[ebx].item.next
 00001E6D  EB EC	     4	jmp notEmpty??0034
 00001E6F		     4	isEmpty??0034:
 00001E6F  A1 00000091 R     4	mov eax, c1.weaponCode
 00001E74  89 03	     4	mov [ebx].item.itemCode,eax
 00001E76  C7 05 00000091 R  4	mov c1.weaponCode,0
	   00000000
 00001E80  A1 00000095 R     4	mov eax, c1.weaponBuyValue
 00001E85  89 43 04	     4	mov [ebx].item.buyValue,eax
 00001E88  C7 05 00000095 R  4	mov c1.weaponBuyValue,0
	   00000000
 00001E92  A1 00000099 R     4	mov eax, c1.weaponSellValue
 00001E97  89 43 08	     4	mov [ebx].item.sellValue,eax
 00001E9A  C7 05 00000099 R  4	mov c1.weaponSellValue,0
	   00000000
 00001EA4  A1 0000009D R     4	mov eax, c1.weaponDamage
 00001EA9  89 43 14	     4	mov [ebx].item.combatValue,eax
 00001EAC  C7 05 0000009D R  4	mov c1.weaponDamage,0
	   00000000
 00001EB6  60		     5	pushAD
 00001EB7  FF 05 00000071 R  5	inc c1.brawn   ;// sets primary attributes
 00001EBD  FF 05 00000075 R  5	inc c1.agility
 00001EC3  FF 05 00000079 R  5	inc c1.mind   
 00001EC9  FF 05 0000007D R  5	inc c1.fortune
 00001ECF  A1 00000071 R     5	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001ED4  D1 E0	     5	sal eax,1 ;// multiply by 2
 00001ED6  A3 00000081 R     5	mov c1.hpMax,eax
 00001EDB  A3 00000085 R     5	mov c1.hp,eax
 00001EE0  A1 00000071 R     5	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001EE5  D1 F8	     5	sar eax,1;//divide by 2
 00001EE7  03 05 0000009D R  5	add eax,c1.weaponDamage
 00001EED  A3 00000089 R     5	mov c1.damageMin,eax
 00001EF2  8B 1D 00000075 R  5	mov ebx,c1.agility
 00001EF8  C1 FB 02	     5	sar ebx,2;//divide by 4
 00001EFB  03 C3	     5	add eax,ebx
 00001EFD  A3 0000008D R     5	mov c1.damageMax,eax
 00001F02  61		     5	popAD
 00001F03  EB 19	     4	jmp nothingEquipped??0034
 00001F05		     4	inventoryFull??0034:
 00001F05  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00001F0A  E8 00000000 E   *	    call   WriteString
 00001F0F  B8 000005DC	     4	mov eax, 1500
 00001F14  E8 00000000 E     4	call Delay
 00001F19  E8 00000000 E     4	call clrscr
 00001F1E		     4	nothingEquipped??0034:
 00001F1E  8B DA	     3	mov ebx,edx
 00001F20		     3	notEquipped??0033:
 00001F20  8B 13	     3	mov edx, [ebx].item.itemCode
 00001F22  89 15 00000091 R  3	mov c1.weaponCode, edx
 00001F28  8B 53 14	     3	mov edx, [ebx].item.combatValue
 00001F2B  89 15 0000009D R  3	mov c1.weaponDamage, edx
 00001F31  8B 53 04	     3	mov edx, [ebx].item.buyValue
 00001F34  89 15 00000095 R  3	mov c1.weaponBuyValue,edx
 00001F3A  8B 53 08	     3	mov edx,[ebx].item.sellValue
 00001F3D  89 15 00000099 R  3	mov c1.weaponsellValue,edx
 00001F43  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00001F49  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00001F50  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00001F57  60		     4	pushAD
 00001F58  FF 05 00000071 R  4	inc c1.brawn   ;// sets primary attributes
 00001F5E  FF 05 00000075 R  4	inc c1.agility
 00001F64  FF 05 00000079 R  4	inc c1.mind   
 00001F6A  FF 05 0000007D R  4	inc c1.fortune
 00001F70  A1 00000071 R     4	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 00001F75  D1 E0	     4	sal eax,1 ;// multiply by 2
 00001F77  A3 00000081 R     4	mov c1.hpMax,eax
 00001F7C  A3 00000085 R     4	mov c1.hp,eax
 00001F81  A1 00000071 R     4	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 00001F86  D1 F8	     4	sar eax,1;//divide by 2
 00001F88  03 05 0000009D R  4	add eax,c1.weaponDamage
 00001F8E  A3 00000089 R     4	mov c1.damageMin,eax
 00001F93  8B 1D 00000075 R  4	mov ebx,c1.agility
 00001F99  C1 FB 02	     4	sar ebx,2;//divide by 4
 00001F9C  03 C3	     4	add eax,ebx
 00001F9E  A3 0000008D R     4	mov c1.damageMax,eax
 00001FA3  61		     4	popAD
 00001FA4  EB 6D	     2		jmp endCase??0031
 00001FA6		     2	infoItem??0031:
 00001FA6  E8 00000000 E     2		call clrscr
 00001FAB  BA 0000073B R     3	mov edx, offset blank
 00001FB0  E8 00000000 E     3	call WriteString
 00001FB5  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00001FBA  E8 00000000 E     3	call WriteString
 00001FBF  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00001FC2  E8 00000000 E     3	call WriteDec
 00001FC7  BA 0000073B R     3	mov edx, offset blank
 00001FCC  E8 00000000 E     3	call WriteString
 00001FD1  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00001FD6  E8 00000000 E     3	call WriteString
 00001FDB  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00001FDE  E8 00000000 E     3	call WriteDec
 00001FE3  BA 0000073B R     3	mov edx, offset blank
 00001FE8  E8 00000000 E     3	call WriteString
 00001FED  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00001FF2  E8 00000000 E     3	call WriteString
 00001FF7  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00001FFA  E8 00000000 E     3	call WriteDec
 00001FFF  BA 0000073B R     3	mov edx, offset blank
 00002004  E8 00000000 E     3	call WriteString
 00002009  B8 000007D0	     2		mov eax,2000
 0000200E  E8 00000000 E     2		call Delay
 00002013		     2	endCase??0031:
 00002013  EB 00	     1		jmp endInventory
 00002015		     1	endInventory:
 00002015  E8 00000000 E     1	call clrscr
 0000201A  E9 000025C0				jmp end_switch
 0000201F				dequip:
						mDequip
 0000201F  83 3D 00000091 R  1	cmp c1.weaponCode,0
	   00
 00002026  0F 84 000000C8    1	je nothingEquipped??0035
 0000202C  BB 00000407 R     1	mov ebx, offset i1
 00002031		     1	notEmpty??0035:
 00002031  83 3B 00	     1	cmp [ebx].item.itemCode,0
 00002034  74 0F	     1	je isEmpty??0035 
 00002036  83 7B 10 00	     1	cmp [ebx].item.next,null
 0000203A  0F 84 0000009B    1	je inventoryFull??0035
 00002040  8B 5B 10	     1	mov ebx,[ebx].item.next
 00002043  EB EC	     1	jmp notEmpty??0035
 00002045		     1	isEmpty??0035:
 00002045  A1 00000091 R     1	mov eax, c1.weaponCode
 0000204A  89 03	     1	mov [ebx].item.itemCode,eax
 0000204C  C7 05 00000091 R  1	mov c1.weaponCode,0
	   00000000
 00002056  A1 00000095 R     1	mov eax, c1.weaponBuyValue
 0000205B  89 43 04	     1	mov [ebx].item.buyValue,eax
 0000205E  C7 05 00000095 R  1	mov c1.weaponBuyValue,0
	   00000000
 00002068  A1 00000099 R     1	mov eax, c1.weaponSellValue
 0000206D  89 43 08	     1	mov [ebx].item.sellValue,eax
 00002070  C7 05 00000099 R  1	mov c1.weaponSellValue,0
	   00000000
 0000207A  A1 0000009D R     1	mov eax, c1.weaponDamage
 0000207F  89 43 14	     1	mov [ebx].item.combatValue,eax
 00002082  C7 05 0000009D R  1	mov c1.weaponDamage,0
	   00000000
 0000208C  60		     2	pushAD
 0000208D  FF 05 00000071 R  2	inc c1.brawn   ;// sets primary attributes
 00002093  FF 05 00000075 R  2	inc c1.agility
 00002099  FF 05 00000079 R  2	inc c1.mind   
 0000209F  FF 05 0000007D R  2	inc c1.fortune
 000020A5  A1 00000071 R     2	mov eax, c1.brawn ;// maxHP & hp initialize = brawn*2
 000020AA  D1 E0	     2	sal eax,1 ;// multiply by 2
 000020AC  A3 00000081 R     2	mov c1.hpMax,eax
 000020B1  A3 00000085 R     2	mov c1.hp,eax
 000020B6  A1 00000071 R     2	mov eax,c1.brawn;// damageMin & Max initialize damageMin = brawn/2 damage max = damageMin + agility/4
 000020BB  D1 F8	     2	sar eax,1;//divide by 2
 000020BD  03 05 0000009D R  2	add eax,c1.weaponDamage
 000020C3  A3 00000089 R     2	mov c1.damageMin,eax
 000020C8  8B 1D 00000075 R  2	mov ebx,c1.agility
 000020CE  C1 FB 02	     2	sar ebx,2;//divide by 4
 000020D1  03 C3	     2	add eax,ebx
 000020D3  A3 0000008D R     2	mov c1.damageMax,eax
 000020D8  61		     2	popAD
 000020D9  EB 19	     1	jmp nothingEquipped??0035
 000020DB		     1	inventoryFull??0035:
 000020DB  BA 000004D0 R     1	mov edx, offset inventoryFullTitle
 000020E0  E8 00000000 E   *	    call   WriteString
 000020E5  B8 000005DC	     1	mov eax, 1500
 000020EA  E8 00000000 E     1	call Delay
 000020EF  E8 00000000 E     1	call clrscr
 000020F4		     1	nothingEquipped??0035:
 000020F4  E9 000024E6				jmp end_switch
 000020F9				shop:
						mShop
 000020F9  BA 00000648 R     1	mov edx, offset shopPrompt1
 000020FE  E8 00000000 E   *	    call   WriteString
 00002103  BA 00000665 R     1	mov edx, offset shopPrompt2
 00002108  E8 00000000 E   *	    call   WriteString
 0000210D  E8 00000000 E     1	call crlf
 00002112  BA 00000714 R     1	mov edx, offset continueCommand
 00002117  E8 00000000 E   *	    call   WriteString
 0000211C  E8 00000000 E     2		call ReadDec
 00002121  8B C8	     2		mov ecx, eax
 00002123  E8 00000000 E     1	call clrscr
 00002128		     1	stillShopping??0036:
 00002128  BA 000005F9 R     1	mov edx, offset shopMenuTitle
 0000212D  E8 00000000 E   *	    call   WriteString
 00002132  BA 0000072E R     1	mov edx, offset exitTitle
 00002137  E8 00000000 E   *	    call   WriteString
 0000213C  BB 000005DD R     1	mov ebx, offset s1;//moving first item to read linked list
 00002141  60		     2	pushAD
 00002142  33 C9	     2	xor ecx,ecx
 00002144		     2	DO1??0038:
 00002144  8B C1	     2	mov eax,ecx
 00002146  E8 00000000 E     2	call WriteDec
 0000214B  B8 0000003A	     2	mov eax, ':'
 00002150  E8 00000000 E     2	call WriteChar
 00002155  8B 03	     2	mov eax, [ebx].item.itemCode
 00002157  83 F8 01	     3	cmp eax,1
 0000215A  74 11	     3	je item0??0039
 0000215C  83 F8 02	     3	cmp eax,2
 0000215F  74 13	     3	je item1??0039
 00002161  83 F8 03	     3	cmp eax,3
 00002164  74 15	     3	je item2??0039
 00002166  83 F8 04	     3	cmp eax,4
 00002169  74 17	     3	je item3??0039
 0000216B  EB 1C	     3	jmp default??0039
 0000216D		     3	item0??0039:
 0000216D  BA 00000000 R     3		mov edx, offset itemName1
 00002172  EB 1A	     3		jmp print??0039
 00002174		     3	item1??0039:
 00002174  BA 00000009 R     3		mov edx, offset itemName2
 00002179  EB 13	     3		jmp print??0039
 0000217B		     3	item2??0039:
 0000217B  BA 00000013 R     3		mov edx, offset itemName3
 00002180  EB 0C	     3		jmp print??0039
 00002182		     3	item3??0039:
 00002182  BA 0000001B R     3		mov edx, offset itemName4
 00002187  EB 05	     3		jmp print??0039
 00002189		     3	default??0039:
 00002189  BA 00000038 R     3		mov edx, offset defaultName
 0000218E		     3	print??0039:
 0000218E  E8 00000000 E   *	    call   WriteString
 00002193  BA 0000073B R     2	mov edx,offset blank
 00002198  E8 00000000 E     2	call WriteString
 0000219D  8B 5B 10	     2	mov eBx,[ebx].item.next
 000021A0  41		     2	inc ecx
 000021A1  83 FB 00	     2	cmp ebx,null
 000021A4  75 9E	     2	jne DO1??0038
 000021A6  61		     2	popAD
 000021A7  BA 00000604 R     1	mov edx,offset sellModeTitle
 000021AC  E8 00000000 E   *	    call   WriteString
 000021B1  E8 00000000 E     2		call ReadDec
 000021B6  8B C8	     2		mov ecx, eax
 000021B8  81 F9 0000038D    1	cmp ecx,909
 000021BE  0F 84 00000FD1    1		je exitShop??0036
 000021C4  83 F9 00	     1	cmp ecx,0
 000021C7  74 5F	     1		je item0??0036
 000021C9  83 F9 01	     1	cmp ecx,1
 000021CC  0F 84 000001A0    1		je item1??0036
 000021D2  83 F9 02	     1	cmp ecx,2
 000021D5  0F 84 000002E1    1		je item2??0036
 000021DB  83 F9 03	     1	cmp ecx,3
 000021DE  0F 84 00000422    1		je item3??0036
 000021E4  83 F9 04	     1	cmp ecx,4
 000021E7  0F 84 00000563    1		je item4??0036
 000021ED  83 F9 05	     1	cmp ecx,5
 000021F0  0F 84 000006A4    1		je item5??0036
 000021F6  83 F9 06	     1	cmp ecx,6
 000021F9  0F 84 000007E5    1		je item6??0036
 000021FF  83 F9 07	     1	cmp ecx,7
 00002202  0F 84 00000926    1		je item7??0036
 00002208  83 F9 08	     1	cmp ecx,8
 0000220B  0F 84 00000A67    1		je item8??0036
 00002211  83 F9 09	     1	cmp ecx,9
 00002214  0F 84 00000BA8    1		je item9??0036
 0000221A  83 F9 0A	     1	cmp ecx,10
 0000221D  0F 84 00000BA4    1		je sellMode??0036
 00002223  E9 00000F6D	     1	jmp exitShop??0036
 00002228		     1	item0??0036:
 00002228  BB 000005DD R     1		mov ebx,offset s1 ;//storing item for use
 0000222D  BA 0000072E R     2	mov edx, offset exitTitle
 00002232  BA 00000635 R     2	mov edx, offset buyTitle
 00002237  E8 00000000 E     2	call WriteString
 0000223C  BA 00000476 R     2	mov edx, offset infoTitle
 00002241  E8 00000000 E     2	call WriteString
 00002246  E8 00000000 E     3		call ReadDec
 0000224B  8B C8	     3		mov ecx, eax
 0000224D  81 F9 0000038D    2	cmp ecx,909
 00002253  74 13	     2	je exit??003B
 00002255  83 F9 02	     2	cmp ecx,2
 00002258  74 13	     2	je buyItem??003B
 0000225A  83 F9 03	     2	cmp ecx,3
 0000225D  0F 84 0000009D    2	je infoItem??003B
 00002263  E9 00000105	     2	jmp endCase??003B
 00002268		     2	exit??003B:
 00002268  E9 00000100	     2		jmp endCase??003B
 0000226D		     2	buyItem??003B:
 0000226D  8B 15 0000006D R  2		mov edx, c1.gold 
 00002273  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002276  3B D0	     2		cmp edx,eax
 00002278  72 6B	     2		jb notEnoughGold??003B
 0000227A  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 00002280  8B C3	     2		mov eax,ebx ;//moving for add
 00002282  8B D3	     2		mov edx,ebx ;//storing for remove
 00002284  BB 00000407 R     3	mov ebx, offset i1
 00002289		     3	notEmpty??003D:
 00002289  83 3B 00	     3	cmp [ebx].item.itemCode,0
 0000228C  74 0B	     3	je isEmpty??003D 
 0000228E  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002292  74 1D	     3	je inventoryFull??003D
 00002294  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002297  EB F0	     3	jmp notEmpty??003D
 00002299		     3	isEmpty??003D:
 00002299  8B 08	     3	mov ecx, [eax].item.itemCode
 0000229B  89 0B	     3	mov [ebx].item.itemCode,ecx
 0000229D  8B 48 04	     3	mov ecx, [eax].item.buyValue
 000022A0  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 000022A3  8B 48 08	     3	mov ecx, [eax].item.sellValue
 000022A6  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 000022A9  8B 48 14	     3	mov ecx, [eax].item.combatValue
 000022AC  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 000022AF  EB 19	     3	jmp end??003D
 000022B1		     3	inventoryFull??003D:
 000022B1  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 000022B6  E8 00000000 E   *	    call   WriteString
 000022BB  B8 000005DC	     3	mov eax, 1500
 000022C0  E8 00000000 E     3	call Delay
 000022C5  E8 00000000 E     3	call clrscr
 000022CA		     3	end??003D:
 000022CA  8B DA	     2		mov ebx,edx ;//moving for remove
 000022CC  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000022D2  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000022D9  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000022E0  E9 00000088	     2		jmp endCase??003B
 000022E5		     2		notEnoughGold??003B:
 000022E5  E8 00000000 E     2		call clrscr
 000022EA  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 000022EF  E8 00000000 E   *	    call   WriteString
 000022F4  B8 000007D0	     2		mov eax,2000
 000022F9  E8 00000000 E     2		call Delay
 000022FE  EB 6D	     2		jmp endCase??003B
 00002300		     2	infoItem??003B:
 00002300  E8 00000000 E     2		call clrscr
 00002305  BA 0000073B R     3	mov edx, offset blank
 0000230A  E8 00000000 E     3	call WriteString
 0000230F  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002314  E8 00000000 E     3	call WriteString
 00002319  8B 43 04	     3	mov eax, [ebx].item.buyValue
 0000231C  E8 00000000 E     3	call WriteDec
 00002321  BA 0000073B R     3	mov edx, offset blank
 00002326  E8 00000000 E     3	call WriteString
 0000232B  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002330  E8 00000000 E     3	call WriteString
 00002335  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002338  E8 00000000 E     3	call WriteDec
 0000233D  BA 0000073B R     3	mov edx, offset blank
 00002342  E8 00000000 E     3	call WriteString
 00002347  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 0000234C  E8 00000000 E     3	call WriteString
 00002351  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002354  E8 00000000 E     3	call WriteDec
 00002359  BA 0000073B R     3	mov edx, offset blank
 0000235E  E8 00000000 E     3	call WriteString
 00002363  B8 000007D0	     2		mov eax,2000
 00002368  E8 00000000 E     2		call Delay
 0000236D		     2	endCase??003B:
 0000236D  E9 FFFFFDB6	     1		jmp stillShopping??0036
 00002372		     1	item1??0036:
 00002372  BB 000005C1 R     1		mov ebx,offset s2 ;//storing item for use
 00002377  BA 0000072E R     2	mov edx, offset exitTitle
 0000237C  BA 00000635 R     2	mov edx, offset buyTitle
 00002381  E8 00000000 E     2	call WriteString
 00002386  BA 00000476 R     2	mov edx, offset infoTitle
 0000238B  E8 00000000 E     2	call WriteString
 00002390  E8 00000000 E     3		call ReadDec
 00002395  8B C8	     3		mov ecx, eax
 00002397  81 F9 0000038D    2	cmp ecx,909
 0000239D  74 13	     2	je exit??003E
 0000239F  83 F9 02	     2	cmp ecx,2
 000023A2  74 13	     2	je buyItem??003E
 000023A4  83 F9 03	     2	cmp ecx,3
 000023A7  0F 84 0000009D    2	je infoItem??003E
 000023AD  E9 00000105	     2	jmp endCase??003E
 000023B2		     2	exit??003E:
 000023B2  E9 00000100	     2		jmp endCase??003E
 000023B7		     2	buyItem??003E:
 000023B7  8B 15 0000006D R  2		mov edx, c1.gold 
 000023BD  8B 43 04	     2		mov eax, [ebx].item.buyValue
 000023C0  3B D0	     2		cmp edx,eax
 000023C2  72 6B	     2		jb notEnoughGold??003E
 000023C4  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 000023CA  8B C3	     2		mov eax,ebx ;//moving for add
 000023CC  8B D3	     2		mov edx,ebx ;//storing for remove
 000023CE  BB 00000407 R     3	mov ebx, offset i1
 000023D3		     3	notEmpty??0040:
 000023D3  83 3B 00	     3	cmp [ebx].item.itemCode,0
 000023D6  74 0B	     3	je isEmpty??0040 
 000023D8  83 7B 10 00	     3	cmp [ebx].item.next,null
 000023DC  74 1D	     3	je inventoryFull??0040
 000023DE  8B 5B 10	     3	mov ebx,[ebx].item.next
 000023E1  EB F0	     3	jmp notEmpty??0040
 000023E3		     3	isEmpty??0040:
 000023E3  8B 08	     3	mov ecx, [eax].item.itemCode
 000023E5  89 0B	     3	mov [ebx].item.itemCode,ecx
 000023E7  8B 48 04	     3	mov ecx, [eax].item.buyValue
 000023EA  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 000023ED  8B 48 08	     3	mov ecx, [eax].item.sellValue
 000023F0  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 000023F3  8B 48 14	     3	mov ecx, [eax].item.combatValue
 000023F6  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 000023F9  EB 19	     3	jmp end??0040
 000023FB		     3	inventoryFull??0040:
 000023FB  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 00002400  E8 00000000 E   *	    call   WriteString
 00002405  B8 000005DC	     3	mov eax, 1500
 0000240A  E8 00000000 E     3	call Delay
 0000240F  E8 00000000 E     3	call clrscr
 00002414		     3	end??0040:
 00002414  8B DA	     2		mov ebx,edx ;//moving for remove
 00002416  C7 03 00000000    3	mov [ebx].item.itemCode,null
 0000241C  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002423  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 0000242A  E9 00000088	     2		jmp endCase??003E
 0000242F		     2		notEnoughGold??003E:
 0000242F  E8 00000000 E     2		call clrscr
 00002434  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 00002439  E8 00000000 E   *	    call   WriteString
 0000243E  B8 000007D0	     2		mov eax,2000
 00002443  E8 00000000 E     2		call Delay
 00002448  EB 6D	     2		jmp endCase??003E
 0000244A		     2	infoItem??003E:
 0000244A  E8 00000000 E     2		call clrscr
 0000244F  BA 0000073B R     3	mov edx, offset blank
 00002454  E8 00000000 E     3	call WriteString
 00002459  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000245E  E8 00000000 E     3	call WriteString
 00002463  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002466  E8 00000000 E     3	call WriteDec
 0000246B  BA 0000073B R     3	mov edx, offset blank
 00002470  E8 00000000 E     3	call WriteString
 00002475  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 0000247A  E8 00000000 E     3	call WriteString
 0000247F  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002482  E8 00000000 E     3	call WriteDec
 00002487  BA 0000073B R     3	mov edx, offset blank
 0000248C  E8 00000000 E     3	call WriteString
 00002491  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002496  E8 00000000 E     3	call WriteString
 0000249B  8B 43 14	     3	mov eax, [ebx].item.combatValue
 0000249E  E8 00000000 E     3	call WriteDec
 000024A3  BA 0000073B R     3	mov edx, offset blank
 000024A8  E8 00000000 E     3	call WriteString
 000024AD  B8 000007D0	     2		mov eax,2000
 000024B2  E8 00000000 E     2		call Delay
 000024B7		     2	endCase??003E:
 000024B7  E9 FFFFFC6C	     1		jmp stillShopping??0036
 000024BC		     1	item2??0036:
 000024BC  BB 000005A5 R     1		mov ebx,offset s3 ;//storing item for use
 000024C1  BA 0000072E R     2	mov edx, offset exitTitle
 000024C6  BA 00000635 R     2	mov edx, offset buyTitle
 000024CB  E8 00000000 E     2	call WriteString
 000024D0  BA 00000476 R     2	mov edx, offset infoTitle
 000024D5  E8 00000000 E     2	call WriteString
 000024DA  E8 00000000 E     3		call ReadDec
 000024DF  8B C8	     3		mov ecx, eax
 000024E1  81 F9 0000038D    2	cmp ecx,909
 000024E7  74 13	     2	je exit??0041
 000024E9  83 F9 02	     2	cmp ecx,2
 000024EC  74 13	     2	je buyItem??0041
 000024EE  83 F9 03	     2	cmp ecx,3
 000024F1  0F 84 0000009D    2	je infoItem??0041
 000024F7  E9 00000105	     2	jmp endCase??0041
 000024FC		     2	exit??0041:
 000024FC  E9 00000100	     2		jmp endCase??0041
 00002501		     2	buyItem??0041:
 00002501  8B 15 0000006D R  2		mov edx, c1.gold 
 00002507  8B 43 04	     2		mov eax, [ebx].item.buyValue
 0000250A  3B D0	     2		cmp edx,eax
 0000250C  72 6B	     2		jb notEnoughGold??0041
 0000250E  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 00002514  8B C3	     2		mov eax,ebx ;//moving for add
 00002516  8B D3	     2		mov edx,ebx ;//storing for remove
 00002518  BB 00000407 R     3	mov ebx, offset i1
 0000251D		     3	notEmpty??0043:
 0000251D  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002520  74 0B	     3	je isEmpty??0043 
 00002522  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002526  74 1D	     3	je inventoryFull??0043
 00002528  8B 5B 10	     3	mov ebx,[ebx].item.next
 0000252B  EB F0	     3	jmp notEmpty??0043
 0000252D		     3	isEmpty??0043:
 0000252D  8B 08	     3	mov ecx, [eax].item.itemCode
 0000252F  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002531  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002534  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002537  8B 48 08	     3	mov ecx, [eax].item.sellValue
 0000253A  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 0000253D  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002540  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002543  EB 19	     3	jmp end??0043
 00002545		     3	inventoryFull??0043:
 00002545  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 0000254A  E8 00000000 E   *	    call   WriteString
 0000254F  B8 000005DC	     3	mov eax, 1500
 00002554  E8 00000000 E     3	call Delay
 00002559  E8 00000000 E     3	call clrscr
 0000255E		     3	end??0043:
 0000255E  8B DA	     2		mov ebx,edx ;//moving for remove
 00002560  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00002566  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000256D  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002574  E9 00000088	     2		jmp endCase??0041
 00002579		     2		notEnoughGold??0041:
 00002579  E8 00000000 E     2		call clrscr
 0000257E  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 00002583  E8 00000000 E   *	    call   WriteString
 00002588  B8 000007D0	     2		mov eax,2000
 0000258D  E8 00000000 E     2		call Delay
 00002592  EB 6D	     2		jmp endCase??0041
 00002594		     2	infoItem??0041:
 00002594  E8 00000000 E     2		call clrscr
 00002599  BA 0000073B R     3	mov edx, offset blank
 0000259E  E8 00000000 E     3	call WriteString
 000025A3  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000025A8  E8 00000000 E     3	call WriteString
 000025AD  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000025B0  E8 00000000 E     3	call WriteDec
 000025B5  BA 0000073B R     3	mov edx, offset blank
 000025BA  E8 00000000 E     3	call WriteString
 000025BF  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000025C4  E8 00000000 E     3	call WriteString
 000025C9  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000025CC  E8 00000000 E     3	call WriteDec
 000025D1  BA 0000073B R     3	mov edx, offset blank
 000025D6  E8 00000000 E     3	call WriteString
 000025DB  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000025E0  E8 00000000 E     3	call WriteString
 000025E5  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000025E8  E8 00000000 E     3	call WriteDec
 000025ED  BA 0000073B R     3	mov edx, offset blank
 000025F2  E8 00000000 E     3	call WriteString
 000025F7  B8 000007D0	     2		mov eax,2000
 000025FC  E8 00000000 E     2		call Delay
 00002601		     2	endCase??0041:
 00002601  E9 FFFFFB22	     1		jmp stillShopping??0036
 00002606		     1	item3??0036:
 00002606  BB 00000589 R     1		mov ebx,offset s4 ;//storing item for use
 0000260B  BA 0000072E R     2	mov edx, offset exitTitle
 00002610  BA 00000635 R     2	mov edx, offset buyTitle
 00002615  E8 00000000 E     2	call WriteString
 0000261A  BA 00000476 R     2	mov edx, offset infoTitle
 0000261F  E8 00000000 E     2	call WriteString
 00002624  E8 00000000 E     3		call ReadDec
 00002629  8B C8	     3		mov ecx, eax
 0000262B  81 F9 0000038D    2	cmp ecx,909
 00002631  74 13	     2	je exit??0044
 00002633  83 F9 02	     2	cmp ecx,2
 00002636  74 13	     2	je buyItem??0044
 00002638  83 F9 03	     2	cmp ecx,3
 0000263B  0F 84 0000009D    2	je infoItem??0044
 00002641  E9 00000105	     2	jmp endCase??0044
 00002646		     2	exit??0044:
 00002646  E9 00000100	     2		jmp endCase??0044
 0000264B		     2	buyItem??0044:
 0000264B  8B 15 0000006D R  2		mov edx, c1.gold 
 00002651  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002654  3B D0	     2		cmp edx,eax
 00002656  72 6B	     2		jb notEnoughGold??0044
 00002658  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 0000265E  8B C3	     2		mov eax,ebx ;//moving for add
 00002660  8B D3	     2		mov edx,ebx ;//storing for remove
 00002662  BB 00000407 R     3	mov ebx, offset i1
 00002667		     3	notEmpty??0046:
 00002667  83 3B 00	     3	cmp [ebx].item.itemCode,0
 0000266A  74 0B	     3	je isEmpty??0046 
 0000266C  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002670  74 1D	     3	je inventoryFull??0046
 00002672  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002675  EB F0	     3	jmp notEmpty??0046
 00002677		     3	isEmpty??0046:
 00002677  8B 08	     3	mov ecx, [eax].item.itemCode
 00002679  89 0B	     3	mov [ebx].item.itemCode,ecx
 0000267B  8B 48 04	     3	mov ecx, [eax].item.buyValue
 0000267E  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002681  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002684  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002687  8B 48 14	     3	mov ecx, [eax].item.combatValue
 0000268A  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 0000268D  EB 19	     3	jmp end??0046
 0000268F		     3	inventoryFull??0046:
 0000268F  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 00002694  E8 00000000 E   *	    call   WriteString
 00002699  B8 000005DC	     3	mov eax, 1500
 0000269E  E8 00000000 E     3	call Delay
 000026A3  E8 00000000 E     3	call clrscr
 000026A8		     3	end??0046:
 000026A8  8B DA	     2		mov ebx,edx ;//moving for remove
 000026AA  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000026B0  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 000026B7  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 000026BE  E9 00000088	     2		jmp endCase??0044
 000026C3		     2		notEnoughGold??0044:
 000026C3  E8 00000000 E     2		call clrscr
 000026C8  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 000026CD  E8 00000000 E   *	    call   WriteString
 000026D2  B8 000007D0	     2		mov eax,2000
 000026D7  E8 00000000 E     2		call Delay
 000026DC  EB 6D	     2		jmp endCase??0044
 000026DE		     2	infoItem??0044:
 000026DE  E8 00000000 E     2		call clrscr
 000026E3  BA 0000073B R     3	mov edx, offset blank
 000026E8  E8 00000000 E     3	call WriteString
 000026ED  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 000026F2  E8 00000000 E     3	call WriteString
 000026F7  8B 43 04	     3	mov eax, [ebx].item.buyValue
 000026FA  E8 00000000 E     3	call WriteDec
 000026FF  BA 0000073B R     3	mov edx, offset blank
 00002704  E8 00000000 E     3	call WriteString
 00002709  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 0000270E  E8 00000000 E     3	call WriteString
 00002713  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002716  E8 00000000 E     3	call WriteDec
 0000271B  BA 0000073B R     3	mov edx, offset blank
 00002720  E8 00000000 E     3	call WriteString
 00002725  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 0000272A  E8 00000000 E     3	call WriteString
 0000272F  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002732  E8 00000000 E     3	call WriteDec
 00002737  BA 0000073B R     3	mov edx, offset blank
 0000273C  E8 00000000 E     3	call WriteString
 00002741  B8 000007D0	     2		mov eax,2000
 00002746  E8 00000000 E     2		call Delay
 0000274B		     2	endCase??0044:
 0000274B  E9 FFFFF9D8	     1		jmp stillShopping??0036
 00002750		     1	item4??0036:
 00002750  BB 0000056D R     1		mov ebx,offset s5 ;//storing item for use
 00002755  BA 0000072E R     2	mov edx, offset exitTitle
 0000275A  BA 00000635 R     2	mov edx, offset buyTitle
 0000275F  E8 00000000 E     2	call WriteString
 00002764  BA 00000476 R     2	mov edx, offset infoTitle
 00002769  E8 00000000 E     2	call WriteString
 0000276E  E8 00000000 E     3		call ReadDec
 00002773  8B C8	     3		mov ecx, eax
 00002775  81 F9 0000038D    2	cmp ecx,909
 0000277B  74 13	     2	je exit??0047
 0000277D  83 F9 02	     2	cmp ecx,2
 00002780  74 13	     2	je buyItem??0047
 00002782  83 F9 03	     2	cmp ecx,3
 00002785  0F 84 0000009D    2	je infoItem??0047
 0000278B  E9 00000105	     2	jmp endCase??0047
 00002790		     2	exit??0047:
 00002790  E9 00000100	     2		jmp endCase??0047
 00002795		     2	buyItem??0047:
 00002795  8B 15 0000006D R  2		mov edx, c1.gold 
 0000279B  8B 43 04	     2		mov eax, [ebx].item.buyValue
 0000279E  3B D0	     2		cmp edx,eax
 000027A0  72 6B	     2		jb notEnoughGold??0047
 000027A2  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 000027A8  8B C3	     2		mov eax,ebx ;//moving for add
 000027AA  8B D3	     2		mov edx,ebx ;//storing for remove
 000027AC  BB 00000407 R     3	mov ebx, offset i1
 000027B1		     3	notEmpty??0049:
 000027B1  83 3B 00	     3	cmp [ebx].item.itemCode,0
 000027B4  74 0B	     3	je isEmpty??0049 
 000027B6  83 7B 10 00	     3	cmp [ebx].item.next,null
 000027BA  74 1D	     3	je inventoryFull??0049
 000027BC  8B 5B 10	     3	mov ebx,[ebx].item.next
 000027BF  EB F0	     3	jmp notEmpty??0049
 000027C1		     3	isEmpty??0049:
 000027C1  8B 08	     3	mov ecx, [eax].item.itemCode
 000027C3  89 0B	     3	mov [ebx].item.itemCode,ecx
 000027C5  8B 48 04	     3	mov ecx, [eax].item.buyValue
 000027C8  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 000027CB  8B 48 08	     3	mov ecx, [eax].item.sellValue
 000027CE  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 000027D1  8B 48 14	     3	mov ecx, [eax].item.combatValue
 000027D4  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 000027D7  EB 19	     3	jmp end??0049
 000027D9		     3	inventoryFull??0049:
 000027D9  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 000027DE  E8 00000000 E   *	    call   WriteString
 000027E3  B8 000005DC	     3	mov eax, 1500
 000027E8  E8 00000000 E     3	call Delay
 000027ED  E8 00000000 E     3	call clrscr
 000027F2		     3	end??0049:
 000027F2  8B DA	     2		mov ebx,edx ;//moving for remove
 000027F4  C7 03 00000000    3	mov [ebx].item.itemCode,null
 000027FA  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002801  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002808  E9 00000088	     2		jmp endCase??0047
 0000280D		     2		notEnoughGold??0047:
 0000280D  E8 00000000 E     2		call clrscr
 00002812  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 00002817  E8 00000000 E   *	    call   WriteString
 0000281C  B8 000007D0	     2		mov eax,2000
 00002821  E8 00000000 E     2		call Delay
 00002826  EB 6D	     2		jmp endCase??0047
 00002828		     2	infoItem??0047:
 00002828  E8 00000000 E     2		call clrscr
 0000282D  BA 0000073B R     3	mov edx, offset blank
 00002832  E8 00000000 E     3	call WriteString
 00002837  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 0000283C  E8 00000000 E     3	call WriteString
 00002841  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002844  E8 00000000 E     3	call WriteDec
 00002849  BA 0000073B R     3	mov edx, offset blank
 0000284E  E8 00000000 E     3	call WriteString
 00002853  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002858  E8 00000000 E     3	call WriteString
 0000285D  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002860  E8 00000000 E     3	call WriteDec
 00002865  BA 0000073B R     3	mov edx, offset blank
 0000286A  E8 00000000 E     3	call WriteString
 0000286F  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002874  E8 00000000 E     3	call WriteString
 00002879  8B 43 14	     3	mov eax, [ebx].item.combatValue
 0000287C  E8 00000000 E     3	call WriteDec
 00002881  BA 0000073B R     3	mov edx, offset blank
 00002886  E8 00000000 E     3	call WriteString
 0000288B  B8 000007D0	     2		mov eax,2000
 00002890  E8 00000000 E     2		call Delay
 00002895		     2	endCase??0047:
 00002895  E9 FFFFF88E	     1		jmp stillShopping??0036
 0000289A		     1	item5??0036:
 0000289A  BB 00000551 R     1		mov ebx,offset s6 ;//storing item for use
 0000289F  BA 0000072E R     2	mov edx, offset exitTitle
 000028A4  BA 00000635 R     2	mov edx, offset buyTitle
 000028A9  E8 00000000 E     2	call WriteString
 000028AE  BA 00000476 R     2	mov edx, offset infoTitle
 000028B3  E8 00000000 E     2	call WriteString
 000028B8  E8 00000000 E     3		call ReadDec
 000028BD  8B C8	     3		mov ecx, eax
 000028BF  81 F9 0000038D    2	cmp ecx,909
 000028C5  74 13	     2	je exit??004A
 000028C7  83 F9 02	     2	cmp ecx,2
 000028CA  74 13	     2	je buyItem??004A
 000028CC  83 F9 03	     2	cmp ecx,3
 000028CF  0F 84 0000009D    2	je infoItem??004A
 000028D5  E9 00000105	     2	jmp endCase??004A
 000028DA		     2	exit??004A:
 000028DA  E9 00000100	     2		jmp endCase??004A
 000028DF		     2	buyItem??004A:
 000028DF  8B 15 0000006D R  2		mov edx, c1.gold 
 000028E5  8B 43 04	     2		mov eax, [ebx].item.buyValue
 000028E8  3B D0	     2		cmp edx,eax
 000028EA  72 6B	     2		jb notEnoughGold??004A
 000028EC  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 000028F2  8B C3	     2		mov eax,ebx ;//moving for add
 000028F4  8B D3	     2		mov edx,ebx ;//storing for remove
 000028F6  BB 00000407 R     3	mov ebx, offset i1
 000028FB		     3	notEmpty??004C:
 000028FB  83 3B 00	     3	cmp [ebx].item.itemCode,0
 000028FE  74 0B	     3	je isEmpty??004C 
 00002900  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002904  74 1D	     3	je inventoryFull??004C
 00002906  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002909  EB F0	     3	jmp notEmpty??004C
 0000290B		     3	isEmpty??004C:
 0000290B  8B 08	     3	mov ecx, [eax].item.itemCode
 0000290D  89 0B	     3	mov [ebx].item.itemCode,ecx
 0000290F  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002912  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002915  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002918  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 0000291B  8B 48 14	     3	mov ecx, [eax].item.combatValue
 0000291E  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002921  EB 19	     3	jmp end??004C
 00002923		     3	inventoryFull??004C:
 00002923  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 00002928  E8 00000000 E   *	    call   WriteString
 0000292D  B8 000005DC	     3	mov eax, 1500
 00002932  E8 00000000 E     3	call Delay
 00002937  E8 00000000 E     3	call clrscr
 0000293C		     3	end??004C:
 0000293C  8B DA	     2		mov ebx,edx ;//moving for remove
 0000293E  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00002944  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 0000294B  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002952  E9 00000088	     2		jmp endCase??004A
 00002957		     2		notEnoughGold??004A:
 00002957  E8 00000000 E     2		call clrscr
 0000295C  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 00002961  E8 00000000 E   *	    call   WriteString
 00002966  B8 000007D0	     2		mov eax,2000
 0000296B  E8 00000000 E     2		call Delay
 00002970  EB 6D	     2		jmp endCase??004A
 00002972		     2	infoItem??004A:
 00002972  E8 00000000 E     2		call clrscr
 00002977  BA 0000073B R     3	mov edx, offset blank
 0000297C  E8 00000000 E     3	call WriteString
 00002981  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002986  E8 00000000 E     3	call WriteString
 0000298B  8B 43 04	     3	mov eax, [ebx].item.buyValue
 0000298E  E8 00000000 E     3	call WriteDec
 00002993  BA 0000073B R     3	mov edx, offset blank
 00002998  E8 00000000 E     3	call WriteString
 0000299D  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 000029A2  E8 00000000 E     3	call WriteString
 000029A7  8B 43 08	     3	mov eax, [ebx].item.SellValue
 000029AA  E8 00000000 E     3	call WriteDec
 000029AF  BA 0000073B R     3	mov edx, offset blank
 000029B4  E8 00000000 E     3	call WriteString
 000029B9  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 000029BE  E8 00000000 E     3	call WriteString
 000029C3  8B 43 14	     3	mov eax, [ebx].item.combatValue
 000029C6  E8 00000000 E     3	call WriteDec
 000029CB  BA 0000073B R     3	mov edx, offset blank
 000029D0  E8 00000000 E     3	call WriteString
 000029D5  B8 000007D0	     2		mov eax,2000
 000029DA  E8 00000000 E     2		call Delay
 000029DF		     2	endCase??004A:
 000029DF  E9 FFFFF744	     1		jmp stillShopping??0036
 000029E4		     1	item6??0036:
 000029E4  BB 00000535 R     1		mov ebx,offset s7 ;//storing item for use
 000029E9  BA 0000072E R     2	mov edx, offset exitTitle
 000029EE  BA 00000635 R     2	mov edx, offset buyTitle
 000029F3  E8 00000000 E     2	call WriteString
 000029F8  BA 00000476 R     2	mov edx, offset infoTitle
 000029FD  E8 00000000 E     2	call WriteString
 00002A02  E8 00000000 E     3		call ReadDec
 00002A07  8B C8	     3		mov ecx, eax
 00002A09  81 F9 0000038D    2	cmp ecx,909
 00002A0F  74 13	     2	je exit??004D
 00002A11  83 F9 02	     2	cmp ecx,2
 00002A14  74 13	     2	je buyItem??004D
 00002A16  83 F9 03	     2	cmp ecx,3
 00002A19  0F 84 0000009D    2	je infoItem??004D
 00002A1F  E9 00000105	     2	jmp endCase??004D
 00002A24		     2	exit??004D:
 00002A24  E9 00000100	     2		jmp endCase??004D
 00002A29		     2	buyItem??004D:
 00002A29  8B 15 0000006D R  2		mov edx, c1.gold 
 00002A2F  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002A32  3B D0	     2		cmp edx,eax
 00002A34  72 6B	     2		jb notEnoughGold??004D
 00002A36  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 00002A3C  8B C3	     2		mov eax,ebx ;//moving for add
 00002A3E  8B D3	     2		mov edx,ebx ;//storing for remove
 00002A40  BB 00000407 R     3	mov ebx, offset i1
 00002A45		     3	notEmpty??004F:
 00002A45  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002A48  74 0B	     3	je isEmpty??004F 
 00002A4A  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002A4E  74 1D	     3	je inventoryFull??004F
 00002A50  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002A53  EB F0	     3	jmp notEmpty??004F
 00002A55		     3	isEmpty??004F:
 00002A55  8B 08	     3	mov ecx, [eax].item.itemCode
 00002A57  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002A59  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002A5C  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002A5F  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002A62  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002A65  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002A68  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002A6B  EB 19	     3	jmp end??004F
 00002A6D		     3	inventoryFull??004F:
 00002A6D  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 00002A72  E8 00000000 E   *	    call   WriteString
 00002A77  B8 000005DC	     3	mov eax, 1500
 00002A7C  E8 00000000 E     3	call Delay
 00002A81  E8 00000000 E     3	call clrscr
 00002A86		     3	end??004F:
 00002A86  8B DA	     2		mov ebx,edx ;//moving for remove
 00002A88  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00002A8E  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002A95  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002A9C  E9 00000088	     2		jmp endCase??004D
 00002AA1		     2		notEnoughGold??004D:
 00002AA1  E8 00000000 E     2		call clrscr
 00002AA6  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 00002AAB  E8 00000000 E   *	    call   WriteString
 00002AB0  B8 000007D0	     2		mov eax,2000
 00002AB5  E8 00000000 E     2		call Delay
 00002ABA  EB 6D	     2		jmp endCase??004D
 00002ABC		     2	infoItem??004D:
 00002ABC  E8 00000000 E     2		call clrscr
 00002AC1  BA 0000073B R     3	mov edx, offset blank
 00002AC6  E8 00000000 E     3	call WriteString
 00002ACB  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002AD0  E8 00000000 E     3	call WriteString
 00002AD5  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002AD8  E8 00000000 E     3	call WriteDec
 00002ADD  BA 0000073B R     3	mov edx, offset blank
 00002AE2  E8 00000000 E     3	call WriteString
 00002AE7  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002AEC  E8 00000000 E     3	call WriteString
 00002AF1  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002AF4  E8 00000000 E     3	call WriteDec
 00002AF9  BA 0000073B R     3	mov edx, offset blank
 00002AFE  E8 00000000 E     3	call WriteString
 00002B03  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002B08  E8 00000000 E     3	call WriteString
 00002B0D  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002B10  E8 00000000 E     3	call WriteDec
 00002B15  BA 0000073B R     3	mov edx, offset blank
 00002B1A  E8 00000000 E     3	call WriteString
 00002B1F  B8 000007D0	     2		mov eax,2000
 00002B24  E8 00000000 E     2		call Delay
 00002B29		     2	endCase??004D:
 00002B29  E9 FFFFF5FA	     1		jmp stillShopping??0036
 00002B2E		     1	item7??0036:
 00002B2E  BB 00000519 R     1		mov ebx,offset s8 ;//storing item for use
 00002B33  BA 0000072E R     2	mov edx, offset exitTitle
 00002B38  BA 00000635 R     2	mov edx, offset buyTitle
 00002B3D  E8 00000000 E     2	call WriteString
 00002B42  BA 00000476 R     2	mov edx, offset infoTitle
 00002B47  E8 00000000 E     2	call WriteString
 00002B4C  E8 00000000 E     3		call ReadDec
 00002B51  8B C8	     3		mov ecx, eax
 00002B53  81 F9 0000038D    2	cmp ecx,909
 00002B59  74 13	     2	je exit??0050
 00002B5B  83 F9 02	     2	cmp ecx,2
 00002B5E  74 13	     2	je buyItem??0050
 00002B60  83 F9 03	     2	cmp ecx,3
 00002B63  0F 84 0000009D    2	je infoItem??0050
 00002B69  E9 00000105	     2	jmp endCase??0050
 00002B6E		     2	exit??0050:
 00002B6E  E9 00000100	     2		jmp endCase??0050
 00002B73		     2	buyItem??0050:
 00002B73  8B 15 0000006D R  2		mov edx, c1.gold 
 00002B79  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002B7C  3B D0	     2		cmp edx,eax
 00002B7E  72 6B	     2		jb notEnoughGold??0050
 00002B80  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 00002B86  8B C3	     2		mov eax,ebx ;//moving for add
 00002B88  8B D3	     2		mov edx,ebx ;//storing for remove
 00002B8A  BB 00000407 R     3	mov ebx, offset i1
 00002B8F		     3	notEmpty??0052:
 00002B8F  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002B92  74 0B	     3	je isEmpty??0052 
 00002B94  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002B98  74 1D	     3	je inventoryFull??0052
 00002B9A  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002B9D  EB F0	     3	jmp notEmpty??0052
 00002B9F		     3	isEmpty??0052:
 00002B9F  8B 08	     3	mov ecx, [eax].item.itemCode
 00002BA1  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002BA3  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002BA6  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002BA9  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002BAC  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002BAF  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002BB2  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002BB5  EB 19	     3	jmp end??0052
 00002BB7		     3	inventoryFull??0052:
 00002BB7  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 00002BBC  E8 00000000 E   *	    call   WriteString
 00002BC1  B8 000005DC	     3	mov eax, 1500
 00002BC6  E8 00000000 E     3	call Delay
 00002BCB  E8 00000000 E     3	call clrscr
 00002BD0		     3	end??0052:
 00002BD0  8B DA	     2		mov ebx,edx ;//moving for remove
 00002BD2  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00002BD8  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002BDF  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002BE6  E9 00000088	     2		jmp endCase??0050
 00002BEB		     2		notEnoughGold??0050:
 00002BEB  E8 00000000 E     2		call clrscr
 00002BF0  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 00002BF5  E8 00000000 E   *	    call   WriteString
 00002BFA  B8 000007D0	     2		mov eax,2000
 00002BFF  E8 00000000 E     2		call Delay
 00002C04  EB 6D	     2		jmp endCase??0050
 00002C06		     2	infoItem??0050:
 00002C06  E8 00000000 E     2		call clrscr
 00002C0B  BA 0000073B R     3	mov edx, offset blank
 00002C10  E8 00000000 E     3	call WriteString
 00002C15  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002C1A  E8 00000000 E     3	call WriteString
 00002C1F  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002C22  E8 00000000 E     3	call WriteDec
 00002C27  BA 0000073B R     3	mov edx, offset blank
 00002C2C  E8 00000000 E     3	call WriteString
 00002C31  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002C36  E8 00000000 E     3	call WriteString
 00002C3B  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002C3E  E8 00000000 E     3	call WriteDec
 00002C43  BA 0000073B R     3	mov edx, offset blank
 00002C48  E8 00000000 E     3	call WriteString
 00002C4D  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002C52  E8 00000000 E     3	call WriteString
 00002C57  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002C5A  E8 00000000 E     3	call WriteDec
 00002C5F  BA 0000073B R     3	mov edx, offset blank
 00002C64  E8 00000000 E     3	call WriteString
 00002C69  B8 000007D0	     2		mov eax,2000
 00002C6E  E8 00000000 E     2		call Delay
 00002C73		     2	endCase??0050:
 00002C73  E9 FFFFF4B0	     1		jmp stillShopping??0036
 00002C78		     1	item8??0036:
 00002C78  BB 000004FD R     1		mov ebx,offset s9 ;//storing item for use
 00002C7D  BA 0000072E R     2	mov edx, offset exitTitle
 00002C82  BA 00000635 R     2	mov edx, offset buyTitle
 00002C87  E8 00000000 E     2	call WriteString
 00002C8C  BA 00000476 R     2	mov edx, offset infoTitle
 00002C91  E8 00000000 E     2	call WriteString
 00002C96  E8 00000000 E     3		call ReadDec
 00002C9B  8B C8	     3		mov ecx, eax
 00002C9D  81 F9 0000038D    2	cmp ecx,909
 00002CA3  74 13	     2	je exit??0053
 00002CA5  83 F9 02	     2	cmp ecx,2
 00002CA8  74 13	     2	je buyItem??0053
 00002CAA  83 F9 03	     2	cmp ecx,3
 00002CAD  0F 84 0000009D    2	je infoItem??0053
 00002CB3  E9 00000105	     2	jmp endCase??0053
 00002CB8		     2	exit??0053:
 00002CB8  E9 00000100	     2		jmp endCase??0053
 00002CBD		     2	buyItem??0053:
 00002CBD  8B 15 0000006D R  2		mov edx, c1.gold 
 00002CC3  8B 43 04	     2		mov eax, [ebx].item.buyValue
 00002CC6  3B D0	     2		cmp edx,eax
 00002CC8  72 6B	     2		jb notEnoughGold??0053
 00002CCA  29 05 0000006D R  2		sub c1.gold,eax ;//decrease yout gold
 00002CD0  8B C3	     2		mov eax,ebx ;//moving for add
 00002CD2  8B D3	     2		mov edx,ebx ;//storing for remove
 00002CD4  BB 00000407 R     3	mov ebx, offset i1
 00002CD9		     3	notEmpty??0055:
 00002CD9  83 3B 00	     3	cmp [ebx].item.itemCode,0
 00002CDC  74 0B	     3	je isEmpty??0055 
 00002CDE  83 7B 10 00	     3	cmp [ebx].item.next,null
 00002CE2  74 1D	     3	je inventoryFull??0055
 00002CE4  8B 5B 10	     3	mov ebx,[ebx].item.next
 00002CE7  EB F0	     3	jmp notEmpty??0055
 00002CE9		     3	isEmpty??0055:
 00002CE9  8B 08	     3	mov ecx, [eax].item.itemCode
 00002CEB  89 0B	     3	mov [ebx].item.itemCode,ecx
 00002CED  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00002CF0  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00002CF3  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00002CF6  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00002CF9  8B 48 14	     3	mov ecx, [eax].item.combatValue
 00002CFC  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 00002CFF  EB 19	     3	jmp end??0055
 00002D01		     3	inventoryFull??0055:
 00002D01  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 00002D06  E8 00000000 E   *	    call   WriteString
 00002D0B  B8 000005DC	     3	mov eax, 1500
 00002D10  E8 00000000 E     3	call Delay
 00002D15  E8 00000000 E     3	call clrscr
 00002D1A		     3	end??0055:
 00002D1A  8B DA	     2		mov ebx,edx ;//moving for remove
 00002D1C  C7 03 00000000    3	mov [ebx].item.itemCode,null
 00002D22  C7 43 08	     3	mov [ebx].item.sellValue,0
	   00000000
 00002D29  C7 43 04	     3	mov [ebx].item.buyValue,0
	   00000000
 00002D30  E9 00000088	     2		jmp endCase??0053
 00002D35		     2		notEnoughGold??0053:
 00002D35  E8 00000000 E     2		call clrscr
 00002D3A  BA 00000692 R     2		mov edx, offset notEnoughGoldTitle
 00002D3F  E8 00000000 E   *	    call   WriteString
 00002D44  B8 000007D0	     2		mov eax,2000
 00002D49  E8 00000000 E     2		call Delay
 00002D4E  EB 6D	     2		jmp endCase??0053
 00002D50		     2	infoItem??0053:
 00002D50  E8 00000000 E     2		call clrscr
 00002D55  BA 0000073B R     3	mov edx, offset blank
 00002D5A  E8 00000000 E     3	call WriteString
 00002D5F  BA 000004A2 R     3	mov edx, offset itemBuyValueTitle ;displays buy value
 00002D64  E8 00000000 E     3	call WriteString
 00002D69  8B 43 04	     3	mov eax, [ebx].item.buyValue
 00002D6C  E8 00000000 E     3	call WriteDec
 00002D71  BA 0000073B R     3	mov edx, offset blank
 00002D76  E8 00000000 E     3	call WriteString
 00002D7B  BA 00000493 R     3	mov edx, offset itemSellValueTitle ;displays sell value 
 00002D80  E8 00000000 E     3	call WriteString
 00002D85  8B 43 08	     3	mov eax, [ebx].item.SellValue
 00002D88  E8 00000000 E     3	call WriteDec
 00002D8D  BA 0000073B R     3	mov edx, offset blank
 00002D92  E8 00000000 E     3	call WriteString
 00002D97  BA 000004B0 R     3	mov edx, offset itemCombatValueTitle ;displays combat value
 00002D9C  E8 00000000 E     3	call WriteString
 00002DA1  8B 43 14	     3	mov eax, [ebx].item.combatValue
 00002DA4  E8 00000000 E     3	call WriteDec
 00002DA9  BA 0000073B R     3	mov edx, offset blank
 00002DAE  E8 00000000 E     3	call WriteString
 00002DB3  B8 000007D0	     2		mov eax,2000
 00002DB8  E8 00000000 E     2		call Delay
 00002DBD		     2	endCase??0053:
 00002DBD  E9 FFFFF366	     1		jmp stillShopping??0036
 00002DC2		     1	item9??0036:
 00002DC2  BB 000004E1 R     1		mov ebx,offset s10 ;//storing item for use
 00002DC7		     1	sellMode??0036:
 00002DC7  E8 00000000 E     1		call clrscr
 00002DCC		     2	 stillShopping??0056:
 00002DCC  BB 00000407 R     2	mov ebx, offset i1
 00002DD1  60		     3	pushAD
 00002DD2  33 C9	     3	xor ecx,ecx
 00002DD4		     3	DO1??0057:
 00002DD4  8B C1	     3	mov eax,ecx
 00002DD6  E8 00000000 E     3	call WriteDec
 00002DDB  B8 0000003A	     3	mov eax, ':'
 00002DE0  E8 00000000 E     3	call WriteChar
 00002DE5  8B 03	     3	mov eax, [ebx].item.itemCode
 00002DE7  83 F8 01	     4	cmp eax,1
 00002DEA  74 11	     4	je item0??0058
 00002DEC  83 F8 02	     4	cmp eax,2
 00002DEF  74 13	     4	je item1??0058
 00002DF1  83 F8 03	     4	cmp eax,3
 00002DF4  74 15	     4	je item2??0058
 00002DF6  83 F8 04	     4	cmp eax,4
 00002DF9  74 17	     4	je item3??0058
 00002DFB  EB 1C	     4	jmp default??0058
 00002DFD		     4	item0??0058:
 00002DFD  BA 00000000 R     4		mov edx, offset itemName1
 00002E02  EB 1A	     4		jmp print??0058
 00002E04		     4	item1??0058:
 00002E04  BA 00000009 R     4		mov edx, offset itemName2
 00002E09  EB 13	     4		jmp print??0058
 00002E0B		     4	item2??0058:
 00002E0B  BA 00000013 R     4		mov edx, offset itemName3
 00002E10  EB 0C	     4		jmp print??0058
 00002E12		     4	item3??0058:
 00002E12  BA 0000001B R     4		mov edx, offset itemName4
 00002E17  EB 05	     4		jmp print??0058
 00002E19		     4	default??0058:
 00002E19  BA 00000038 R     4		mov edx, offset defaultName
 00002E1E		     4	print??0058:
 00002E1E  E8 00000000 E   *	    call   WriteString
 00002E23  BA 0000073B R     3	mov edx,offset blank
 00002E28  E8 00000000 E     3	call WriteString
 00002E2D  8B 5B 10	     3	mov eBx,[ebx].item.next
 00002E30  41		     3	inc ecx
 00002E31  83 FB 00	     3	cmp ebx,null
 00002E34  75 9E	     3	jne DO1??0057
 00002E36  61		     3	popAD
 00002E37  BA 0000061D R     2	mov edx, offset buyModeTitle
 00002E3C  E8 00000000 E   *	    call   WriteString
 00002E41  E8 00000000 E     3		call ReadDec
 00002E46  8B C8	     3		mov ecx, eax
 00002E48  83 F9 00	     2	cmp ecx,0
 00002E4B  74 5A	     2		je item0??0056
 00002E4D  83 F9 01	     2	cmp ecx,1
 00002E50  0F 84 0000009B    2		je item1??0056
 00002E56  83 F9 02	     2	cmp ecx,2
 00002E59  0F 84 000000DC    2		je item2??0056
 00002E5F  83 F9 03	     2	cmp ecx,3
 00002E62  0F 84 0000011D    2		je item3??0056
 00002E68  83 F9 04	     2	cmp ecx,4
 00002E6B  0F 84 0000015E    2		je item4??0056
 00002E71  83 F9 05	     2	cmp ecx,5
 00002E74  0F 84 0000019F    2		je item5??0056
 00002E7A  83 F9 06	     2	cmp ecx,6
 00002E7D  0F 84 000001E0    2		je item6??0056
 00002E83  83 F9 07	     2	cmp ecx,7
 00002E86  0F 84 00000221    2		je item7??0056
 00002E8C  83 F9 08	     2	cmp ecx,8
 00002E8F  0F 84 00000262    2		je item8??0056
 00002E95  83 F9 09	     2	cmp ecx,9
 00002E98  0F 84 000002A3    2		je item9??0056
 00002E9E  83 F9 0A	     2	cmp ecx,10
 00002EA1  0F 84 000002E4    2		je switchToBuyMode??0056
 00002EA7		     2	item0??0056:
 00002EA7  BB 00000407 R     2		mov ebx,offset i1 ;//storing item for use
 00002EAC  E8 00000000 E     3	call clrscr
 00002EB1  BA 0000063E R     3	mov edx, offset sellTitle
 00002EB6  E8 00000000 E   *	    call   WriteString
 00002EBB  E8 00000000 E     4		call ReadDec
 00002EC0  8B C8	     4		mov ecx, eax
 00002EC2  83 F9 01	     3	cmp ecx, 1
 00002EC5  74 00	     3	je doSell??005A
 00002EC7		     3	doSell??005A:
 00002EC7  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002ECA  8B 15 0000006D R  3	mov edx,c1.gold
 00002ED0  03 D0	     3	add edx,eax
 00002ED2  89 15 0000006D R  3	mov c1.gold,edx
 00002ED8  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002EDE  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002EE5  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002EEC  E9 FFFFFEDB	     2		jmp stillShopping??0056
 00002EF1		     2	item1??0056:
 00002EF1  BB 000003EB R     2		mov ebx,offset i2 ;//storing item for use
 00002EF6  E8 00000000 E     3	call clrscr
 00002EFB  BA 0000063E R     3	mov edx, offset sellTitle
 00002F00  E8 00000000 E   *	    call   WriteString
 00002F05  E8 00000000 E     4		call ReadDec
 00002F0A  8B C8	     4		mov ecx, eax
 00002F0C  83 F9 01	     3	cmp ecx, 1
 00002F0F  74 00	     3	je doSell??005C
 00002F11		     3	doSell??005C:
 00002F11  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002F14  8B 15 0000006D R  3	mov edx,c1.gold
 00002F1A  03 D0	     3	add edx,eax
 00002F1C  89 15 0000006D R  3	mov c1.gold,edx
 00002F22  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002F28  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002F2F  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002F36  E9 FFFFFE91	     2		jmp stillShopping??0056
 00002F3B		     2	item2??0056:
 00002F3B  BB 000003CF R     2		mov ebx,offset i3 ;//storing item for use
 00002F40  E8 00000000 E     3	call clrscr
 00002F45  BA 0000063E R     3	mov edx, offset sellTitle
 00002F4A  E8 00000000 E   *	    call   WriteString
 00002F4F  E8 00000000 E     4		call ReadDec
 00002F54  8B C8	     4		mov ecx, eax
 00002F56  83 F9 01	     3	cmp ecx, 1
 00002F59  74 00	     3	je doSell??005E
 00002F5B		     3	doSell??005E:
 00002F5B  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002F5E  8B 15 0000006D R  3	mov edx,c1.gold
 00002F64  03 D0	     3	add edx,eax
 00002F66  89 15 0000006D R  3	mov c1.gold,edx
 00002F6C  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002F72  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002F79  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002F80  E9 FFFFFE47	     2		jmp stillShopping??0056
 00002F85		     2	item3??0056:
 00002F85  BB 000003B3 R     2		mov ebx,offset i4 ;//storing item for use
 00002F8A  E8 00000000 E     3	call clrscr
 00002F8F  BA 0000063E R     3	mov edx, offset sellTitle
 00002F94  E8 00000000 E   *	    call   WriteString
 00002F99  E8 00000000 E     4		call ReadDec
 00002F9E  8B C8	     4		mov ecx, eax
 00002FA0  83 F9 01	     3	cmp ecx, 1
 00002FA3  74 00	     3	je doSell??0060
 00002FA5		     3	doSell??0060:
 00002FA5  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002FA8  8B 15 0000006D R  3	mov edx,c1.gold
 00002FAE  03 D0	     3	add edx,eax
 00002FB0  89 15 0000006D R  3	mov c1.gold,edx
 00002FB6  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00002FBC  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00002FC3  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00002FCA  E9 FFFFFDFD	     2		jmp stillShopping??0056
 00002FCF		     2	item4??0056:
 00002FCF  BB 00000397 R     2		mov ebx,offset i5 ;//storing item for use
 00002FD4  E8 00000000 E     3	call clrscr
 00002FD9  BA 0000063E R     3	mov edx, offset sellTitle
 00002FDE  E8 00000000 E   *	    call   WriteString
 00002FE3  E8 00000000 E     4		call ReadDec
 00002FE8  8B C8	     4		mov ecx, eax
 00002FEA  83 F9 01	     3	cmp ecx, 1
 00002FED  74 00	     3	je doSell??0062
 00002FEF		     3	doSell??0062:
 00002FEF  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00002FF2  8B 15 0000006D R  3	mov edx,c1.gold
 00002FF8  03 D0	     3	add edx,eax
 00002FFA  89 15 0000006D R  3	mov c1.gold,edx
 00003000  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00003006  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 0000300D  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00003014  E9 FFFFFDB3	     2		jmp stillShopping??0056
 00003019		     2	item5??0056:
 00003019  BB 0000037B R     2		mov ebx,offset i6 ;//storing item for use
 0000301E  E8 00000000 E     3	call clrscr
 00003023  BA 0000063E R     3	mov edx, offset sellTitle
 00003028  E8 00000000 E   *	    call   WriteString
 0000302D  E8 00000000 E     4		call ReadDec
 00003032  8B C8	     4		mov ecx, eax
 00003034  83 F9 01	     3	cmp ecx, 1
 00003037  74 00	     3	je doSell??0064
 00003039		     3	doSell??0064:
 00003039  8B 43 08	     3	mov eax,[ebx].item.sellValue
 0000303C  8B 15 0000006D R  3	mov edx,c1.gold
 00003042  03 D0	     3	add edx,eax
 00003044  89 15 0000006D R  3	mov c1.gold,edx
 0000304A  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00003050  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003057  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 0000305E  E9 FFFFFD69	     2		jmp stillShopping??0056
 00003063		     2	item6??0056:
 00003063  BB 0000035F R     2		mov ebx,offset i7 ;//storing item for use
 00003068  E8 00000000 E     3	call clrscr
 0000306D  BA 0000063E R     3	mov edx, offset sellTitle
 00003072  E8 00000000 E   *	    call   WriteString
 00003077  E8 00000000 E     4		call ReadDec
 0000307C  8B C8	     4		mov ecx, eax
 0000307E  83 F9 01	     3	cmp ecx, 1
 00003081  74 00	     3	je doSell??0066
 00003083		     3	doSell??0066:
 00003083  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00003086  8B 15 0000006D R  3	mov edx,c1.gold
 0000308C  03 D0	     3	add edx,eax
 0000308E  89 15 0000006D R  3	mov c1.gold,edx
 00003094  C7 03 00000000    4	mov [ebx].item.itemCode,null
 0000309A  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 000030A1  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000030A8  E9 FFFFFD1F	     2		jmp stillShopping??0056
 000030AD		     2	item7??0056:
 000030AD  BB 00000343 R     2		mov ebx,offset i8 ;//storing item for use
 000030B2  E8 00000000 E     3	call clrscr
 000030B7  BA 0000063E R     3	mov edx, offset sellTitle
 000030BC  E8 00000000 E   *	    call   WriteString
 000030C1  E8 00000000 E     4		call ReadDec
 000030C6  8B C8	     4		mov ecx, eax
 000030C8  83 F9 01	     3	cmp ecx, 1
 000030CB  74 00	     3	je doSell??0068
 000030CD		     3	doSell??0068:
 000030CD  8B 43 08	     3	mov eax,[ebx].item.sellValue
 000030D0  8B 15 0000006D R  3	mov edx,c1.gold
 000030D6  03 D0	     3	add edx,eax
 000030D8  89 15 0000006D R  3	mov c1.gold,edx
 000030DE  C7 03 00000000    4	mov [ebx].item.itemCode,null
 000030E4  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 000030EB  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000030F2  E9 FFFFFCD5	     2		jmp stillShopping??0056
 000030F7		     2	item8??0056:
 000030F7  BB 00000327 R     2		mov ebx,offset i9 ;//storing item for use
 000030FC  E8 00000000 E     3	call clrscr
 00003101  BA 0000063E R     3	mov edx, offset sellTitle
 00003106  E8 00000000 E   *	    call   WriteString
 0000310B  E8 00000000 E     4		call ReadDec
 00003110  8B C8	     4		mov ecx, eax
 00003112  83 F9 01	     3	cmp ecx, 1
 00003115  74 00	     3	je doSell??006A
 00003117		     3	doSell??006A:
 00003117  8B 43 08	     3	mov eax,[ebx].item.sellValue
 0000311A  8B 15 0000006D R  3	mov edx,c1.gold
 00003120  03 D0	     3	add edx,eax
 00003122  89 15 0000006D R  3	mov c1.gold,edx
 00003128  C7 03 00000000    4	mov [ebx].item.itemCode,null
 0000312E  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003135  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 0000313C  E9 FFFFFC8B	     2		jmp stillShopping??0056
 00003141		     2	item9??0056:
 00003141  BB 0000030B R     2		mov ebx,offset i10 ;//storing item for use
 00003146  E8 00000000 E     3	call clrscr
 0000314B  BA 0000063E R     3	mov edx, offset sellTitle
 00003150  E8 00000000 E   *	    call   WriteString
 00003155  E8 00000000 E     4		call ReadDec
 0000315A  8B C8	     4		mov ecx, eax
 0000315C  83 F9 01	     3	cmp ecx, 1
 0000315F  74 00	     3	je doSell??006C
 00003161		     3	doSell??006C:
 00003161  8B 43 08	     3	mov eax,[ebx].item.sellValue
 00003164  8B 15 0000006D R  3	mov edx,c1.gold
 0000316A  03 D0	     3	add edx,eax
 0000316C  89 15 0000006D R  3	mov c1.gold,edx
 00003172  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00003178  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 0000317F  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00003186  E9 FFFFFC41	     2		jmp stillShopping??0056
 0000318B		     2	switchToBuyMode??0056:
 0000318B  E8 00000000 E     2	call clrscr
 00003190  E9 FFFFEF93	     1	jmp stillShopping??0036
 00003195		     1	exitShop??0036:
 00003195  E8 00000000 E     1	Call clrscr
 0000319A  E9 00001440				jmp end_switch
 0000319F				travel:
						mTravel
 0000319F  B8 0000000A	     1	mov eax,10
 000031A4  E8 00000000 E     1	call RandomRange 
 000031A9  83 F8 03	     1	cmp eax,3 ;// 30% chance for shop
 000031AC  7C 05	     1	jl shop??006E
 000031AE  E9 000010A1	     1	jmp combat??006E
 000031B3		     1	shop??006E:
 000031B3  BA 00000648 R     2	mov edx, offset shopPrompt1
 000031B8  E8 00000000 E   *	    call   WriteString
 000031BD  BA 00000665 R     2	mov edx, offset shopPrompt2
 000031C2  E8 00000000 E   *	    call   WriteString
 000031C7  E8 00000000 E     2	call crlf
 000031CC  BA 00000714 R     2	mov edx, offset continueCommand
 000031D1  E8 00000000 E   *	    call   WriteString
 000031D6  E8 00000000 E     3		call ReadDec
 000031DB  8B C8	     3		mov ecx, eax
 000031DD  E8 00000000 E     2	call clrscr
 000031E2		     2	stillShopping??006F:
 000031E2  BA 000005F9 R     2	mov edx, offset shopMenuTitle
 000031E7  E8 00000000 E   *	    call   WriteString
 000031EC  BA 0000072E R     2	mov edx, offset exitTitle
 000031F1  E8 00000000 E   *	    call   WriteString
 000031F6  BB 000005DD R     2	mov ebx, offset s1;//moving first item to read linked list
 000031FB  60		     3	pushAD
 000031FC  33 C9	     3	xor ecx,ecx
 000031FE		     3	DO1??0071:
 000031FE  8B C1	     3	mov eax,ecx
 00003200  E8 00000000 E     3	call WriteDec
 00003205  B8 0000003A	     3	mov eax, ':'
 0000320A  E8 00000000 E     3	call WriteChar
 0000320F  8B 03	     3	mov eax, [ebx].item.itemCode
 00003211  83 F8 01	     4	cmp eax,1
 00003214  74 11	     4	je item0??0072
 00003216  83 F8 02	     4	cmp eax,2
 00003219  74 13	     4	je item1??0072
 0000321B  83 F8 03	     4	cmp eax,3
 0000321E  74 15	     4	je item2??0072
 00003220  83 F8 04	     4	cmp eax,4
 00003223  74 17	     4	je item3??0072
 00003225  EB 1C	     4	jmp default??0072
 00003227		     4	item0??0072:
 00003227  BA 00000000 R     4		mov edx, offset itemName1
 0000322C  EB 1A	     4		jmp print??0072
 0000322E		     4	item1??0072:
 0000322E  BA 00000009 R     4		mov edx, offset itemName2
 00003233  EB 13	     4		jmp print??0072
 00003235		     4	item2??0072:
 00003235  BA 00000013 R     4		mov edx, offset itemName3
 0000323A  EB 0C	     4		jmp print??0072
 0000323C		     4	item3??0072:
 0000323C  BA 0000001B R     4		mov edx, offset itemName4
 00003241  EB 05	     4		jmp print??0072
 00003243		     4	default??0072:
 00003243  BA 00000038 R     4		mov edx, offset defaultName
 00003248		     4	print??0072:
 00003248  E8 00000000 E   *	    call   WriteString
 0000324D  BA 0000073B R     3	mov edx,offset blank
 00003252  E8 00000000 E     3	call WriteString
 00003257  8B 5B 10	     3	mov eBx,[ebx].item.next
 0000325A  41		     3	inc ecx
 0000325B  83 FB 00	     3	cmp ebx,null
 0000325E  75 9E	     3	jne DO1??0071
 00003260  61		     3	popAD
 00003261  BA 00000604 R     2	mov edx,offset sellModeTitle
 00003266  E8 00000000 E   *	    call   WriteString
 0000326B  E8 00000000 E     3		call ReadDec
 00003270  8B C8	     3		mov ecx, eax
 00003272  81 F9 0000038D    2	cmp ecx,909
 00003278  0F 84 00000FD1    2		je exitShop??006F
 0000327E  83 F9 00	     2	cmp ecx,0
 00003281  74 5F	     2		je item0??006F
 00003283  83 F9 01	     2	cmp ecx,1
 00003286  0F 84 000001A0    2		je item1??006F
 0000328C  83 F9 02	     2	cmp ecx,2
 0000328F  0F 84 000002E1    2		je item2??006F
 00003295  83 F9 03	     2	cmp ecx,3
 00003298  0F 84 00000422    2		je item3??006F
 0000329E  83 F9 04	     2	cmp ecx,4
 000032A1  0F 84 00000563    2		je item4??006F
 000032A7  83 F9 05	     2	cmp ecx,5
 000032AA  0F 84 000006A4    2		je item5??006F
 000032B0  83 F9 06	     2	cmp ecx,6
 000032B3  0F 84 000007E5    2		je item6??006F
 000032B9  83 F9 07	     2	cmp ecx,7
 000032BC  0F 84 00000926    2		je item7??006F
 000032C2  83 F9 08	     2	cmp ecx,8
 000032C5  0F 84 00000A67    2		je item8??006F
 000032CB  83 F9 09	     2	cmp ecx,9
 000032CE  0F 84 00000BA8    2		je item9??006F
 000032D4  83 F9 0A	     2	cmp ecx,10
 000032D7  0F 84 00000BA4    2		je sellMode??006F
 000032DD  E9 00000F6D	     2	jmp exitShop??006F
 000032E2		     2	item0??006F:
 000032E2  BB 000005DD R     2		mov ebx,offset s1 ;//storing item for use
 000032E7  BA 0000072E R     3	mov edx, offset exitTitle
 000032EC  BA 00000635 R     3	mov edx, offset buyTitle
 000032F1  E8 00000000 E     3	call WriteString
 000032F6  BA 00000476 R     3	mov edx, offset infoTitle
 000032FB  E8 00000000 E     3	call WriteString
 00003300  E8 00000000 E     4		call ReadDec
 00003305  8B C8	     4		mov ecx, eax
 00003307  81 F9 0000038D    3	cmp ecx,909
 0000330D  74 13	     3	je exit??0074
 0000330F  83 F9 02	     3	cmp ecx,2
 00003312  74 13	     3	je buyItem??0074
 00003314  83 F9 03	     3	cmp ecx,3
 00003317  0F 84 0000009D    3	je infoItem??0074
 0000331D  E9 00000105	     3	jmp endCase??0074
 00003322		     3	exit??0074:
 00003322  E9 00000100	     3		jmp endCase??0074
 00003327		     3	buyItem??0074:
 00003327  8B 15 0000006D R  3		mov edx, c1.gold 
 0000332D  8B 43 04	     3		mov eax, [ebx].item.buyValue
 00003330  3B D0	     3		cmp edx,eax
 00003332  72 6B	     3		jb notEnoughGold??0074
 00003334  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 0000333A  8B C3	     3		mov eax,ebx ;//moving for add
 0000333C  8B D3	     3		mov edx,ebx ;//storing for remove
 0000333E  BB 00000407 R     4	mov ebx, offset i1
 00003343		     4	notEmpty??0076:
 00003343  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00003346  74 0B	     4	je isEmpty??0076 
 00003348  83 7B 10 00	     4	cmp [ebx].item.next,null
 0000334C  74 1D	     4	je inventoryFull??0076
 0000334E  8B 5B 10	     4	mov ebx,[ebx].item.next
 00003351  EB F0	     4	jmp notEmpty??0076
 00003353		     4	isEmpty??0076:
 00003353  8B 08	     4	mov ecx, [eax].item.itemCode
 00003355  89 0B	     4	mov [ebx].item.itemCode,ecx
 00003357  8B 48 04	     4	mov ecx, [eax].item.buyValue
 0000335A  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 0000335D  8B 48 08	     4	mov ecx, [eax].item.sellValue
 00003360  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 00003363  8B 48 14	     4	mov ecx, [eax].item.combatValue
 00003366  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 00003369  EB 19	     4	jmp end??0076
 0000336B		     4	inventoryFull??0076:
 0000336B  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00003370  E8 00000000 E   *	    call   WriteString
 00003375  B8 000005DC	     4	mov eax, 1500
 0000337A  E8 00000000 E     4	call Delay
 0000337F  E8 00000000 E     4	call clrscr
 00003384		     4	end??0076:
 00003384  8B DA	     3		mov ebx,edx ;//moving for remove
 00003386  C7 03 00000000    4	mov [ebx].item.itemCode,null
 0000338C  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003393  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 0000339A  E9 00000088	     3		jmp endCase??0074
 0000339F		     3		notEnoughGold??0074:
 0000339F  E8 00000000 E     3		call clrscr
 000033A4  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 000033A9  E8 00000000 E   *	    call   WriteString
 000033AE  B8 000007D0	     3		mov eax,2000
 000033B3  E8 00000000 E     3		call Delay
 000033B8  EB 6D	     3		jmp endCase??0074
 000033BA		     3	infoItem??0074:
 000033BA  E8 00000000 E     3		call clrscr
 000033BF  BA 0000073B R     4	mov edx, offset blank
 000033C4  E8 00000000 E     4	call WriteString
 000033C9  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 000033CE  E8 00000000 E     4	call WriteString
 000033D3  8B 43 04	     4	mov eax, [ebx].item.buyValue
 000033D6  E8 00000000 E     4	call WriteDec
 000033DB  BA 0000073B R     4	mov edx, offset blank
 000033E0  E8 00000000 E     4	call WriteString
 000033E5  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 000033EA  E8 00000000 E     4	call WriteString
 000033EF  8B 43 08	     4	mov eax, [ebx].item.SellValue
 000033F2  E8 00000000 E     4	call WriteDec
 000033F7  BA 0000073B R     4	mov edx, offset blank
 000033FC  E8 00000000 E     4	call WriteString
 00003401  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 00003406  E8 00000000 E     4	call WriteString
 0000340B  8B 43 14	     4	mov eax, [ebx].item.combatValue
 0000340E  E8 00000000 E     4	call WriteDec
 00003413  BA 0000073B R     4	mov edx, offset blank
 00003418  E8 00000000 E     4	call WriteString
 0000341D  B8 000007D0	     3		mov eax,2000
 00003422  E8 00000000 E     3		call Delay
 00003427		     3	endCase??0074:
 00003427  E9 FFFFFDB6	     2		jmp stillShopping??006F
 0000342C		     2	item1??006F:
 0000342C  BB 000005C1 R     2		mov ebx,offset s2 ;//storing item for use
 00003431  BA 0000072E R     3	mov edx, offset exitTitle
 00003436  BA 00000635 R     3	mov edx, offset buyTitle
 0000343B  E8 00000000 E     3	call WriteString
 00003440  BA 00000476 R     3	mov edx, offset infoTitle
 00003445  E8 00000000 E     3	call WriteString
 0000344A  E8 00000000 E     4		call ReadDec
 0000344F  8B C8	     4		mov ecx, eax
 00003451  81 F9 0000038D    3	cmp ecx,909
 00003457  74 13	     3	je exit??0077
 00003459  83 F9 02	     3	cmp ecx,2
 0000345C  74 13	     3	je buyItem??0077
 0000345E  83 F9 03	     3	cmp ecx,3
 00003461  0F 84 0000009D    3	je infoItem??0077
 00003467  E9 00000105	     3	jmp endCase??0077
 0000346C		     3	exit??0077:
 0000346C  E9 00000100	     3		jmp endCase??0077
 00003471		     3	buyItem??0077:
 00003471  8B 15 0000006D R  3		mov edx, c1.gold 
 00003477  8B 43 04	     3		mov eax, [ebx].item.buyValue
 0000347A  3B D0	     3		cmp edx,eax
 0000347C  72 6B	     3		jb notEnoughGold??0077
 0000347E  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 00003484  8B C3	     3		mov eax,ebx ;//moving for add
 00003486  8B D3	     3		mov edx,ebx ;//storing for remove
 00003488  BB 00000407 R     4	mov ebx, offset i1
 0000348D		     4	notEmpty??0079:
 0000348D  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00003490  74 0B	     4	je isEmpty??0079 
 00003492  83 7B 10 00	     4	cmp [ebx].item.next,null
 00003496  74 1D	     4	je inventoryFull??0079
 00003498  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000349B  EB F0	     4	jmp notEmpty??0079
 0000349D		     4	isEmpty??0079:
 0000349D  8B 08	     4	mov ecx, [eax].item.itemCode
 0000349F  89 0B	     4	mov [ebx].item.itemCode,ecx
 000034A1  8B 48 04	     4	mov ecx, [eax].item.buyValue
 000034A4  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 000034A7  8B 48 08	     4	mov ecx, [eax].item.sellValue
 000034AA  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 000034AD  8B 48 14	     4	mov ecx, [eax].item.combatValue
 000034B0  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 000034B3  EB 19	     4	jmp end??0079
 000034B5		     4	inventoryFull??0079:
 000034B5  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 000034BA  E8 00000000 E   *	    call   WriteString
 000034BF  B8 000005DC	     4	mov eax, 1500
 000034C4  E8 00000000 E     4	call Delay
 000034C9  E8 00000000 E     4	call clrscr
 000034CE		     4	end??0079:
 000034CE  8B DA	     3		mov ebx,edx ;//moving for remove
 000034D0  C7 03 00000000    4	mov [ebx].item.itemCode,null
 000034D6  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 000034DD  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000034E4  E9 00000088	     3		jmp endCase??0077
 000034E9		     3		notEnoughGold??0077:
 000034E9  E8 00000000 E     3		call clrscr
 000034EE  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 000034F3  E8 00000000 E   *	    call   WriteString
 000034F8  B8 000007D0	     3		mov eax,2000
 000034FD  E8 00000000 E     3		call Delay
 00003502  EB 6D	     3		jmp endCase??0077
 00003504		     3	infoItem??0077:
 00003504  E8 00000000 E     3		call clrscr
 00003509  BA 0000073B R     4	mov edx, offset blank
 0000350E  E8 00000000 E     4	call WriteString
 00003513  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 00003518  E8 00000000 E     4	call WriteString
 0000351D  8B 43 04	     4	mov eax, [ebx].item.buyValue
 00003520  E8 00000000 E     4	call WriteDec
 00003525  BA 0000073B R     4	mov edx, offset blank
 0000352A  E8 00000000 E     4	call WriteString
 0000352F  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 00003534  E8 00000000 E     4	call WriteString
 00003539  8B 43 08	     4	mov eax, [ebx].item.SellValue
 0000353C  E8 00000000 E     4	call WriteDec
 00003541  BA 0000073B R     4	mov edx, offset blank
 00003546  E8 00000000 E     4	call WriteString
 0000354B  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 00003550  E8 00000000 E     4	call WriteString
 00003555  8B 43 14	     4	mov eax, [ebx].item.combatValue
 00003558  E8 00000000 E     4	call WriteDec
 0000355D  BA 0000073B R     4	mov edx, offset blank
 00003562  E8 00000000 E     4	call WriteString
 00003567  B8 000007D0	     3		mov eax,2000
 0000356C  E8 00000000 E     3		call Delay
 00003571		     3	endCase??0077:
 00003571  E9 FFFFFC6C	     2		jmp stillShopping??006F
 00003576		     2	item2??006F:
 00003576  BB 000005A5 R     2		mov ebx,offset s3 ;//storing item for use
 0000357B  BA 0000072E R     3	mov edx, offset exitTitle
 00003580  BA 00000635 R     3	mov edx, offset buyTitle
 00003585  E8 00000000 E     3	call WriteString
 0000358A  BA 00000476 R     3	mov edx, offset infoTitle
 0000358F  E8 00000000 E     3	call WriteString
 00003594  E8 00000000 E     4		call ReadDec
 00003599  8B C8	     4		mov ecx, eax
 0000359B  81 F9 0000038D    3	cmp ecx,909
 000035A1  74 13	     3	je exit??007A
 000035A3  83 F9 02	     3	cmp ecx,2
 000035A6  74 13	     3	je buyItem??007A
 000035A8  83 F9 03	     3	cmp ecx,3
 000035AB  0F 84 0000009D    3	je infoItem??007A
 000035B1  E9 00000105	     3	jmp endCase??007A
 000035B6		     3	exit??007A:
 000035B6  E9 00000100	     3		jmp endCase??007A
 000035BB		     3	buyItem??007A:
 000035BB  8B 15 0000006D R  3		mov edx, c1.gold 
 000035C1  8B 43 04	     3		mov eax, [ebx].item.buyValue
 000035C4  3B D0	     3		cmp edx,eax
 000035C6  72 6B	     3		jb notEnoughGold??007A
 000035C8  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 000035CE  8B C3	     3		mov eax,ebx ;//moving for add
 000035D0  8B D3	     3		mov edx,ebx ;//storing for remove
 000035D2  BB 00000407 R     4	mov ebx, offset i1
 000035D7		     4	notEmpty??007C:
 000035D7  83 3B 00	     4	cmp [ebx].item.itemCode,0
 000035DA  74 0B	     4	je isEmpty??007C 
 000035DC  83 7B 10 00	     4	cmp [ebx].item.next,null
 000035E0  74 1D	     4	je inventoryFull??007C
 000035E2  8B 5B 10	     4	mov ebx,[ebx].item.next
 000035E5  EB F0	     4	jmp notEmpty??007C
 000035E7		     4	isEmpty??007C:
 000035E7  8B 08	     4	mov ecx, [eax].item.itemCode
 000035E9  89 0B	     4	mov [ebx].item.itemCode,ecx
 000035EB  8B 48 04	     4	mov ecx, [eax].item.buyValue
 000035EE  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 000035F1  8B 48 08	     4	mov ecx, [eax].item.sellValue
 000035F4  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 000035F7  8B 48 14	     4	mov ecx, [eax].item.combatValue
 000035FA  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 000035FD  EB 19	     4	jmp end??007C
 000035FF		     4	inventoryFull??007C:
 000035FF  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00003604  E8 00000000 E   *	    call   WriteString
 00003609  B8 000005DC	     4	mov eax, 1500
 0000360E  E8 00000000 E     4	call Delay
 00003613  E8 00000000 E     4	call clrscr
 00003618		     4	end??007C:
 00003618  8B DA	     3		mov ebx,edx ;//moving for remove
 0000361A  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00003620  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003627  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 0000362E  E9 00000088	     3		jmp endCase??007A
 00003633		     3		notEnoughGold??007A:
 00003633  E8 00000000 E     3		call clrscr
 00003638  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 0000363D  E8 00000000 E   *	    call   WriteString
 00003642  B8 000007D0	     3		mov eax,2000
 00003647  E8 00000000 E     3		call Delay
 0000364C  EB 6D	     3		jmp endCase??007A
 0000364E		     3	infoItem??007A:
 0000364E  E8 00000000 E     3		call clrscr
 00003653  BA 0000073B R     4	mov edx, offset blank
 00003658  E8 00000000 E     4	call WriteString
 0000365D  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 00003662  E8 00000000 E     4	call WriteString
 00003667  8B 43 04	     4	mov eax, [ebx].item.buyValue
 0000366A  E8 00000000 E     4	call WriteDec
 0000366F  BA 0000073B R     4	mov edx, offset blank
 00003674  E8 00000000 E     4	call WriteString
 00003679  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 0000367E  E8 00000000 E     4	call WriteString
 00003683  8B 43 08	     4	mov eax, [ebx].item.SellValue
 00003686  E8 00000000 E     4	call WriteDec
 0000368B  BA 0000073B R     4	mov edx, offset blank
 00003690  E8 00000000 E     4	call WriteString
 00003695  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 0000369A  E8 00000000 E     4	call WriteString
 0000369F  8B 43 14	     4	mov eax, [ebx].item.combatValue
 000036A2  E8 00000000 E     4	call WriteDec
 000036A7  BA 0000073B R     4	mov edx, offset blank
 000036AC  E8 00000000 E     4	call WriteString
 000036B1  B8 000007D0	     3		mov eax,2000
 000036B6  E8 00000000 E     3		call Delay
 000036BB		     3	endCase??007A:
 000036BB  E9 FFFFFB22	     2		jmp stillShopping??006F
 000036C0		     2	item3??006F:
 000036C0  BB 00000589 R     2		mov ebx,offset s4 ;//storing item for use
 000036C5  BA 0000072E R     3	mov edx, offset exitTitle
 000036CA  BA 00000635 R     3	mov edx, offset buyTitle
 000036CF  E8 00000000 E     3	call WriteString
 000036D4  BA 00000476 R     3	mov edx, offset infoTitle
 000036D9  E8 00000000 E     3	call WriteString
 000036DE  E8 00000000 E     4		call ReadDec
 000036E3  8B C8	     4		mov ecx, eax
 000036E5  81 F9 0000038D    3	cmp ecx,909
 000036EB  74 13	     3	je exit??007D
 000036ED  83 F9 02	     3	cmp ecx,2
 000036F0  74 13	     3	je buyItem??007D
 000036F2  83 F9 03	     3	cmp ecx,3
 000036F5  0F 84 0000009D    3	je infoItem??007D
 000036FB  E9 00000105	     3	jmp endCase??007D
 00003700		     3	exit??007D:
 00003700  E9 00000100	     3		jmp endCase??007D
 00003705		     3	buyItem??007D:
 00003705  8B 15 0000006D R  3		mov edx, c1.gold 
 0000370B  8B 43 04	     3		mov eax, [ebx].item.buyValue
 0000370E  3B D0	     3		cmp edx,eax
 00003710  72 6B	     3		jb notEnoughGold??007D
 00003712  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 00003718  8B C3	     3		mov eax,ebx ;//moving for add
 0000371A  8B D3	     3		mov edx,ebx ;//storing for remove
 0000371C  BB 00000407 R     4	mov ebx, offset i1
 00003721		     4	notEmpty??007F:
 00003721  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00003724  74 0B	     4	je isEmpty??007F 
 00003726  83 7B 10 00	     4	cmp [ebx].item.next,null
 0000372A  74 1D	     4	je inventoryFull??007F
 0000372C  8B 5B 10	     4	mov ebx,[ebx].item.next
 0000372F  EB F0	     4	jmp notEmpty??007F
 00003731		     4	isEmpty??007F:
 00003731  8B 08	     4	mov ecx, [eax].item.itemCode
 00003733  89 0B	     4	mov [ebx].item.itemCode,ecx
 00003735  8B 48 04	     4	mov ecx, [eax].item.buyValue
 00003738  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 0000373B  8B 48 08	     4	mov ecx, [eax].item.sellValue
 0000373E  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 00003741  8B 48 14	     4	mov ecx, [eax].item.combatValue
 00003744  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 00003747  EB 19	     4	jmp end??007F
 00003749		     4	inventoryFull??007F:
 00003749  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 0000374E  E8 00000000 E   *	    call   WriteString
 00003753  B8 000005DC	     4	mov eax, 1500
 00003758  E8 00000000 E     4	call Delay
 0000375D  E8 00000000 E     4	call clrscr
 00003762		     4	end??007F:
 00003762  8B DA	     3		mov ebx,edx ;//moving for remove
 00003764  C7 03 00000000    4	mov [ebx].item.itemCode,null
 0000376A  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003771  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00003778  E9 00000088	     3		jmp endCase??007D
 0000377D		     3		notEnoughGold??007D:
 0000377D  E8 00000000 E     3		call clrscr
 00003782  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 00003787  E8 00000000 E   *	    call   WriteString
 0000378C  B8 000007D0	     3		mov eax,2000
 00003791  E8 00000000 E     3		call Delay
 00003796  EB 6D	     3		jmp endCase??007D
 00003798		     3	infoItem??007D:
 00003798  E8 00000000 E     3		call clrscr
 0000379D  BA 0000073B R     4	mov edx, offset blank
 000037A2  E8 00000000 E     4	call WriteString
 000037A7  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 000037AC  E8 00000000 E     4	call WriteString
 000037B1  8B 43 04	     4	mov eax, [ebx].item.buyValue
 000037B4  E8 00000000 E     4	call WriteDec
 000037B9  BA 0000073B R     4	mov edx, offset blank
 000037BE  E8 00000000 E     4	call WriteString
 000037C3  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 000037C8  E8 00000000 E     4	call WriteString
 000037CD  8B 43 08	     4	mov eax, [ebx].item.SellValue
 000037D0  E8 00000000 E     4	call WriteDec
 000037D5  BA 0000073B R     4	mov edx, offset blank
 000037DA  E8 00000000 E     4	call WriteString
 000037DF  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 000037E4  E8 00000000 E     4	call WriteString
 000037E9  8B 43 14	     4	mov eax, [ebx].item.combatValue
 000037EC  E8 00000000 E     4	call WriteDec
 000037F1  BA 0000073B R     4	mov edx, offset blank
 000037F6  E8 00000000 E     4	call WriteString
 000037FB  B8 000007D0	     3		mov eax,2000
 00003800  E8 00000000 E     3		call Delay
 00003805		     3	endCase??007D:
 00003805  E9 FFFFF9D8	     2		jmp stillShopping??006F
 0000380A		     2	item4??006F:
 0000380A  BB 0000056D R     2		mov ebx,offset s5 ;//storing item for use
 0000380F  BA 0000072E R     3	mov edx, offset exitTitle
 00003814  BA 00000635 R     3	mov edx, offset buyTitle
 00003819  E8 00000000 E     3	call WriteString
 0000381E  BA 00000476 R     3	mov edx, offset infoTitle
 00003823  E8 00000000 E     3	call WriteString
 00003828  E8 00000000 E     4		call ReadDec
 0000382D  8B C8	     4		mov ecx, eax
 0000382F  81 F9 0000038D    3	cmp ecx,909
 00003835  74 13	     3	je exit??0080
 00003837  83 F9 02	     3	cmp ecx,2
 0000383A  74 13	     3	je buyItem??0080
 0000383C  83 F9 03	     3	cmp ecx,3
 0000383F  0F 84 0000009D    3	je infoItem??0080
 00003845  E9 00000105	     3	jmp endCase??0080
 0000384A		     3	exit??0080:
 0000384A  E9 00000100	     3		jmp endCase??0080
 0000384F		     3	buyItem??0080:
 0000384F  8B 15 0000006D R  3		mov edx, c1.gold 
 00003855  8B 43 04	     3		mov eax, [ebx].item.buyValue
 00003858  3B D0	     3		cmp edx,eax
 0000385A  72 6B	     3		jb notEnoughGold??0080
 0000385C  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 00003862  8B C3	     3		mov eax,ebx ;//moving for add
 00003864  8B D3	     3		mov edx,ebx ;//storing for remove
 00003866  BB 00000407 R     4	mov ebx, offset i1
 0000386B		     4	notEmpty??0082:
 0000386B  83 3B 00	     4	cmp [ebx].item.itemCode,0
 0000386E  74 0B	     4	je isEmpty??0082 
 00003870  83 7B 10 00	     4	cmp [ebx].item.next,null
 00003874  74 1D	     4	je inventoryFull??0082
 00003876  8B 5B 10	     4	mov ebx,[ebx].item.next
 00003879  EB F0	     4	jmp notEmpty??0082
 0000387B		     4	isEmpty??0082:
 0000387B  8B 08	     4	mov ecx, [eax].item.itemCode
 0000387D  89 0B	     4	mov [ebx].item.itemCode,ecx
 0000387F  8B 48 04	     4	mov ecx, [eax].item.buyValue
 00003882  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 00003885  8B 48 08	     4	mov ecx, [eax].item.sellValue
 00003888  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 0000388B  8B 48 14	     4	mov ecx, [eax].item.combatValue
 0000388E  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 00003891  EB 19	     4	jmp end??0082
 00003893		     4	inventoryFull??0082:
 00003893  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00003898  E8 00000000 E   *	    call   WriteString
 0000389D  B8 000005DC	     4	mov eax, 1500
 000038A2  E8 00000000 E     4	call Delay
 000038A7  E8 00000000 E     4	call clrscr
 000038AC		     4	end??0082:
 000038AC  8B DA	     3		mov ebx,edx ;//moving for remove
 000038AE  C7 03 00000000    4	mov [ebx].item.itemCode,null
 000038B4  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 000038BB  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 000038C2  E9 00000088	     3		jmp endCase??0080
 000038C7		     3		notEnoughGold??0080:
 000038C7  E8 00000000 E     3		call clrscr
 000038CC  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 000038D1  E8 00000000 E   *	    call   WriteString
 000038D6  B8 000007D0	     3		mov eax,2000
 000038DB  E8 00000000 E     3		call Delay
 000038E0  EB 6D	     3		jmp endCase??0080
 000038E2		     3	infoItem??0080:
 000038E2  E8 00000000 E     3		call clrscr
 000038E7  BA 0000073B R     4	mov edx, offset blank
 000038EC  E8 00000000 E     4	call WriteString
 000038F1  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 000038F6  E8 00000000 E     4	call WriteString
 000038FB  8B 43 04	     4	mov eax, [ebx].item.buyValue
 000038FE  E8 00000000 E     4	call WriteDec
 00003903  BA 0000073B R     4	mov edx, offset blank
 00003908  E8 00000000 E     4	call WriteString
 0000390D  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 00003912  E8 00000000 E     4	call WriteString
 00003917  8B 43 08	     4	mov eax, [ebx].item.SellValue
 0000391A  E8 00000000 E     4	call WriteDec
 0000391F  BA 0000073B R     4	mov edx, offset blank
 00003924  E8 00000000 E     4	call WriteString
 00003929  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 0000392E  E8 00000000 E     4	call WriteString
 00003933  8B 43 14	     4	mov eax, [ebx].item.combatValue
 00003936  E8 00000000 E     4	call WriteDec
 0000393B  BA 0000073B R     4	mov edx, offset blank
 00003940  E8 00000000 E     4	call WriteString
 00003945  B8 000007D0	     3		mov eax,2000
 0000394A  E8 00000000 E     3		call Delay
 0000394F		     3	endCase??0080:
 0000394F  E9 FFFFF88E	     2		jmp stillShopping??006F
 00003954		     2	item5??006F:
 00003954  BB 00000551 R     2		mov ebx,offset s6 ;//storing item for use
 00003959  BA 0000072E R     3	mov edx, offset exitTitle
 0000395E  BA 00000635 R     3	mov edx, offset buyTitle
 00003963  E8 00000000 E     3	call WriteString
 00003968  BA 00000476 R     3	mov edx, offset infoTitle
 0000396D  E8 00000000 E     3	call WriteString
 00003972  E8 00000000 E     4		call ReadDec
 00003977  8B C8	     4		mov ecx, eax
 00003979  81 F9 0000038D    3	cmp ecx,909
 0000397F  74 13	     3	je exit??0083
 00003981  83 F9 02	     3	cmp ecx,2
 00003984  74 13	     3	je buyItem??0083
 00003986  83 F9 03	     3	cmp ecx,3
 00003989  0F 84 0000009D    3	je infoItem??0083
 0000398F  E9 00000105	     3	jmp endCase??0083
 00003994		     3	exit??0083:
 00003994  E9 00000100	     3		jmp endCase??0083
 00003999		     3	buyItem??0083:
 00003999  8B 15 0000006D R  3		mov edx, c1.gold 
 0000399F  8B 43 04	     3		mov eax, [ebx].item.buyValue
 000039A2  3B D0	     3		cmp edx,eax
 000039A4  72 6B	     3		jb notEnoughGold??0083
 000039A6  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 000039AC  8B C3	     3		mov eax,ebx ;//moving for add
 000039AE  8B D3	     3		mov edx,ebx ;//storing for remove
 000039B0  BB 00000407 R     4	mov ebx, offset i1
 000039B5		     4	notEmpty??0085:
 000039B5  83 3B 00	     4	cmp [ebx].item.itemCode,0
 000039B8  74 0B	     4	je isEmpty??0085 
 000039BA  83 7B 10 00	     4	cmp [ebx].item.next,null
 000039BE  74 1D	     4	je inventoryFull??0085
 000039C0  8B 5B 10	     4	mov ebx,[ebx].item.next
 000039C3  EB F0	     4	jmp notEmpty??0085
 000039C5		     4	isEmpty??0085:
 000039C5  8B 08	     4	mov ecx, [eax].item.itemCode
 000039C7  89 0B	     4	mov [ebx].item.itemCode,ecx
 000039C9  8B 48 04	     4	mov ecx, [eax].item.buyValue
 000039CC  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 000039CF  8B 48 08	     4	mov ecx, [eax].item.sellValue
 000039D2  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 000039D5  8B 48 14	     4	mov ecx, [eax].item.combatValue
 000039D8  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 000039DB  EB 19	     4	jmp end??0085
 000039DD		     4	inventoryFull??0085:
 000039DD  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 000039E2  E8 00000000 E   *	    call   WriteString
 000039E7  B8 000005DC	     4	mov eax, 1500
 000039EC  E8 00000000 E     4	call Delay
 000039F1  E8 00000000 E     4	call clrscr
 000039F6		     4	end??0085:
 000039F6  8B DA	     3		mov ebx,edx ;//moving for remove
 000039F8  C7 03 00000000    4	mov [ebx].item.itemCode,null
 000039FE  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003A05  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00003A0C  E9 00000088	     3		jmp endCase??0083
 00003A11		     3		notEnoughGold??0083:
 00003A11  E8 00000000 E     3		call clrscr
 00003A16  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 00003A1B  E8 00000000 E   *	    call   WriteString
 00003A20  B8 000007D0	     3		mov eax,2000
 00003A25  E8 00000000 E     3		call Delay
 00003A2A  EB 6D	     3		jmp endCase??0083
 00003A2C		     3	infoItem??0083:
 00003A2C  E8 00000000 E     3		call clrscr
 00003A31  BA 0000073B R     4	mov edx, offset blank
 00003A36  E8 00000000 E     4	call WriteString
 00003A3B  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 00003A40  E8 00000000 E     4	call WriteString
 00003A45  8B 43 04	     4	mov eax, [ebx].item.buyValue
 00003A48  E8 00000000 E     4	call WriteDec
 00003A4D  BA 0000073B R     4	mov edx, offset blank
 00003A52  E8 00000000 E     4	call WriteString
 00003A57  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 00003A5C  E8 00000000 E     4	call WriteString
 00003A61  8B 43 08	     4	mov eax, [ebx].item.SellValue
 00003A64  E8 00000000 E     4	call WriteDec
 00003A69  BA 0000073B R     4	mov edx, offset blank
 00003A6E  E8 00000000 E     4	call WriteString
 00003A73  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 00003A78  E8 00000000 E     4	call WriteString
 00003A7D  8B 43 14	     4	mov eax, [ebx].item.combatValue
 00003A80  E8 00000000 E     4	call WriteDec
 00003A85  BA 0000073B R     4	mov edx, offset blank
 00003A8A  E8 00000000 E     4	call WriteString
 00003A8F  B8 000007D0	     3		mov eax,2000
 00003A94  E8 00000000 E     3		call Delay
 00003A99		     3	endCase??0083:
 00003A99  E9 FFFFF744	     2		jmp stillShopping??006F
 00003A9E		     2	item6??006F:
 00003A9E  BB 00000535 R     2		mov ebx,offset s7 ;//storing item for use
 00003AA3  BA 0000072E R     3	mov edx, offset exitTitle
 00003AA8  BA 00000635 R     3	mov edx, offset buyTitle
 00003AAD  E8 00000000 E     3	call WriteString
 00003AB2  BA 00000476 R     3	mov edx, offset infoTitle
 00003AB7  E8 00000000 E     3	call WriteString
 00003ABC  E8 00000000 E     4		call ReadDec
 00003AC1  8B C8	     4		mov ecx, eax
 00003AC3  81 F9 0000038D    3	cmp ecx,909
 00003AC9  74 13	     3	je exit??0086
 00003ACB  83 F9 02	     3	cmp ecx,2
 00003ACE  74 13	     3	je buyItem??0086
 00003AD0  83 F9 03	     3	cmp ecx,3
 00003AD3  0F 84 0000009D    3	je infoItem??0086
 00003AD9  E9 00000105	     3	jmp endCase??0086
 00003ADE		     3	exit??0086:
 00003ADE  E9 00000100	     3		jmp endCase??0086
 00003AE3		     3	buyItem??0086:
 00003AE3  8B 15 0000006D R  3		mov edx, c1.gold 
 00003AE9  8B 43 04	     3		mov eax, [ebx].item.buyValue
 00003AEC  3B D0	     3		cmp edx,eax
 00003AEE  72 6B	     3		jb notEnoughGold??0086
 00003AF0  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 00003AF6  8B C3	     3		mov eax,ebx ;//moving for add
 00003AF8  8B D3	     3		mov edx,ebx ;//storing for remove
 00003AFA  BB 00000407 R     4	mov ebx, offset i1
 00003AFF		     4	notEmpty??0088:
 00003AFF  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00003B02  74 0B	     4	je isEmpty??0088 
 00003B04  83 7B 10 00	     4	cmp [ebx].item.next,null
 00003B08  74 1D	     4	je inventoryFull??0088
 00003B0A  8B 5B 10	     4	mov ebx,[ebx].item.next
 00003B0D  EB F0	     4	jmp notEmpty??0088
 00003B0F		     4	isEmpty??0088:
 00003B0F  8B 08	     4	mov ecx, [eax].item.itemCode
 00003B11  89 0B	     4	mov [ebx].item.itemCode,ecx
 00003B13  8B 48 04	     4	mov ecx, [eax].item.buyValue
 00003B16  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 00003B19  8B 48 08	     4	mov ecx, [eax].item.sellValue
 00003B1C  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 00003B1F  8B 48 14	     4	mov ecx, [eax].item.combatValue
 00003B22  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 00003B25  EB 19	     4	jmp end??0088
 00003B27		     4	inventoryFull??0088:
 00003B27  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00003B2C  E8 00000000 E   *	    call   WriteString
 00003B31  B8 000005DC	     4	mov eax, 1500
 00003B36  E8 00000000 E     4	call Delay
 00003B3B  E8 00000000 E     4	call clrscr
 00003B40		     4	end??0088:
 00003B40  8B DA	     3		mov ebx,edx ;//moving for remove
 00003B42  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00003B48  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003B4F  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00003B56  E9 00000088	     3		jmp endCase??0086
 00003B5B		     3		notEnoughGold??0086:
 00003B5B  E8 00000000 E     3		call clrscr
 00003B60  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 00003B65  E8 00000000 E   *	    call   WriteString
 00003B6A  B8 000007D0	     3		mov eax,2000
 00003B6F  E8 00000000 E     3		call Delay
 00003B74  EB 6D	     3		jmp endCase??0086
 00003B76		     3	infoItem??0086:
 00003B76  E8 00000000 E     3		call clrscr
 00003B7B  BA 0000073B R     4	mov edx, offset blank
 00003B80  E8 00000000 E     4	call WriteString
 00003B85  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 00003B8A  E8 00000000 E     4	call WriteString
 00003B8F  8B 43 04	     4	mov eax, [ebx].item.buyValue
 00003B92  E8 00000000 E     4	call WriteDec
 00003B97  BA 0000073B R     4	mov edx, offset blank
 00003B9C  E8 00000000 E     4	call WriteString
 00003BA1  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 00003BA6  E8 00000000 E     4	call WriteString
 00003BAB  8B 43 08	     4	mov eax, [ebx].item.SellValue
 00003BAE  E8 00000000 E     4	call WriteDec
 00003BB3  BA 0000073B R     4	mov edx, offset blank
 00003BB8  E8 00000000 E     4	call WriteString
 00003BBD  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 00003BC2  E8 00000000 E     4	call WriteString
 00003BC7  8B 43 14	     4	mov eax, [ebx].item.combatValue
 00003BCA  E8 00000000 E     4	call WriteDec
 00003BCF  BA 0000073B R     4	mov edx, offset blank
 00003BD4  E8 00000000 E     4	call WriteString
 00003BD9  B8 000007D0	     3		mov eax,2000
 00003BDE  E8 00000000 E     3		call Delay
 00003BE3		     3	endCase??0086:
 00003BE3  E9 FFFFF5FA	     2		jmp stillShopping??006F
 00003BE8		     2	item7??006F:
 00003BE8  BB 00000519 R     2		mov ebx,offset s8 ;//storing item for use
 00003BED  BA 0000072E R     3	mov edx, offset exitTitle
 00003BF2  BA 00000635 R     3	mov edx, offset buyTitle
 00003BF7  E8 00000000 E     3	call WriteString
 00003BFC  BA 00000476 R     3	mov edx, offset infoTitle
 00003C01  E8 00000000 E     3	call WriteString
 00003C06  E8 00000000 E     4		call ReadDec
 00003C0B  8B C8	     4		mov ecx, eax
 00003C0D  81 F9 0000038D    3	cmp ecx,909
 00003C13  74 13	     3	je exit??0089
 00003C15  83 F9 02	     3	cmp ecx,2
 00003C18  74 13	     3	je buyItem??0089
 00003C1A  83 F9 03	     3	cmp ecx,3
 00003C1D  0F 84 0000009D    3	je infoItem??0089
 00003C23  E9 00000105	     3	jmp endCase??0089
 00003C28		     3	exit??0089:
 00003C28  E9 00000100	     3		jmp endCase??0089
 00003C2D		     3	buyItem??0089:
 00003C2D  8B 15 0000006D R  3		mov edx, c1.gold 
 00003C33  8B 43 04	     3		mov eax, [ebx].item.buyValue
 00003C36  3B D0	     3		cmp edx,eax
 00003C38  72 6B	     3		jb notEnoughGold??0089
 00003C3A  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 00003C40  8B C3	     3		mov eax,ebx ;//moving for add
 00003C42  8B D3	     3		mov edx,ebx ;//storing for remove
 00003C44  BB 00000407 R     4	mov ebx, offset i1
 00003C49		     4	notEmpty??008B:
 00003C49  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00003C4C  74 0B	     4	je isEmpty??008B 
 00003C4E  83 7B 10 00	     4	cmp [ebx].item.next,null
 00003C52  74 1D	     4	je inventoryFull??008B
 00003C54  8B 5B 10	     4	mov ebx,[ebx].item.next
 00003C57  EB F0	     4	jmp notEmpty??008B
 00003C59		     4	isEmpty??008B:
 00003C59  8B 08	     4	mov ecx, [eax].item.itemCode
 00003C5B  89 0B	     4	mov [ebx].item.itemCode,ecx
 00003C5D  8B 48 04	     4	mov ecx, [eax].item.buyValue
 00003C60  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 00003C63  8B 48 08	     4	mov ecx, [eax].item.sellValue
 00003C66  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 00003C69  8B 48 14	     4	mov ecx, [eax].item.combatValue
 00003C6C  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 00003C6F  EB 19	     4	jmp end??008B
 00003C71		     4	inventoryFull??008B:
 00003C71  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00003C76  E8 00000000 E   *	    call   WriteString
 00003C7B  B8 000005DC	     4	mov eax, 1500
 00003C80  E8 00000000 E     4	call Delay
 00003C85  E8 00000000 E     4	call clrscr
 00003C8A		     4	end??008B:
 00003C8A  8B DA	     3		mov ebx,edx ;//moving for remove
 00003C8C  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00003C92  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003C99  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00003CA0  E9 00000088	     3		jmp endCase??0089
 00003CA5		     3		notEnoughGold??0089:
 00003CA5  E8 00000000 E     3		call clrscr
 00003CAA  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 00003CAF  E8 00000000 E   *	    call   WriteString
 00003CB4  B8 000007D0	     3		mov eax,2000
 00003CB9  E8 00000000 E     3		call Delay
 00003CBE  EB 6D	     3		jmp endCase??0089
 00003CC0		     3	infoItem??0089:
 00003CC0  E8 00000000 E     3		call clrscr
 00003CC5  BA 0000073B R     4	mov edx, offset blank
 00003CCA  E8 00000000 E     4	call WriteString
 00003CCF  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 00003CD4  E8 00000000 E     4	call WriteString
 00003CD9  8B 43 04	     4	mov eax, [ebx].item.buyValue
 00003CDC  E8 00000000 E     4	call WriteDec
 00003CE1  BA 0000073B R     4	mov edx, offset blank
 00003CE6  E8 00000000 E     4	call WriteString
 00003CEB  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 00003CF0  E8 00000000 E     4	call WriteString
 00003CF5  8B 43 08	     4	mov eax, [ebx].item.SellValue
 00003CF8  E8 00000000 E     4	call WriteDec
 00003CFD  BA 0000073B R     4	mov edx, offset blank
 00003D02  E8 00000000 E     4	call WriteString
 00003D07  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 00003D0C  E8 00000000 E     4	call WriteString
 00003D11  8B 43 14	     4	mov eax, [ebx].item.combatValue
 00003D14  E8 00000000 E     4	call WriteDec
 00003D19  BA 0000073B R     4	mov edx, offset blank
 00003D1E  E8 00000000 E     4	call WriteString
 00003D23  B8 000007D0	     3		mov eax,2000
 00003D28  E8 00000000 E     3		call Delay
 00003D2D		     3	endCase??0089:
 00003D2D  E9 FFFFF4B0	     2		jmp stillShopping??006F
 00003D32		     2	item8??006F:
 00003D32  BB 000004FD R     2		mov ebx,offset s9 ;//storing item for use
 00003D37  BA 0000072E R     3	mov edx, offset exitTitle
 00003D3C  BA 00000635 R     3	mov edx, offset buyTitle
 00003D41  E8 00000000 E     3	call WriteString
 00003D46  BA 00000476 R     3	mov edx, offset infoTitle
 00003D4B  E8 00000000 E     3	call WriteString
 00003D50  E8 00000000 E     4		call ReadDec
 00003D55  8B C8	     4		mov ecx, eax
 00003D57  81 F9 0000038D    3	cmp ecx,909
 00003D5D  74 13	     3	je exit??008C
 00003D5F  83 F9 02	     3	cmp ecx,2
 00003D62  74 13	     3	je buyItem??008C
 00003D64  83 F9 03	     3	cmp ecx,3
 00003D67  0F 84 0000009D    3	je infoItem??008C
 00003D6D  E9 00000105	     3	jmp endCase??008C
 00003D72		     3	exit??008C:
 00003D72  E9 00000100	     3		jmp endCase??008C
 00003D77		     3	buyItem??008C:
 00003D77  8B 15 0000006D R  3		mov edx, c1.gold 
 00003D7D  8B 43 04	     3		mov eax, [ebx].item.buyValue
 00003D80  3B D0	     3		cmp edx,eax
 00003D82  72 6B	     3		jb notEnoughGold??008C
 00003D84  29 05 0000006D R  3		sub c1.gold,eax ;//decrease yout gold
 00003D8A  8B C3	     3		mov eax,ebx ;//moving for add
 00003D8C  8B D3	     3		mov edx,ebx ;//storing for remove
 00003D8E  BB 00000407 R     4	mov ebx, offset i1
 00003D93		     4	notEmpty??008E:
 00003D93  83 3B 00	     4	cmp [ebx].item.itemCode,0
 00003D96  74 0B	     4	je isEmpty??008E 
 00003D98  83 7B 10 00	     4	cmp [ebx].item.next,null
 00003D9C  74 1D	     4	je inventoryFull??008E
 00003D9E  8B 5B 10	     4	mov ebx,[ebx].item.next
 00003DA1  EB F0	     4	jmp notEmpty??008E
 00003DA3		     4	isEmpty??008E:
 00003DA3  8B 08	     4	mov ecx, [eax].item.itemCode
 00003DA5  89 0B	     4	mov [ebx].item.itemCode,ecx
 00003DA7  8B 48 04	     4	mov ecx, [eax].item.buyValue
 00003DAA  89 4B 04	     4	mov [ebx].item.buyValue,ecx
 00003DAD  8B 48 08	     4	mov ecx, [eax].item.sellValue
 00003DB0  89 4B 08	     4	mov [ebx].item.sellValue,ecx
 00003DB3  8B 48 14	     4	mov ecx, [eax].item.combatValue
 00003DB6  89 4B 14	     4	mov [ebx].item.combatValue,ecx
 00003DB9  EB 19	     4	jmp end??008E
 00003DBB		     4	inventoryFull??008E:
 00003DBB  BA 000004D0 R     4	mov edx, offset inventoryFullTitle
 00003DC0  E8 00000000 E   *	    call   WriteString
 00003DC5  B8 000005DC	     4	mov eax, 1500
 00003DCA  E8 00000000 E     4	call Delay
 00003DCF  E8 00000000 E     4	call clrscr
 00003DD4		     4	end??008E:
 00003DD4  8B DA	     3		mov ebx,edx ;//moving for remove
 00003DD6  C7 03 00000000    4	mov [ebx].item.itemCode,null
 00003DDC  C7 43 08	     4	mov [ebx].item.sellValue,0
	   00000000
 00003DE3  C7 43 04	     4	mov [ebx].item.buyValue,0
	   00000000
 00003DEA  E9 00000088	     3		jmp endCase??008C
 00003DEF		     3		notEnoughGold??008C:
 00003DEF  E8 00000000 E     3		call clrscr
 00003DF4  BA 00000692 R     3		mov edx, offset notEnoughGoldTitle
 00003DF9  E8 00000000 E   *	    call   WriteString
 00003DFE  B8 000007D0	     3		mov eax,2000
 00003E03  E8 00000000 E     3		call Delay
 00003E08  EB 6D	     3		jmp endCase??008C
 00003E0A		     3	infoItem??008C:
 00003E0A  E8 00000000 E     3		call clrscr
 00003E0F  BA 0000073B R     4	mov edx, offset blank
 00003E14  E8 00000000 E     4	call WriteString
 00003E19  BA 000004A2 R     4	mov edx, offset itemBuyValueTitle ;displays buy value
 00003E1E  E8 00000000 E     4	call WriteString
 00003E23  8B 43 04	     4	mov eax, [ebx].item.buyValue
 00003E26  E8 00000000 E     4	call WriteDec
 00003E2B  BA 0000073B R     4	mov edx, offset blank
 00003E30  E8 00000000 E     4	call WriteString
 00003E35  BA 00000493 R     4	mov edx, offset itemSellValueTitle ;displays sell value 
 00003E3A  E8 00000000 E     4	call WriteString
 00003E3F  8B 43 08	     4	mov eax, [ebx].item.SellValue
 00003E42  E8 00000000 E     4	call WriteDec
 00003E47  BA 0000073B R     4	mov edx, offset blank
 00003E4C  E8 00000000 E     4	call WriteString
 00003E51  BA 000004B0 R     4	mov edx, offset itemCombatValueTitle ;displays combat value
 00003E56  E8 00000000 E     4	call WriteString
 00003E5B  8B 43 14	     4	mov eax, [ebx].item.combatValue
 00003E5E  E8 00000000 E     4	call WriteDec
 00003E63  BA 0000073B R     4	mov edx, offset blank
 00003E68  E8 00000000 E     4	call WriteString
 00003E6D  B8 000007D0	     3		mov eax,2000
 00003E72  E8 00000000 E     3		call Delay
 00003E77		     3	endCase??008C:
 00003E77  E9 FFFFF366	     2		jmp stillShopping??006F
 00003E7C		     2	item9??006F:
 00003E7C  BB 000004E1 R     2		mov ebx,offset s10 ;//storing item for use
 00003E81		     2	sellMode??006F:
 00003E81  E8 00000000 E     2		call clrscr
 00003E86		     3	 stillShopping??008F:
 00003E86  BB 00000407 R     3	mov ebx, offset i1
 00003E8B  60		     4	pushAD
 00003E8C  33 C9	     4	xor ecx,ecx
 00003E8E		     4	DO1??0090:
 00003E8E  8B C1	     4	mov eax,ecx
 00003E90  E8 00000000 E     4	call WriteDec
 00003E95  B8 0000003A	     4	mov eax, ':'
 00003E9A  E8 00000000 E     4	call WriteChar
 00003E9F  8B 03	     4	mov eax, [ebx].item.itemCode
 00003EA1  83 F8 01	     5	cmp eax,1
 00003EA4  74 11	     5	je item0??0091
 00003EA6  83 F8 02	     5	cmp eax,2
 00003EA9  74 13	     5	je item1??0091
 00003EAB  83 F8 03	     5	cmp eax,3
 00003EAE  74 15	     5	je item2??0091
 00003EB0  83 F8 04	     5	cmp eax,4
 00003EB3  74 17	     5	je item3??0091
 00003EB5  EB 1C	     5	jmp default??0091
 00003EB7		     5	item0??0091:
 00003EB7  BA 00000000 R     5		mov edx, offset itemName1
 00003EBC  EB 1A	     5		jmp print??0091
 00003EBE		     5	item1??0091:
 00003EBE  BA 00000009 R     5		mov edx, offset itemName2
 00003EC3  EB 13	     5		jmp print??0091
 00003EC5		     5	item2??0091:
 00003EC5  BA 00000013 R     5		mov edx, offset itemName3
 00003ECA  EB 0C	     5		jmp print??0091
 00003ECC		     5	item3??0091:
 00003ECC  BA 0000001B R     5		mov edx, offset itemName4
 00003ED1  EB 05	     5		jmp print??0091
 00003ED3		     5	default??0091:
 00003ED3  BA 00000038 R     5		mov edx, offset defaultName
 00003ED8		     5	print??0091:
 00003ED8  E8 00000000 E   *	    call   WriteString
 00003EDD  BA 0000073B R     4	mov edx,offset blank
 00003EE2  E8 00000000 E     4	call WriteString
 00003EE7  8B 5B 10	     4	mov eBx,[ebx].item.next
 00003EEA  41		     4	inc ecx
 00003EEB  83 FB 00	     4	cmp ebx,null
 00003EEE  75 9E	     4	jne DO1??0090
 00003EF0  61		     4	popAD
 00003EF1  BA 0000061D R     3	mov edx, offset buyModeTitle
 00003EF6  E8 00000000 E   *	    call   WriteString
 00003EFB  E8 00000000 E     4		call ReadDec
 00003F00  8B C8	     4		mov ecx, eax
 00003F02  83 F9 00	     3	cmp ecx,0
 00003F05  74 5A	     3		je item0??008F
 00003F07  83 F9 01	     3	cmp ecx,1
 00003F0A  0F 84 0000009B    3		je item1??008F
 00003F10  83 F9 02	     3	cmp ecx,2
 00003F13  0F 84 000000DC    3		je item2??008F
 00003F19  83 F9 03	     3	cmp ecx,3
 00003F1C  0F 84 0000011D    3		je item3??008F
 00003F22  83 F9 04	     3	cmp ecx,4
 00003F25  0F 84 0000015E    3		je item4??008F
 00003F2B  83 F9 05	     3	cmp ecx,5
 00003F2E  0F 84 0000019F    3		je item5??008F
 00003F34  83 F9 06	     3	cmp ecx,6
 00003F37  0F 84 000001E0    3		je item6??008F
 00003F3D  83 F9 07	     3	cmp ecx,7
 00003F40  0F 84 00000221    3		je item7??008F
 00003F46  83 F9 08	     3	cmp ecx,8
 00003F49  0F 84 00000262    3		je item8??008F
 00003F4F  83 F9 09	     3	cmp ecx,9
 00003F52  0F 84 000002A3    3		je item9??008F
 00003F58  83 F9 0A	     3	cmp ecx,10
 00003F5B  0F 84 000002E4    3		je switchToBuyMode??008F
 00003F61		     3	item0??008F:
 00003F61  BB 00000407 R     3		mov ebx,offset i1 ;//storing item for use
 00003F66  E8 00000000 E     4	call clrscr
 00003F6B  BA 0000063E R     4	mov edx, offset sellTitle
 00003F70  E8 00000000 E   *	    call   WriteString
 00003F75  E8 00000000 E     5		call ReadDec
 00003F7A  8B C8	     5		mov ecx, eax
 00003F7C  83 F9 01	     4	cmp ecx, 1
 00003F7F  74 00	     4	je doSell??0093
 00003F81		     4	doSell??0093:
 00003F81  8B 43 08	     4	mov eax,[ebx].item.sellValue
 00003F84  8B 15 0000006D R  4	mov edx,c1.gold
 00003F8A  03 D0	     4	add edx,eax
 00003F8C  89 15 0000006D R  4	mov c1.gold,edx
 00003F92  C7 03 00000000    5	mov [ebx].item.itemCode,null
 00003F98  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 00003F9F  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 00003FA6  E9 FFFFFEDB	     3		jmp stillShopping??008F
 00003FAB		     3	item1??008F:
 00003FAB  BB 000003EB R     3		mov ebx,offset i2 ;//storing item for use
 00003FB0  E8 00000000 E     4	call clrscr
 00003FB5  BA 0000063E R     4	mov edx, offset sellTitle
 00003FBA  E8 00000000 E   *	    call   WriteString
 00003FBF  E8 00000000 E     5		call ReadDec
 00003FC4  8B C8	     5		mov ecx, eax
 00003FC6  83 F9 01	     4	cmp ecx, 1
 00003FC9  74 00	     4	je doSell??0095
 00003FCB		     4	doSell??0095:
 00003FCB  8B 43 08	     4	mov eax,[ebx].item.sellValue
 00003FCE  8B 15 0000006D R  4	mov edx,c1.gold
 00003FD4  03 D0	     4	add edx,eax
 00003FD6  89 15 0000006D R  4	mov c1.gold,edx
 00003FDC  C7 03 00000000    5	mov [ebx].item.itemCode,null
 00003FE2  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 00003FE9  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 00003FF0  E9 FFFFFE91	     3		jmp stillShopping??008F
 00003FF5		     3	item2??008F:
 00003FF5  BB 000003CF R     3		mov ebx,offset i3 ;//storing item for use
 00003FFA  E8 00000000 E     4	call clrscr
 00003FFF  BA 0000063E R     4	mov edx, offset sellTitle
 00004004  E8 00000000 E   *	    call   WriteString
 00004009  E8 00000000 E     5		call ReadDec
 0000400E  8B C8	     5		mov ecx, eax
 00004010  83 F9 01	     4	cmp ecx, 1
 00004013  74 00	     4	je doSell??0097
 00004015		     4	doSell??0097:
 00004015  8B 43 08	     4	mov eax,[ebx].item.sellValue
 00004018  8B 15 0000006D R  4	mov edx,c1.gold
 0000401E  03 D0	     4	add edx,eax
 00004020  89 15 0000006D R  4	mov c1.gold,edx
 00004026  C7 03 00000000    5	mov [ebx].item.itemCode,null
 0000402C  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 00004033  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 0000403A  E9 FFFFFE47	     3		jmp stillShopping??008F
 0000403F		     3	item3??008F:
 0000403F  BB 000003B3 R     3		mov ebx,offset i4 ;//storing item for use
 00004044  E8 00000000 E     4	call clrscr
 00004049  BA 0000063E R     4	mov edx, offset sellTitle
 0000404E  E8 00000000 E   *	    call   WriteString
 00004053  E8 00000000 E     5		call ReadDec
 00004058  8B C8	     5		mov ecx, eax
 0000405A  83 F9 01	     4	cmp ecx, 1
 0000405D  74 00	     4	je doSell??0099
 0000405F		     4	doSell??0099:
 0000405F  8B 43 08	     4	mov eax,[ebx].item.sellValue
 00004062  8B 15 0000006D R  4	mov edx,c1.gold
 00004068  03 D0	     4	add edx,eax
 0000406A  89 15 0000006D R  4	mov c1.gold,edx
 00004070  C7 03 00000000    5	mov [ebx].item.itemCode,null
 00004076  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 0000407D  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 00004084  E9 FFFFFDFD	     3		jmp stillShopping??008F
 00004089		     3	item4??008F:
 00004089  BB 00000397 R     3		mov ebx,offset i5 ;//storing item for use
 0000408E  E8 00000000 E     4	call clrscr
 00004093  BA 0000063E R     4	mov edx, offset sellTitle
 00004098  E8 00000000 E   *	    call   WriteString
 0000409D  E8 00000000 E     5		call ReadDec
 000040A2  8B C8	     5		mov ecx, eax
 000040A4  83 F9 01	     4	cmp ecx, 1
 000040A7  74 00	     4	je doSell??009B
 000040A9		     4	doSell??009B:
 000040A9  8B 43 08	     4	mov eax,[ebx].item.sellValue
 000040AC  8B 15 0000006D R  4	mov edx,c1.gold
 000040B2  03 D0	     4	add edx,eax
 000040B4  89 15 0000006D R  4	mov c1.gold,edx
 000040BA  C7 03 00000000    5	mov [ebx].item.itemCode,null
 000040C0  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 000040C7  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 000040CE  E9 FFFFFDB3	     3		jmp stillShopping??008F
 000040D3		     3	item5??008F:
 000040D3  BB 0000037B R     3		mov ebx,offset i6 ;//storing item for use
 000040D8  E8 00000000 E     4	call clrscr
 000040DD  BA 0000063E R     4	mov edx, offset sellTitle
 000040E2  E8 00000000 E   *	    call   WriteString
 000040E7  E8 00000000 E     5		call ReadDec
 000040EC  8B C8	     5		mov ecx, eax
 000040EE  83 F9 01	     4	cmp ecx, 1
 000040F1  74 00	     4	je doSell??009D
 000040F3		     4	doSell??009D:
 000040F3  8B 43 08	     4	mov eax,[ebx].item.sellValue
 000040F6  8B 15 0000006D R  4	mov edx,c1.gold
 000040FC  03 D0	     4	add edx,eax
 000040FE  89 15 0000006D R  4	mov c1.gold,edx
 00004104  C7 03 00000000    5	mov [ebx].item.itemCode,null
 0000410A  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 00004111  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 00004118  E9 FFFFFD69	     3		jmp stillShopping??008F
 0000411D		     3	item6??008F:
 0000411D  BB 0000035F R     3		mov ebx,offset i7 ;//storing item for use
 00004122  E8 00000000 E     4	call clrscr
 00004127  BA 0000063E R     4	mov edx, offset sellTitle
 0000412C  E8 00000000 E   *	    call   WriteString
 00004131  E8 00000000 E     5		call ReadDec
 00004136  8B C8	     5		mov ecx, eax
 00004138  83 F9 01	     4	cmp ecx, 1
 0000413B  74 00	     4	je doSell??009F
 0000413D		     4	doSell??009F:
 0000413D  8B 43 08	     4	mov eax,[ebx].item.sellValue
 00004140  8B 15 0000006D R  4	mov edx,c1.gold
 00004146  03 D0	     4	add edx,eax
 00004148  89 15 0000006D R  4	mov c1.gold,edx
 0000414E  C7 03 00000000    5	mov [ebx].item.itemCode,null
 00004154  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 0000415B  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 00004162  E9 FFFFFD1F	     3		jmp stillShopping??008F
 00004167		     3	item7??008F:
 00004167  BB 00000343 R     3		mov ebx,offset i8 ;//storing item for use
 0000416C  E8 00000000 E     4	call clrscr
 00004171  BA 0000063E R     4	mov edx, offset sellTitle
 00004176  E8 00000000 E   *	    call   WriteString
 0000417B  E8 00000000 E     5		call ReadDec
 00004180  8B C8	     5		mov ecx, eax
 00004182  83 F9 01	     4	cmp ecx, 1
 00004185  74 00	     4	je doSell??00A1
 00004187		     4	doSell??00A1:
 00004187  8B 43 08	     4	mov eax,[ebx].item.sellValue
 0000418A  8B 15 0000006D R  4	mov edx,c1.gold
 00004190  03 D0	     4	add edx,eax
 00004192  89 15 0000006D R  4	mov c1.gold,edx
 00004198  C7 03 00000000    5	mov [ebx].item.itemCode,null
 0000419E  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 000041A5  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 000041AC  E9 FFFFFCD5	     3		jmp stillShopping??008F
 000041B1		     3	item8??008F:
 000041B1  BB 00000327 R     3		mov ebx,offset i9 ;//storing item for use
 000041B6  E8 00000000 E     4	call clrscr
 000041BB  BA 0000063E R     4	mov edx, offset sellTitle
 000041C0  E8 00000000 E   *	    call   WriteString
 000041C5  E8 00000000 E     5		call ReadDec
 000041CA  8B C8	     5		mov ecx, eax
 000041CC  83 F9 01	     4	cmp ecx, 1
 000041CF  74 00	     4	je doSell??00A3
 000041D1		     4	doSell??00A3:
 000041D1  8B 43 08	     4	mov eax,[ebx].item.sellValue
 000041D4  8B 15 0000006D R  4	mov edx,c1.gold
 000041DA  03 D0	     4	add edx,eax
 000041DC  89 15 0000006D R  4	mov c1.gold,edx
 000041E2  C7 03 00000000    5	mov [ebx].item.itemCode,null
 000041E8  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 000041EF  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 000041F6  E9 FFFFFC8B	     3		jmp stillShopping??008F
 000041FB		     3	item9??008F:
 000041FB  BB 0000030B R     3		mov ebx,offset i10 ;//storing item for use
 00004200  E8 00000000 E     4	call clrscr
 00004205  BA 0000063E R     4	mov edx, offset sellTitle
 0000420A  E8 00000000 E   *	    call   WriteString
 0000420F  E8 00000000 E     5		call ReadDec
 00004214  8B C8	     5		mov ecx, eax
 00004216  83 F9 01	     4	cmp ecx, 1
 00004219  74 00	     4	je doSell??00A5
 0000421B		     4	doSell??00A5:
 0000421B  8B 43 08	     4	mov eax,[ebx].item.sellValue
 0000421E  8B 15 0000006D R  4	mov edx,c1.gold
 00004224  03 D0	     4	add edx,eax
 00004226  89 15 0000006D R  4	mov c1.gold,edx
 0000422C  C7 03 00000000    5	mov [ebx].item.itemCode,null
 00004232  C7 43 08	     5	mov [ebx].item.sellValue,0
	   00000000
 00004239  C7 43 04	     5	mov [ebx].item.buyValue,0
	   00000000
 00004240  E9 FFFFFC41	     3		jmp stillShopping??008F
 00004245		     3	switchToBuyMode??008F:
 00004245  E8 00000000 E     3	call clrscr
 0000424A  E9 FFFFEF93	     2	jmp stillShopping??006F
 0000424F		     2	exitShop??006F:
 0000424F  E8 00000000 E     2	Call clrscr
 00004254		     1	combat??006E:
 00004254  60		     2	pushAD
 00004255  60		     3	pushAD
 00004256  8B 1D 00000061 R  3	mov ebx, c1.level ;//initialize enemy hp
 0000425C  B8 00000003	     3	mov eax,3
 00004261  E8 00000000 E     3	call RandomRange
 00004266  40		     3	inc eax
 00004267  F7 E3	     3	mul ebx
 00004269  A3 000001A1 R     3	mov e1.hpMax,eax
 0000426E  A3 000001A5 R     3	mov e1.hp,eax
 00004273  B8 00000002	     3	mov eax, 2 ;//initialize enemy damage
 00004278  E8 00000000 E     3	call RandomRange
 0000427D  40		     3	inc eax
 0000427E  03 C3	     3	add eax,ebx
 00004280  A3 000001A9 R     3	mov e1.damageMin,eax
 00004285  8B C8	     3	mov ecx,eax
 00004287  B8 00000002	     3	mov eax,2
 0000428C  E8 00000000 E     3	call RandomRange
 00004291  40		     3	inc eax
 00004292  03 C1	     3	add eax,ecx
 00004294  A3 000001AD R     3	mov e1.damageMax,eax
 00004299  A1 000001A1 R     3	mov eax,e1.hpMax ;//initialize expReward
 0000429E  BB 0000000A	     3	mov ebx,10
 000042A3  F7 E3	     3	mul ebx
 000042A5  A3 000001B5 R     3	mov e1.expReward ,eax
 000042AA  61		     3	popAD
 000042AB  A1 00000081 R     2	mov eax,c1.hpMax
 000042B0  A3 00000085 R     2	mov c1.hp,eax
 000042B5  C6 05 000001B9 R  2	mov escape        ,0 ;//combat end conditions
	   00
 000042BC  C6 05 000001BA R  2	mov playerDefeated,0
	   00
 000042C3  C6 05 000001BB R  2	mov enemyDefeated ,0
	   00
 000042CA		     2	WHILE_COMBAT??00A7:    ;//disgusting triple & while statement
 000042CA  80 3D 000001B9 R  2	cmp escape,0       ;//while &
	   00
 000042D1  74 05	     2	je AND_COMBAT1??00A7
 000042D3  E9 0000020D	     2	jmp AND_FALSE_COMBAT??00A7
 000042D8  80 3D 000001BA R  2	AND_COMBAT1??00A7: cmp playerDefeated,0
	   00
 000042DF  74 05	     2	je AND_COMBAT2??00A7
 000042E1  E9 000001FF	     2	jmp AND_FALSE_COMBAT??00A7
 000042E6  80 3D 000001BB R  2	AND_COMBAT2??00A7: cmp enemyDefeated,0
	   00
 000042ED  74 05	     2	je AND_COMBAT_TRUE??00A7
 000042EF  E9 000001F1	     2	jmp AND_FALSE_COMBAT??00A7
 000042F4		     2	AND_COMBAT_TRUE??00A7:
 000042F4  BA 000001BC R     2		mov edx, offset combatMenuTitle
 000042F9  E8 00000000 E   *	    call   WriteString
 000042FE  BA 000001C9 R     2		mov edx, offset enemyNameTitle ;//prints enemy name
 00004303  E8 00000000 E   *	    call   WriteString
 00004308  BA 00000199 R     2		mov edx, offset e1.enemyName
 0000430D  E8 00000000 E   *	    call   WriteString
 00004312  BA 0000073B R     2		mov edx, offset blank
 00004317  E8 00000000 E   *	    call   WriteString
 0000431C  BA 000001D7 R     2		mov edx, offset enemyHpTitle ;//prints enemy hp
 00004321  E8 00000000 E   *	    call   WriteString
 00004326  A1 000001A5 R     2		mov eax, e1.hp
 0000432B  E8 00000000 E     2		call WriteDec
 00004330  B8 0000002F	     2		mov eax,'/'
 00004335  E8 00000000 E     2		call WriteChar
 0000433A  A1 000001A1 R     2		mov eax, e1.hpMax
 0000433F  E8 00000000 E     2		call WriteDec
 00004344  BA 0000073B R     2		mov edx, offset blank
 00004349  E8 00000000 E   *	    call   WriteString
 0000434E  BA 000001E3 R     2		mov edx, offset enemyDamageTitle ;//prints enemy damage
 00004353  E8 00000000 E   *	    call   WriteString
 00004358  A1 000001A9 R     2		mov eax, e1.damageMin
 0000435D  E8 00000000 E     2		call WriteDec
 00004362  B8 0000002D	     2		mov eax,'-'
 00004367  E8 00000000 E     2		call WriteChar
 0000436C  A1 000001AD R     2		mov eax, e1.damageMax
 00004371  E8 00000000 E     2		call WriteDec
 00004376  BA 0000073B R     2		mov edx, offset blank
 0000437B  E8 00000000 E   *	    call   WriteString
 00004380  BA 00000130 R     2		mov edx, offset combatAttributesTitle ;//prints primary attributes header
 00004385  E8 00000000 E   *	    call   WriteString
 0000438A  BA 00000148 R     2		mov edx, offset hpTitle ;//prints character hp
 0000438F  E8 00000000 E   *	    call   WriteString
 00004394  A1 00000085 R     2		mov eax, c1.hp
 00004399  E8 00000000 E     2		call WriteDec
 0000439E  B8 0000002F	     2		mov eax,'/'
 000043A3  E8 00000000 E     2		call WriteChar
 000043A8  A1 00000081 R     2		mov eax, c1.hpMax
 000043AD  E8 00000000 E     2		call WriteDec
 000043B2  BA 0000073B R     2		mov edx, offset blank
 000043B7  E8 00000000 E   *	    call   WriteString
 000043BC  BA 0000014E R     2		mov edx, offset damageTitle ;//prints character damage
 000043C1  E8 00000000 E   *	    call   WriteString
 000043C6  A1 00000089 R     2		mov eax, c1.damageMin
 000043CB  E8 00000000 E     2		call WriteDec
 000043D0  B8 0000002D	     2		mov eax,'-'
 000043D5  E8 00000000 E     2		call WriteChar
 000043DA  A1 0000008D R     2		mov eax, c1.damageMax
 000043DF  E8 00000000 E     2		call WriteDec
 000043E4  BA 0000073B R     2		mov edx, offset blank
 000043E9  E8 00000000 E   *	    call   WriteString
 000043EE  BA 000001F3 R     2		mov edx, offset combatOptionsMenuTitle ;//prints combat Options
 000043F3  E8 00000000 E   *	    call   WriteString
 000043F8  BA 00000208 R     2		mov edx,offset attackTitle
 000043FD  E8 00000000 E   *	    call   WriteString
 00004402  BA 00000214 R     2		mov edx,offset fleeTitle
 00004407  E8 00000000 E   *	    call   WriteString
 0000440C  E8 00000000 E     3		call ReadDec
 00004411  8B C8	     3		mov ecx, eax
 00004413  E8 00000000 E     2		call Clrscr
 00004418  83 F9 00	     2			cmp ecx, 0 ;//switch
 0000441B  74 07	     2			je attack??00A7
 0000441D  83 F9 01	     2			cmp ecx, 1
 00004420  74 5B	     2			je flee??00A7
 00004422  EB 60	     2			jmp end_switch??00A7
 00004424		     2			attack??00A7:
 00004424  A1 0000008D R     2				mov eax,c1.damageMax;//player attacks
 00004429  8B 1D 00000089 R  2				mov ebx,c1.damageMin
 0000442F  2B C3	     2				sub eax,ebx
 00004431  40		     2				inc eax
 00004432  E8 00000000 E     2				call RandomRange
 00004437  03 C3	     2				add eax,ebx
 00004439  29 05 000001A5 R  2				sub e1.hp,eax
 0000443F  BA 00000291 R     2				mov edx, offset youDealtTitle
 00004444  E8 00000000 E   *	    call   WriteString
 00004449  E8 00000000 E     2				call WriteDec
 0000444E  BA 00000287 R     2				mov edx, offset damageCombatTitle
 00004453  E8 00000000 E   *	    call   WriteString
 00004458  BA 00000714 R     2				mov edx, offset continueCommand
 0000445D  E8 00000000 E   *	    call   WriteString
 00004462  E8 00000000 E     3		call ReadDec
 00004467  8B C8	     3		mov ecx, eax
 00004469  83 3D 000001A5 R  2				cmp e1.hp,0 ;//check to see if enemy died
	   00
 00004470  7E 02	     2				jle enemy_dead??00A7
 00004472  EB 10	     2				jmp end_switch??00A7
 00004474		     2				enemy_dead??00A7:
 00004474  C6 05 000001BB R  2					mov enemyDefeated,1
	   01
 0000447B  EB 68	     2					jmp AND_FALSE_COMBAT??00A7
 0000447D		     2			flee??00A7:
 0000447D  C6 05 000001B9 R  2				mov escape,1
	   01
 00004484		     2			end_switch??00A7:
 00004484  A1 000001AD R     2				mov eax,e1.damageMax;//enemy attacks
 00004489  8B 1D 000001A9 R  2				mov ebx,e1.damageMin
 0000448F  2B C3	     2				sub eax,ebx
 00004491  40		     2				inc eax
 00004492  E8 00000000 E     2				call RandomRange
 00004497  03 C3	     2				add eax,ebx
 00004499  29 05 00000085 R  2				sub c1.hp,eax
 0000449F  BA 0000027B R     2				mov edx, offset youTookTitle
 000044A4  E8 00000000 E   *	    call   WriteString
 000044A9  E8 00000000 E     2				call WriteDec
 000044AE  BA 00000287 R     2				mov edx, offset damageCombatTitle
 000044B3  E8 00000000 E   *	    call   WriteString
 000044B8  BA 00000714 R     2				mov edx, offset continueCommand
 000044BD  E8 00000000 E   *	    call   WriteString
 000044C2  E8 00000000 E     3		call ReadDec
 000044C7  8B C8	     3		mov ecx, eax
 000044C9  E8 00000000 E     2				call Clrscr
 000044CE  83 3D 00000085 R  2				cmp c1.hp,0    ;// checking to see if character died
	   00
 000044D5  7E 02	     2				jle character_dead??00A7
 000044D7  EB 07	     2				jmp character_not_dead??00A7
 000044D9		     2				character_dead??00A7:
 000044D9  C6 05 000001BA R  2					mov playerDefeated,1
	   01
 000044E0		     2				character_not_dead??00A7:
 000044E0  E9 FFFFFDE5	     2			jmp WHILE_COMBAT??00A7;//default
 000044E5		     2	AND_FALSE_COMBAT??00A7:
 000044E5  80 3D 000001B9 R  2	cmp escape,0
	   00
 000044EC  74 0F	     2	je not_escape??00A7
 000044EE  BA 0000021E R     2	mov edx, offset escapeEvent;//will print if player fleed
 000044F3  E8 00000000 E   *	    call   WriteString
 000044F8  E9 000000C9	     2	jmp eventDetermined??00A7
 000044FD		     2	not_escape??00A7:
 000044FD  80 3D 000001BA R  2	cmp playerDefeated,0
	   00
 00004504  74 0F	     2	je not_playerDefeated??00A7
 00004506  BA 0000022D R     2	mov edx, offset playerDefeatedEvent;//will print if player was defeated
 0000450B  E8 00000000 E   *	    call   WriteString
 00004510  E9 000000B1	     2	jmp eventDetermined??00A7
 00004515		     2	not_playerDefeated??00A7:
 00004515  BA 00000241 R     2	mov edx,offset enemyDefeatedEvent;//will print if enemy was defeated
 0000451A  E8 00000000 E   *	    call   WriteString
 0000451F  B8 00000423 R     2	mov eax, offset t1 ;//adds axe to inventory
 00004524  BB 00000407 R     3	mov ebx, offset i1
 00004529		     3	notEmpty??00AB:
 00004529  83 3B 00	     3	cmp [ebx].item.itemCode,0
 0000452C  74 0B	     3	je isEmpty??00AB 
 0000452E  83 7B 10 00	     3	cmp [ebx].item.next,null
 00004532  74 1D	     3	je inventoryFull??00AB
 00004534  8B 5B 10	     3	mov ebx,[ebx].item.next
 00004537  EB F0	     3	jmp notEmpty??00AB
 00004539		     3	isEmpty??00AB:
 00004539  8B 08	     3	mov ecx, [eax].item.itemCode
 0000453B  89 0B	     3	mov [ebx].item.itemCode,ecx
 0000453D  8B 48 04	     3	mov ecx, [eax].item.buyValue
 00004540  89 4B 04	     3	mov [ebx].item.buyValue,ecx
 00004543  8B 48 08	     3	mov ecx, [eax].item.sellValue
 00004546  89 4B 08	     3	mov [ebx].item.sellValue,ecx
 00004549  8B 48 14	     3	mov ecx, [eax].item.combatValue
 0000454C  89 4B 14	     3	mov [ebx].item.combatValue,ecx
 0000454F  EB 19	     3	jmp end??00AB
 00004551		     3	inventoryFull??00AB:
 00004551  BA 000004D0 R     3	mov edx, offset inventoryFullTitle
 00004556  E8 00000000 E   *	    call   WriteString
 0000455B  B8 000005DC	     3	mov eax, 1500
 00004560  E8 00000000 E     3	call Delay
 00004565  E8 00000000 E     3	call clrscr
 0000456A		     3	end??00AB:
 0000456A  A1 00000061 R     2	mov eax, c1.level
 0000456F  B9 0000000A	     2	mov ecx,10
 00004574  F7 E1	     2	mul ecx
 00004576  E8 00000000 E     2	call RandomRange
 0000457B  8B 1D 0000006D R  2	mov ebx,c1.gold
 00004581  03 D8	     2	add ebx,eax
 00004583  89 1D 0000006D R  2	mov c1.gold,ebx
 00004589  BA 0000025A R     2	mov edx,offset youGotTitle
 0000458E  E8 00000000 E   *	    call   WriteString
 00004593  E8 00000000 E     2	call WriteDec
 00004598  BA 00000265 R     2	mov edx,offset goldRewardTitle
 0000459D  E8 00000000 E   *	    call   WriteString
 000045A2  A1 000001B5 R     2	mov eax,e1.expReward ;//rewarding player exp
 000045A7  01 05 00000065 R  2	add c1.exp,eax
 000045AD  BA 0000025A R     2	mov edx,offset youGotTitle
 000045B2  E8 00000000 E   *	    call   WriteString
 000045B7  E8 00000000 E     2	call WriteDec
 000045BC  BA 0000026D R     2	mov edx,offset expRewardTitle
 000045C1  E8 00000000 E   *	    call   WriteString
 000045C6		     2	eventDetermined??00A7:
 000045C6  BA 00000714 R     2	mov edx, offset continueCommand
 000045CB  E8 00000000 E   *	    call   WriteString
 000045D0  E8 00000000 E     3		call ReadDec
 000045D5  8B C8	     3		mov ecx, eax
 000045D7  E8 00000000 E     2	call Clrscr
 000045DC  61		     2	popAD
 000045DD  EB 00				jmp end_switch
 000045DF				end_switch:
 000045DF  E9 FFFFBA8E			jmp while_main ;//default


 000045E4				 endwhile_main:

					
					
					invoke ExitProcess, 0
 000045E4  6A 00	   *	    push   +000000000h
 000045E6  E8 00000000 E   *	    call   ExitProcess

 000045EB			main endp

				end
Microsoft (R) Macro Assembler Version 14.13.26129.0	    04/05/18 20:52:28
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

_get_input . . . . . . . . . . .	Proc
mAddItem . . . . . . . . . . . .	Proc
mBuyOptions  . . . . . . . . . .	Proc
mCombat  . . . . . . . . . . . .	Proc
mDequip  . . . . . . . . . . . .	Proc
mDisplayInventory  . . . . . . .	Proc
mDisplayItemInfo . . . . . . . .	Proc
mEquip . . . . . . . . . . . . .	Proc
mGetCharacterName  . . . . . . .	Proc
mGetItemName . . . . . . . . . .	Proc
mInitializeCharacter . . . . . .	Proc
mInitializeEnemy . . . . . . . .	Proc
mInventory . . . . . . . . . . .	Proc
mLevelUp . . . . . . . . . . . .	Proc
mPrintCharacterSheet . . . . . .	Proc
mRemoveItem  . . . . . . . . . .	Proc
mSellMode  . . . . . . . . . . .	Proc
mSellOptions . . . . . . . . . .	Proc
mShop  . . . . . . . . . . . . .	Proc
mTravel  . . . . . . . . . . . .	Proc
mitemOptions . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
character  . . . . . . . . . . .	 0000005C
  xPos . . . . . . . . . . . . .	 00000000	 DWord
  yPos . . . . . . . . . . . . .	 00000004	 DWord
  characterName  . . . . . . . .	 00000008	 Byte
  level  . . . . . . . . . . . .	 00000018	 DWord
  exp  . . . . . . . . . . . . .	 0000001C	 DWord
  expToNext  . . . . . . . . . .	 00000020	 DWord
  gold . . . . . . . . . . . . .	 00000024	 DWord
  brawn  . . . . . . . . . . . .	 00000028	 DWord
  agility  . . . . . . . . . . .	 0000002C	 DWord
  mind . . . . . . . . . . . . .	 00000030	 DWord
  fortune  . . . . . . . . . . .	 00000034	 DWord
  hpMax  . . . . . . . . . . . .	 00000038	 DWord
  hp . . . . . . . . . . . . . .	 0000003C	 DWord
  damageMin  . . . . . . . . . .	 00000040	 DWord
  damageMax  . . . . . . . . . .	 00000044	 DWord
  weaponCode . . . . . . . . . .	 00000048	 DWord
  weaponBuyValue . . . . . . . .	 0000004C	 DWord
  weaponSellValue  . . . . . . .	 00000050	 DWord
  weaponDamage . . . . . . . . .	 00000054	 DWord
  defence  . . . . . . . . . . .	 00000058	 DWord
enemy  . . . . . . . . . . . . .	 00000020
  enemyName  . . . . . . . . . .	 00000000	 Byte
  hpMax  . . . . . . . . . . . .	 00000008	 DWord
  hp . . . . . . . . . . . . . .	 0000000C	 DWord
  damageMin  . . . . . . . . . .	 00000010	 DWord
  damageMax  . . . . . . . . . .	 00000014	 DWord
  defence  . . . . . . . . . . .	 00000018	 DWord
  expReward  . . . . . . . . . .	 0000001C	 DWord
item . . . . . . . . . . . . . .	 0000001C
  itemCode . . . . . . . . . . .	 00000000	 DWord
  buyValue . . . . . . . . . . .	 00000004	 DWord
  sellValue  . . . . . . . . . .	 00000008	 DWord
  prev . . . . . . . . . . . . .	 0000000C	 DWord
  next . . . . . . . . . . . . .	 00000010	 DWord
  combatValue  . . . . . . . . .	 00000014	 DWord
  itemType . . . . . . . . . . .	 00000018	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000073F DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000045EB DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000045EB Public C
  while_main . . . . . . . . . .	L Near	 00000072 _TEXT	
  character_sheet  . . . . . . .	L Near	 00000124 _TEXT	
  item0??0001  . . . . . . . . .	L Near	 0000032A _TEXT	
  item1??0001  . . . . . . . . .	L Near	 00000331 _TEXT	
  item2??0001  . . . . . . . . .	L Near	 00000338 _TEXT	
  item3??0001  . . . . . . . . .	L Near	 0000033F _TEXT	
  default??0001  . . . . . . . .	L Near	 00000346 _TEXT	
  print??0001  . . . . . . . . .	L Near	 0000034B _TEXT	
  combat . . . . . . . . . . . .	L Near	 00000376 _TEXT	
  WHILE_COMBAT??0003 . . . . . .	L Near	 000003EC _TEXT	
  AND_COMBAT1??0003  . . . . . .	L Near	 000003FA _TEXT	
  AND_COMBAT2??0003  . . . . . .	L Near	 00000408 _TEXT	
  AND_COMBAT_TRUE??0003  . . . .	L Near	 00000416 _TEXT	
  attack??0003 . . . . . . . . .	L Near	 00000546 _TEXT	
  enemy_dead??0003 . . . . . . .	L Near	 00000596 _TEXT	
  flee??0003 . . . . . . . . . .	L Near	 0000059F _TEXT	
  end_switch??0003 . . . . . . .	L Near	 000005A6 _TEXT	
  character_dead??0003 . . . . .	L Near	 000005FB _TEXT	
  character_not_dead??0003 . . .	L Near	 00000602 _TEXT	
  AND_FALSE_COMBAT??0003 . . . .	L Near	 00000607 _TEXT	
  not_escape??0003 . . . . . . .	L Near	 0000061F _TEXT	
  not_playerDefeated??0003 . . .	L Near	 00000637 _TEXT	
  notEmpty??0007 . . . . . . . .	L Near	 0000064B _TEXT	
  isEmpty??0007  . . . . . . . .	L Near	 0000065B _TEXT	
  inventoryFull??0007  . . . . .	L Near	 00000673 _TEXT	
  end??0007  . . . . . . . . . .	L Near	 0000068C _TEXT	
  eventDetermined??0003  . . . .	L Near	 000006E8 _TEXT	
  levelUp  . . . . . . . . . . .	L Near	 00000704 _TEXT	
  invalidAttribute . . . . . . .	L Near	 000007B6 _TEXT	
  brawn  . . . . . . . . . . . .	L Near	 000007CC _TEXT	
  agility  . . . . . . . . . . .	L Near	 000007D4 _TEXT	
  mind . . . . . . . . . . . . .	L Near	 000007DC _TEXT	
  fortune  . . . . . . . . . . .	L Near	 000007E4 _TEXT	
  validAttribute . . . . . . . .	L Near	 000007EC _TEXT	
  notEnough  . . . . . . . . . .	L Near	 00000807 _TEXT	
  leveledUp  . . . . . . . . . .	L Near	 0000081B _TEXT	
  inventory  . . . . . . . . . .	L Near	 00000826 _TEXT	
  DO1??000A  . . . . . . . . . .	L Near	 00000838 _TEXT	
  item0??000B  . . . . . . . . .	L Near	 00000861 _TEXT	
  item1??000B  . . . . . . . . .	L Near	 00000868 _TEXT	
  item2??000B  . . . . . . . . .	L Near	 0000086F _TEXT	
  item3??000B  . . . . . . . . .	L Near	 00000876 _TEXT	
  default??000B  . . . . . . . .	L Near	 0000087D _TEXT	
  print??000B  . . . . . . . . .	L Near	 00000882 _TEXT	
  item0  . . . . . . . . . . . .	L Near	 000008F8 _TEXT	
  exit??000D . . . . . . . . . .	L Near	 0000094C _TEXT	
  removeItem??000D . . . . . . .	L Near	 00000951 _TEXT	
  equipItem??000D  . . . . . . .	L Near	 0000096A _TEXT	
  notEmpty??0010 . . . . . . . .	L Near	 0000098B _TEXT	
  isEmpty??0010  . . . . . . . .	L Near	 0000099F _TEXT	
  inventoryFull??0010  . . . . .	L Near	 00000A35 _TEXT	
  nothingEquipped??0010  . . . .	L Near	 00000A4E _TEXT	
  notEquipped??000F  . . . . . .	L Near	 00000A50 _TEXT	
  infoItem??000D . . . . . . . .	L Near	 00000AD6 _TEXT	
  endCase??000D  . . . . . . . .	L Near	 00000B43 _TEXT	
  item1  . . . . . . . . . . . .	L Near	 00000B48 _TEXT	
  exit??0011 . . . . . . . . . .	L Near	 00000B9C _TEXT	
  removeItem??0011 . . . . . . .	L Near	 00000BA1 _TEXT	
  equipItem??0011  . . . . . . .	L Near	 00000BBA _TEXT	
  notEmpty??0014 . . . . . . . .	L Near	 00000BDB _TEXT	
  isEmpty??0014  . . . . . . . .	L Near	 00000BEF _TEXT	
  inventoryFull??0014  . . . . .	L Near	 00000C85 _TEXT	
  nothingEquipped??0014  . . . .	L Near	 00000C9E _TEXT	
  notEquipped??0013  . . . . . .	L Near	 00000CA0 _TEXT	
  infoItem??0011 . . . . . . . .	L Near	 00000D26 _TEXT	
  endCase??0011  . . . . . . . .	L Near	 00000D93 _TEXT	
  item2  . . . . . . . . . . . .	L Near	 00000D98 _TEXT	
  exit??0015 . . . . . . . . . .	L Near	 00000DEC _TEXT	
  removeItem??0015 . . . . . . .	L Near	 00000DF1 _TEXT	
  equipItem??0015  . . . . . . .	L Near	 00000E0A _TEXT	
  notEmpty??0018 . . . . . . . .	L Near	 00000E2B _TEXT	
  isEmpty??0018  . . . . . . . .	L Near	 00000E3F _TEXT	
  inventoryFull??0018  . . . . .	L Near	 00000ED5 _TEXT	
  nothingEquipped??0018  . . . .	L Near	 00000EEE _TEXT	
  notEquipped??0017  . . . . . .	L Near	 00000EF0 _TEXT	
  infoItem??0015 . . . . . . . .	L Near	 00000F76 _TEXT	
  endCase??0015  . . . . . . . .	L Near	 00000FE3 _TEXT	
  item3  . . . . . . . . . . . .	L Near	 00000FE8 _TEXT	
  exit??0019 . . . . . . . . . .	L Near	 0000103C _TEXT	
  removeItem??0019 . . . . . . .	L Near	 00001041 _TEXT	
  equipItem??0019  . . . . . . .	L Near	 0000105A _TEXT	
  notEmpty??001C . . . . . . . .	L Near	 0000107B _TEXT	
  isEmpty??001C  . . . . . . . .	L Near	 0000108F _TEXT	
  inventoryFull??001C  . . . . .	L Near	 00001125 _TEXT	
  nothingEquipped??001C  . . . .	L Near	 0000113E _TEXT	
  notEquipped??001B  . . . . . .	L Near	 00001140 _TEXT	
  infoItem??0019 . . . . . . . .	L Near	 000011C6 _TEXT	
  endCase??0019  . . . . . . . .	L Near	 00001233 _TEXT	
  item4  . . . . . . . . . . . .	L Near	 00001238 _TEXT	
  exit??001D . . . . . . . . . .	L Near	 0000128C _TEXT	
  removeItem??001D . . . . . . .	L Near	 00001291 _TEXT	
  equipItem??001D  . . . . . . .	L Near	 000012AA _TEXT	
  notEmpty??0020 . . . . . . . .	L Near	 000012CB _TEXT	
  isEmpty??0020  . . . . . . . .	L Near	 000012DF _TEXT	
  inventoryFull??0020  . . . . .	L Near	 00001375 _TEXT	
  nothingEquipped??0020  . . . .	L Near	 0000138E _TEXT	
  notEquipped??001F  . . . . . .	L Near	 00001390 _TEXT	
  infoItem??001D . . . . . . . .	L Near	 00001416 _TEXT	
  endCase??001D  . . . . . . . .	L Near	 00001483 _TEXT	
  item5  . . . . . . . . . . . .	L Near	 00001488 _TEXT	
  exit??0021 . . . . . . . . . .	L Near	 000014DC _TEXT	
  removeItem??0021 . . . . . . .	L Near	 000014E1 _TEXT	
  equipItem??0021  . . . . . . .	L Near	 000014FA _TEXT	
  notEmpty??0024 . . . . . . . .	L Near	 0000151B _TEXT	
  isEmpty??0024  . . . . . . . .	L Near	 0000152F _TEXT	
  inventoryFull??0024  . . . . .	L Near	 000015C5 _TEXT	
  nothingEquipped??0024  . . . .	L Near	 000015DE _TEXT	
  notEquipped??0023  . . . . . .	L Near	 000015E0 _TEXT	
  infoItem??0021 . . . . . . . .	L Near	 00001666 _TEXT	
  endCase??0021  . . . . . . . .	L Near	 000016D3 _TEXT	
  item6  . . . . . . . . . . . .	L Near	 000016D8 _TEXT	
  exit??0025 . . . . . . . . . .	L Near	 0000172C _TEXT	
  removeItem??0025 . . . . . . .	L Near	 00001731 _TEXT	
  equipItem??0025  . . . . . . .	L Near	 0000174A _TEXT	
  notEmpty??0028 . . . . . . . .	L Near	 0000176B _TEXT	
  isEmpty??0028  . . . . . . . .	L Near	 0000177F _TEXT	
  inventoryFull??0028  . . . . .	L Near	 00001815 _TEXT	
  nothingEquipped??0028  . . . .	L Near	 0000182E _TEXT	
  notEquipped??0027  . . . . . .	L Near	 00001830 _TEXT	
  infoItem??0025 . . . . . . . .	L Near	 000018B6 _TEXT	
  endCase??0025  . . . . . . . .	L Near	 00001923 _TEXT	
  item7  . . . . . . . . . . . .	L Near	 00001928 _TEXT	
  exit??0029 . . . . . . . . . .	L Near	 0000197C _TEXT	
  removeItem??0029 . . . . . . .	L Near	 00001981 _TEXT	
  equipItem??0029  . . . . . . .	L Near	 0000199A _TEXT	
  notEmpty??002C . . . . . . . .	L Near	 000019BB _TEXT	
  isEmpty??002C  . . . . . . . .	L Near	 000019CF _TEXT	
  inventoryFull??002C  . . . . .	L Near	 00001A65 _TEXT	
  nothingEquipped??002C  . . . .	L Near	 00001A7E _TEXT	
  notEquipped??002B  . . . . . .	L Near	 00001A80 _TEXT	
  infoItem??0029 . . . . . . . .	L Near	 00001B06 _TEXT	
  endCase??0029  . . . . . . . .	L Near	 00001B73 _TEXT	
  item8  . . . . . . . . . . . .	L Near	 00001B78 _TEXT	
  exit??002D . . . . . . . . . .	L Near	 00001BCC _TEXT	
  removeItem??002D . . . . . . .	L Near	 00001BD1 _TEXT	
  equipItem??002D  . . . . . . .	L Near	 00001BEA _TEXT	
  notEmpty??0030 . . . . . . . .	L Near	 00001C0B _TEXT	
  isEmpty??0030  . . . . . . . .	L Near	 00001C1F _TEXT	
  inventoryFull??0030  . . . . .	L Near	 00001CB5 _TEXT	
  nothingEquipped??0030  . . . .	L Near	 00001CCE _TEXT	
  notEquipped??002F  . . . . . .	L Near	 00001CD0 _TEXT	
  infoItem??002D . . . . . . . .	L Near	 00001D56 _TEXT	
  endCase??002D  . . . . . . . .	L Near	 00001DC3 _TEXT	
  item9  . . . . . . . . . . . .	L Near	 00001DC8 _TEXT	
  exit??0031 . . . . . . . . . .	L Near	 00001E1C _TEXT	
  removeItem??0031 . . . . . . .	L Near	 00001E21 _TEXT	
  equipItem??0031  . . . . . . .	L Near	 00001E3A _TEXT	
  notEmpty??0034 . . . . . . . .	L Near	 00001E5B _TEXT	
  isEmpty??0034  . . . . . . . .	L Near	 00001E6F _TEXT	
  inventoryFull??0034  . . . . .	L Near	 00001F05 _TEXT	
  nothingEquipped??0034  . . . .	L Near	 00001F1E _TEXT	
  notEquipped??0033  . . . . . .	L Near	 00001F20 _TEXT	
  infoItem??0031 . . . . . . . .	L Near	 00001FA6 _TEXT	
  endCase??0031  . . . . . . . .	L Near	 00002013 _TEXT	
  endInventory . . . . . . . . .	L Near	 00002015 _TEXT	
  dequip . . . . . . . . . . . .	L Near	 0000201F _TEXT	
  notEmpty??0035 . . . . . . . .	L Near	 00002031 _TEXT	
  isEmpty??0035  . . . . . . . .	L Near	 00002045 _TEXT	
  inventoryFull??0035  . . . . .	L Near	 000020DB _TEXT	
  nothingEquipped??0035  . . . .	L Near	 000020F4 _TEXT	
  shop . . . . . . . . . . . . .	L Near	 000020F9 _TEXT	
  stillShopping??0036  . . . . .	L Near	 00002128 _TEXT	
  DO1??0038  . . . . . . . . . .	L Near	 00002144 _TEXT	
  item0??0039  . . . . . . . . .	L Near	 0000216D _TEXT	
  item1??0039  . . . . . . . . .	L Near	 00002174 _TEXT	
  item2??0039  . . . . . . . . .	L Near	 0000217B _TEXT	
  item3??0039  . . . . . . . . .	L Near	 00002182 _TEXT	
  default??0039  . . . . . . . .	L Near	 00002189 _TEXT	
  print??0039  . . . . . . . . .	L Near	 0000218E _TEXT	
  item0??0036  . . . . . . . . .	L Near	 00002228 _TEXT	
  exit??003B . . . . . . . . . .	L Near	 00002268 _TEXT	
  buyItem??003B  . . . . . . . .	L Near	 0000226D _TEXT	
  notEmpty??003D . . . . . . . .	L Near	 00002289 _TEXT	
  isEmpty??003D  . . . . . . . .	L Near	 00002299 _TEXT	
  inventoryFull??003D  . . . . .	L Near	 000022B1 _TEXT	
  end??003D  . . . . . . . . . .	L Near	 000022CA _TEXT	
  notEnoughGold??003B  . . . . .	L Near	 000022E5 _TEXT	
  infoItem??003B . . . . . . . .	L Near	 00002300 _TEXT	
  endCase??003B  . . . . . . . .	L Near	 0000236D _TEXT	
  item1??0036  . . . . . . . . .	L Near	 00002372 _TEXT	
  exit??003E . . . . . . . . . .	L Near	 000023B2 _TEXT	
  buyItem??003E  . . . . . . . .	L Near	 000023B7 _TEXT	
  notEmpty??0040 . . . . . . . .	L Near	 000023D3 _TEXT	
  isEmpty??0040  . . . . . . . .	L Near	 000023E3 _TEXT	
  inventoryFull??0040  . . . . .	L Near	 000023FB _TEXT	
  end??0040  . . . . . . . . . .	L Near	 00002414 _TEXT	
  notEnoughGold??003E  . . . . .	L Near	 0000242F _TEXT	
  infoItem??003E . . . . . . . .	L Near	 0000244A _TEXT	
  endCase??003E  . . . . . . . .	L Near	 000024B7 _TEXT	
  item2??0036  . . . . . . . . .	L Near	 000024BC _TEXT	
  exit??0041 . . . . . . . . . .	L Near	 000024FC _TEXT	
  buyItem??0041  . . . . . . . .	L Near	 00002501 _TEXT	
  notEmpty??0043 . . . . . . . .	L Near	 0000251D _TEXT	
  isEmpty??0043  . . . . . . . .	L Near	 0000252D _TEXT	
  inventoryFull??0043  . . . . .	L Near	 00002545 _TEXT	
  end??0043  . . . . . . . . . .	L Near	 0000255E _TEXT	
  notEnoughGold??0041  . . . . .	L Near	 00002579 _TEXT	
  infoItem??0041 . . . . . . . .	L Near	 00002594 _TEXT	
  endCase??0041  . . . . . . . .	L Near	 00002601 _TEXT	
  item3??0036  . . . . . . . . .	L Near	 00002606 _TEXT	
  exit??0044 . . . . . . . . . .	L Near	 00002646 _TEXT	
  buyItem??0044  . . . . . . . .	L Near	 0000264B _TEXT	
  notEmpty??0046 . . . . . . . .	L Near	 00002667 _TEXT	
  isEmpty??0046  . . . . . . . .	L Near	 00002677 _TEXT	
  inventoryFull??0046  . . . . .	L Near	 0000268F _TEXT	
  end??0046  . . . . . . . . . .	L Near	 000026A8 _TEXT	
  notEnoughGold??0044  . . . . .	L Near	 000026C3 _TEXT	
  infoItem??0044 . . . . . . . .	L Near	 000026DE _TEXT	
  endCase??0044  . . . . . . . .	L Near	 0000274B _TEXT	
  item4??0036  . . . . . . . . .	L Near	 00002750 _TEXT	
  exit??0047 . . . . . . . . . .	L Near	 00002790 _TEXT	
  buyItem??0047  . . . . . . . .	L Near	 00002795 _TEXT	
  notEmpty??0049 . . . . . . . .	L Near	 000027B1 _TEXT	
  isEmpty??0049  . . . . . . . .	L Near	 000027C1 _TEXT	
  inventoryFull??0049  . . . . .	L Near	 000027D9 _TEXT	
  end??0049  . . . . . . . . . .	L Near	 000027F2 _TEXT	
  notEnoughGold??0047  . . . . .	L Near	 0000280D _TEXT	
  infoItem??0047 . . . . . . . .	L Near	 00002828 _TEXT	
  endCase??0047  . . . . . . . .	L Near	 00002895 _TEXT	
  item5??0036  . . . . . . . . .	L Near	 0000289A _TEXT	
  exit??004A . . . . . . . . . .	L Near	 000028DA _TEXT	
  buyItem??004A  . . . . . . . .	L Near	 000028DF _TEXT	
  notEmpty??004C . . . . . . . .	L Near	 000028FB _TEXT	
  isEmpty??004C  . . . . . . . .	L Near	 0000290B _TEXT	
  inventoryFull??004C  . . . . .	L Near	 00002923 _TEXT	
  end??004C  . . . . . . . . . .	L Near	 0000293C _TEXT	
  notEnoughGold??004A  . . . . .	L Near	 00002957 _TEXT	
  infoItem??004A . . . . . . . .	L Near	 00002972 _TEXT	
  endCase??004A  . . . . . . . .	L Near	 000029DF _TEXT	
  item6??0036  . . . . . . . . .	L Near	 000029E4 _TEXT	
  exit??004D . . . . . . . . . .	L Near	 00002A24 _TEXT	
  buyItem??004D  . . . . . . . .	L Near	 00002A29 _TEXT	
  notEmpty??004F . . . . . . . .	L Near	 00002A45 _TEXT	
  isEmpty??004F  . . . . . . . .	L Near	 00002A55 _TEXT	
  inventoryFull??004F  . . . . .	L Near	 00002A6D _TEXT	
  end??004F  . . . . . . . . . .	L Near	 00002A86 _TEXT	
  notEnoughGold??004D  . . . . .	L Near	 00002AA1 _TEXT	
  infoItem??004D . . . . . . . .	L Near	 00002ABC _TEXT	
  endCase??004D  . . . . . . . .	L Near	 00002B29 _TEXT	
  item7??0036  . . . . . . . . .	L Near	 00002B2E _TEXT	
  exit??0050 . . . . . . . . . .	L Near	 00002B6E _TEXT	
  buyItem??0050  . . . . . . . .	L Near	 00002B73 _TEXT	
  notEmpty??0052 . . . . . . . .	L Near	 00002B8F _TEXT	
  isEmpty??0052  . . . . . . . .	L Near	 00002B9F _TEXT	
  inventoryFull??0052  . . . . .	L Near	 00002BB7 _TEXT	
  end??0052  . . . . . . . . . .	L Near	 00002BD0 _TEXT	
  notEnoughGold??0050  . . . . .	L Near	 00002BEB _TEXT	
  infoItem??0050 . . . . . . . .	L Near	 00002C06 _TEXT	
  endCase??0050  . . . . . . . .	L Near	 00002C73 _TEXT	
  item8??0036  . . . . . . . . .	L Near	 00002C78 _TEXT	
  exit??0053 . . . . . . . . . .	L Near	 00002CB8 _TEXT	
  buyItem??0053  . . . . . . . .	L Near	 00002CBD _TEXT	
  notEmpty??0055 . . . . . . . .	L Near	 00002CD9 _TEXT	
  isEmpty??0055  . . . . . . . .	L Near	 00002CE9 _TEXT	
  inventoryFull??0055  . . . . .	L Near	 00002D01 _TEXT	
  end??0055  . . . . . . . . . .	L Near	 00002D1A _TEXT	
  notEnoughGold??0053  . . . . .	L Near	 00002D35 _TEXT	
  infoItem??0053 . . . . . . . .	L Near	 00002D50 _TEXT	
  endCase??0053  . . . . . . . .	L Near	 00002DBD _TEXT	
  item9??0036  . . . . . . . . .	L Near	 00002DC2 _TEXT	
  sellMode??0036 . . . . . . . .	L Near	 00002DC7 _TEXT	
  stillShopping??0056  . . . . .	L Near	 00002DCC _TEXT	
  DO1??0057  . . . . . . . . . .	L Near	 00002DD4 _TEXT	
  item0??0058  . . . . . . . . .	L Near	 00002DFD _TEXT	
  item1??0058  . . . . . . . . .	L Near	 00002E04 _TEXT	
  item2??0058  . . . . . . . . .	L Near	 00002E0B _TEXT	
  item3??0058  . . . . . . . . .	L Near	 00002E12 _TEXT	
  default??0058  . . . . . . . .	L Near	 00002E19 _TEXT	
  print??0058  . . . . . . . . .	L Near	 00002E1E _TEXT	
  item0??0056  . . . . . . . . .	L Near	 00002EA7 _TEXT	
  doSell??005A . . . . . . . . .	L Near	 00002EC7 _TEXT	
  item1??0056  . . . . . . . . .	L Near	 00002EF1 _TEXT	
  doSell??005C . . . . . . . . .	L Near	 00002F11 _TEXT	
  item2??0056  . . . . . . . . .	L Near	 00002F3B _TEXT	
  doSell??005E . . . . . . . . .	L Near	 00002F5B _TEXT	
  item3??0056  . . . . . . . . .	L Near	 00002F85 _TEXT	
  doSell??0060 . . . . . . . . .	L Near	 00002FA5 _TEXT	
  item4??0056  . . . . . . . . .	L Near	 00002FCF _TEXT	
  doSell??0062 . . . . . . . . .	L Near	 00002FEF _TEXT	
  item5??0056  . . . . . . . . .	L Near	 00003019 _TEXT	
  doSell??0064 . . . . . . . . .	L Near	 00003039 _TEXT	
  item6??0056  . . . . . . . . .	L Near	 00003063 _TEXT	
  doSell??0066 . . . . . . . . .	L Near	 00003083 _TEXT	
  item7??0056  . . . . . . . . .	L Near	 000030AD _TEXT	
  doSell??0068 . . . . . . . . .	L Near	 000030CD _TEXT	
  item8??0056  . . . . . . . . .	L Near	 000030F7 _TEXT	
  doSell??006A . . . . . . . . .	L Near	 00003117 _TEXT	
  item9??0056  . . . . . . . . .	L Near	 00003141 _TEXT	
  doSell??006C . . . . . . . . .	L Near	 00003161 _TEXT	
  switchToBuyMode??0056  . . . .	L Near	 0000318B _TEXT	
  exitShop??0036 . . . . . . . .	L Near	 00003195 _TEXT	
  travel . . . . . . . . . . . .	L Near	 0000319F _TEXT	
  shop??006E . . . . . . . . . .	L Near	 000031B3 _TEXT	
  stillShopping??006F  . . . . .	L Near	 000031E2 _TEXT	
  DO1??0071  . . . . . . . . . .	L Near	 000031FE _TEXT	
  item0??0072  . . . . . . . . .	L Near	 00003227 _TEXT	
  item1??0072  . . . . . . . . .	L Near	 0000322E _TEXT	
  item2??0072  . . . . . . . . .	L Near	 00003235 _TEXT	
  item3??0072  . . . . . . . . .	L Near	 0000323C _TEXT	
  default??0072  . . . . . . . .	L Near	 00003243 _TEXT	
  print??0072  . . . . . . . . .	L Near	 00003248 _TEXT	
  item0??006F  . . . . . . . . .	L Near	 000032E2 _TEXT	
  exit??0074 . . . . . . . . . .	L Near	 00003322 _TEXT	
  buyItem??0074  . . . . . . . .	L Near	 00003327 _TEXT	
  notEmpty??0076 . . . . . . . .	L Near	 00003343 _TEXT	
  isEmpty??0076  . . . . . . . .	L Near	 00003353 _TEXT	
  inventoryFull??0076  . . . . .	L Near	 0000336B _TEXT	
  end??0076  . . . . . . . . . .	L Near	 00003384 _TEXT	
  notEnoughGold??0074  . . . . .	L Near	 0000339F _TEXT	
  infoItem??0074 . . . . . . . .	L Near	 000033BA _TEXT	
  endCase??0074  . . . . . . . .	L Near	 00003427 _TEXT	
  item1??006F  . . . . . . . . .	L Near	 0000342C _TEXT	
  exit??0077 . . . . . . . . . .	L Near	 0000346C _TEXT	
  buyItem??0077  . . . . . . . .	L Near	 00003471 _TEXT	
  notEmpty??0079 . . . . . . . .	L Near	 0000348D _TEXT	
  isEmpty??0079  . . . . . . . .	L Near	 0000349D _TEXT	
  inventoryFull??0079  . . . . .	L Near	 000034B5 _TEXT	
  end??0079  . . . . . . . . . .	L Near	 000034CE _TEXT	
  notEnoughGold??0077  . . . . .	L Near	 000034E9 _TEXT	
  infoItem??0077 . . . . . . . .	L Near	 00003504 _TEXT	
  endCase??0077  . . . . . . . .	L Near	 00003571 _TEXT	
  item2??006F  . . . . . . . . .	L Near	 00003576 _TEXT	
  exit??007A . . . . . . . . . .	L Near	 000035B6 _TEXT	
  buyItem??007A  . . . . . . . .	L Near	 000035BB _TEXT	
  notEmpty??007C . . . . . . . .	L Near	 000035D7 _TEXT	
  isEmpty??007C  . . . . . . . .	L Near	 000035E7 _TEXT	
  inventoryFull??007C  . . . . .	L Near	 000035FF _TEXT	
  end??007C  . . . . . . . . . .	L Near	 00003618 _TEXT	
  notEnoughGold??007A  . . . . .	L Near	 00003633 _TEXT	
  infoItem??007A . . . . . . . .	L Near	 0000364E _TEXT	
  endCase??007A  . . . . . . . .	L Near	 000036BB _TEXT	
  item3??006F  . . . . . . . . .	L Near	 000036C0 _TEXT	
  exit??007D . . . . . . . . . .	L Near	 00003700 _TEXT	
  buyItem??007D  . . . . . . . .	L Near	 00003705 _TEXT	
  notEmpty??007F . . . . . . . .	L Near	 00003721 _TEXT	
  isEmpty??007F  . . . . . . . .	L Near	 00003731 _TEXT	
  inventoryFull??007F  . . . . .	L Near	 00003749 _TEXT	
  end??007F  . . . . . . . . . .	L Near	 00003762 _TEXT	
  notEnoughGold??007D  . . . . .	L Near	 0000377D _TEXT	
  infoItem??007D . . . . . . . .	L Near	 00003798 _TEXT	
  endCase??007D  . . . . . . . .	L Near	 00003805 _TEXT	
  item4??006F  . . . . . . . . .	L Near	 0000380A _TEXT	
  exit??0080 . . . . . . . . . .	L Near	 0000384A _TEXT	
  buyItem??0080  . . . . . . . .	L Near	 0000384F _TEXT	
  notEmpty??0082 . . . . . . . .	L Near	 0000386B _TEXT	
  isEmpty??0082  . . . . . . . .	L Near	 0000387B _TEXT	
  inventoryFull??0082  . . . . .	L Near	 00003893 _TEXT	
  end??0082  . . . . . . . . . .	L Near	 000038AC _TEXT	
  notEnoughGold??0080  . . . . .	L Near	 000038C7 _TEXT	
  infoItem??0080 . . . . . . . .	L Near	 000038E2 _TEXT	
  endCase??0080  . . . . . . . .	L Near	 0000394F _TEXT	
  item5??006F  . . . . . . . . .	L Near	 00003954 _TEXT	
  exit??0083 . . . . . . . . . .	L Near	 00003994 _TEXT	
  buyItem??0083  . . . . . . . .	L Near	 00003999 _TEXT	
  notEmpty??0085 . . . . . . . .	L Near	 000039B5 _TEXT	
  isEmpty??0085  . . . . . . . .	L Near	 000039C5 _TEXT	
  inventoryFull??0085  . . . . .	L Near	 000039DD _TEXT	
  end??0085  . . . . . . . . . .	L Near	 000039F6 _TEXT	
  notEnoughGold??0083  . . . . .	L Near	 00003A11 _TEXT	
  infoItem??0083 . . . . . . . .	L Near	 00003A2C _TEXT	
  endCase??0083  . . . . . . . .	L Near	 00003A99 _TEXT	
  item6??006F  . . . . . . . . .	L Near	 00003A9E _TEXT	
  exit??0086 . . . . . . . . . .	L Near	 00003ADE _TEXT	
  buyItem??0086  . . . . . . . .	L Near	 00003AE3 _TEXT	
  notEmpty??0088 . . . . . . . .	L Near	 00003AFF _TEXT	
  isEmpty??0088  . . . . . . . .	L Near	 00003B0F _TEXT	
  inventoryFull??0088  . . . . .	L Near	 00003B27 _TEXT	
  end??0088  . . . . . . . . . .	L Near	 00003B40 _TEXT	
  notEnoughGold??0086  . . . . .	L Near	 00003B5B _TEXT	
  infoItem??0086 . . . . . . . .	L Near	 00003B76 _TEXT	
  endCase??0086  . . . . . . . .	L Near	 00003BE3 _TEXT	
  item7??006F  . . . . . . . . .	L Near	 00003BE8 _TEXT	
  exit??0089 . . . . . . . . . .	L Near	 00003C28 _TEXT	
  buyItem??0089  . . . . . . . .	L Near	 00003C2D _TEXT	
  notEmpty??008B . . . . . . . .	L Near	 00003C49 _TEXT	
  isEmpty??008B  . . . . . . . .	L Near	 00003C59 _TEXT	
  inventoryFull??008B  . . . . .	L Near	 00003C71 _TEXT	
  end??008B  . . . . . . . . . .	L Near	 00003C8A _TEXT	
  notEnoughGold??0089  . . . . .	L Near	 00003CA5 _TEXT	
  infoItem??0089 . . . . . . . .	L Near	 00003CC0 _TEXT	
  endCase??0089  . . . . . . . .	L Near	 00003D2D _TEXT	
  item8??006F  . . . . . . . . .	L Near	 00003D32 _TEXT	
  exit??008C . . . . . . . . . .	L Near	 00003D72 _TEXT	
  buyItem??008C  . . . . . . . .	L Near	 00003D77 _TEXT	
  notEmpty??008E . . . . . . . .	L Near	 00003D93 _TEXT	
  isEmpty??008E  . . . . . . . .	L Near	 00003DA3 _TEXT	
  inventoryFull??008E  . . . . .	L Near	 00003DBB _TEXT	
  end??008E  . . . . . . . . . .	L Near	 00003DD4 _TEXT	
  notEnoughGold??008C  . . . . .	L Near	 00003DEF _TEXT	
  infoItem??008C . . . . . . . .	L Near	 00003E0A _TEXT	
  endCase??008C  . . . . . . . .	L Near	 00003E77 _TEXT	
  item9??006F  . . . . . . . . .	L Near	 00003E7C _TEXT	
  sellMode??006F . . . . . . . .	L Near	 00003E81 _TEXT	
  stillShopping??008F  . . . . .	L Near	 00003E86 _TEXT	
  DO1??0090  . . . . . . . . . .	L Near	 00003E8E _TEXT	
  item0??0091  . . . . . . . . .	L Near	 00003EB7 _TEXT	
  item1??0091  . . . . . . . . .	L Near	 00003EBE _TEXT	
  item2??0091  . . . . . . . . .	L Near	 00003EC5 _TEXT	
  item3??0091  . . . . . . . . .	L Near	 00003ECC _TEXT	
  default??0091  . . . . . . . .	L Near	 00003ED3 _TEXT	
  print??0091  . . . . . . . . .	L Near	 00003ED8 _TEXT	
  item0??008F  . . . . . . . . .	L Near	 00003F61 _TEXT	
  doSell??0093 . . . . . . . . .	L Near	 00003F81 _TEXT	
  item1??008F  . . . . . . . . .	L Near	 00003FAB _TEXT	
  doSell??0095 . . . . . . . . .	L Near	 00003FCB _TEXT	
  item2??008F  . . . . . . . . .	L Near	 00003FF5 _TEXT	
  doSell??0097 . . . . . . . . .	L Near	 00004015 _TEXT	
  item3??008F  . . . . . . . . .	L Near	 0000403F _TEXT	
  doSell??0099 . . . . . . . . .	L Near	 0000405F _TEXT	
  item4??008F  . . . . . . . . .	L Near	 00004089 _TEXT	
  doSell??009B . . . . . . . . .	L Near	 000040A9 _TEXT	
  item5??008F  . . . . . . . . .	L Near	 000040D3 _TEXT	
  doSell??009D . . . . . . . . .	L Near	 000040F3 _TEXT	
  item6??008F  . . . . . . . . .	L Near	 0000411D _TEXT	
  doSell??009F . . . . . . . . .	L Near	 0000413D _TEXT	
  item7??008F  . . . . . . . . .	L Near	 00004167 _TEXT	
  doSell??00A1 . . . . . . . . .	L Near	 00004187 _TEXT	
  item8??008F  . . . . . . . . .	L Near	 000041B1 _TEXT	
  doSell??00A3 . . . . . . . . .	L Near	 000041D1 _TEXT	
  item9??008F  . . . . . . . . .	L Near	 000041FB _TEXT	
  doSell??00A5 . . . . . . . . .	L Near	 0000421B _TEXT	
  switchToBuyMode??008F  . . . .	L Near	 00004245 _TEXT	
  exitShop??006F . . . . . . . .	L Near	 0000424F _TEXT	
  combat??006E . . . . . . . . .	L Near	 00004254 _TEXT	
  WHILE_COMBAT??00A7 . . . . . .	L Near	 000042CA _TEXT	
  AND_COMBAT1??00A7  . . . . . .	L Near	 000042D8 _TEXT	
  AND_COMBAT2??00A7  . . . . . .	L Near	 000042E6 _TEXT	
  AND_COMBAT_TRUE??00A7  . . . .	L Near	 000042F4 _TEXT	
  attack??00A7 . . . . . . . . .	L Near	 00004424 _TEXT	
  enemy_dead??00A7 . . . . . . .	L Near	 00004474 _TEXT	
  flee??00A7 . . . . . . . . . .	L Near	 0000447D _TEXT	
  end_switch??00A7 . . . . . . .	L Near	 00004484 _TEXT	
  character_dead??00A7 . . . . .	L Near	 000044D9 _TEXT	
  character_not_dead??00A7 . . .	L Near	 000044E0 _TEXT	
  AND_FALSE_COMBAT??00A7 . . . .	L Near	 000044E5 _TEXT	
  not_escape??00A7 . . . . . . .	L Near	 000044FD _TEXT	
  not_playerDefeated??00A7 . . .	L Near	 00004515 _TEXT	
  notEmpty??00AB . . . . . . . .	L Near	 00004529 _TEXT	
  isEmpty??00AB  . . . . . . . .	L Near	 00004539 _TEXT	
  inventoryFull??00AB  . . . . .	L Near	 00004551 _TEXT	
  end??00AB  . . . . . . . . . .	L Near	 0000456A _TEXT	
  eventDetermined??00A7  . . . .	L Near	 000045C6 _TEXT	
  end_switch . . . . . . . . . .	L Near	 000045DF _TEXT	
  endwhile_main  . . . . . . . .	L Near	 000045E4 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
save_character . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
test_print_num . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
C1 . . . . . . . . . . . . . . .	character  00000049 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
agilityAttribute . . . . . . . .	Byte	 000002EA _DATA	
agilityTitle . . . . . . . . . .	Byte	 00000112 _DATA	
attackTitle  . . . . . . . . . .	Byte	 00000208 _DATA	
attributeSelection . . . . . . .	Byte	 000002C8 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 0000073B _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brawnAttribute . . . . . . . . .	Byte	 000002E0 _DATA	
brawnTitle . . . . . . . . . . .	Byte	 00000109 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
buyModeTitle . . . . . . . . . .	Byte	 0000061D _DATA	
buyTitle . . . . . . . . . . . .	Byte	 00000635 _DATA	
characterSheetTitle  . . . . . .	Byte	 000000A5 _DATA	
characterSheet . . . . . . . . .	Byte	 000006BB _DATA	
combatAttributesTitle  . . . . .	Byte	 00000130 _DATA	
combatMenuTitle  . . . . . . . .	Byte	 000001BC _DATA	
combatOptionsMenuTitle . . . . .	Byte	 000001F3 _DATA	
combatTitle  . . . . . . . . . .	Byte	 000006CF _DATA	
command1 . . . . . . . . . . . .	Byte	 0000016D _DATA	
continueCommand  . . . . . . . .	Byte	 00000714 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
damageCombatTitle  . . . . . . .	Byte	 00000287 _DATA	
damageTitle  . . . . . . . . . .	Byte	 0000014E _DATA	
defaultName  . . . . . . . . . .	Byte	 00000038 _DATA	
defenceTitle . . . . . . . . . .	Byte	 00000158 _DATA	
dequipTitle  . . . . . . . . . .	Byte	 000006F5 _DATA	
discardTitle . . . . . . . . . .	Byte	 0000045C _DATA	
e1 . . . . . . . . . . . . . . .	enemy	 00000199 _DATA	
enemyDamageTitle . . . . . . . .	Byte	 000001E3 _DATA	
enemyDefeatedEvent . . . . . . .	Byte	 00000241 _DATA	
enemyDefeated  . . . . . . . . .	Byte	 000001BB _DATA	
enemyHPTitle . . . . . . . . . .	Byte	 000001D7 _DATA	
enemyNameTitle . . . . . . . . .	Byte	 000001C9 _DATA	
equipTitle . . . . . . . . . . .	Byte	 0000046A _DATA	
equippedWeaponTitle  . . . . . .	Byte	 00000163 _DATA	
escapeEvent  . . . . . . . . . .	Byte	 0000021E _DATA	
escape . . . . . . . . . . . . .	Byte	 000001B9 _DATA	
exitTitle  . . . . . . . . . . .	Byte	 0000072E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
expRewardTitle . . . . . . . . .	Byte	 0000026D _DATA	
expTitle . . . . . . . . . . . .	Byte	 000000DF _DATA	
fleeTitle  . . . . . . . . . . .	Byte	 00000214 _DATA	
fortuneAttribute . . . . . . . .	Byte	 000002FF _DATA	
fortuneTitle . . . . . . . . . .	Byte	 00000125 _DATA	
goldRewardTitle  . . . . . . . .	Byte	 00000265 _DATA	
goldTitle  . . . . . . . . . . .	Byte	 000000E7 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hpTitle  . . . . . . . . . . . .	Byte	 00000148 _DATA	
i10  . . . . . . . . . . . . . .	item	 0000030B _DATA	
i1 . . . . . . . . . . . . . . .	item	 00000407 _DATA	
i2 . . . . . . . . . . . . . . .	item	 000003EB _DATA	
i3 . . . . . . . . . . . . . . .	item	 000003CF _DATA	
i4 . . . . . . . . . . . . . . .	item	 000003B3 _DATA	
i5 . . . . . . . . . . . . . . .	item	 00000397 _DATA	
i6 . . . . . . . . . . . . . . .	item	 0000037B _DATA	
i7 . . . . . . . . . . . . . . .	item	 0000035F _DATA	
i8 . . . . . . . . . . . . . . .	item	 00000343 _DATA	
i9 . . . . . . . . . . . . . . .	item	 00000327 _DATA	
infoTitle  . . . . . . . . . . .	Byte	 00000476 _DATA	
input_state  . . . . . . . . . .	DWord	 00000045 _DATA	
inventoryFullTitle . . . . . . .	Byte	 000004D0 _DATA	
inventoryTitle . . . . . . . . .	Byte	 000006E7 _DATA	
itemBuyValueTitle  . . . . . . .	Byte	 000004A2 _DATA	
itemCombatValueTitle . . . . . .	Byte	 000004B0 _DATA	
itemName1  . . . . . . . . . . .	Byte	 00000000 _DATA	
itemName2  . . . . . . . . . . .	Byte	 00000009 _DATA	
itemName3  . . . . . . . . . . .	Byte	 00000013 _DATA	
itemName4  . . . . . . . . . . .	Byte	 0000001B _DATA	
itemName5  . . . . . . . . . . .	Byte	 00000021 _DATA	
itemName6  . . . . . . . . . . .	Byte	 00000029 _DATA	
itemName7  . . . . . . . . . . .	Byte	 00000032 _DATA	
itemNameTitle  . . . . . . . . .	Byte	 00000485 _DATA	
itemSellValueTitle . . . . . . .	Byte	 00000493 _DATA	
itemType . . . . . . . . . . . .	Byte	 000004C0 _DATA	
levelTitle . . . . . . . . . . .	Byte	 000000D5 _DATA	
levelUpTitle . . . . . . . . . .	Byte	 000006DA _DATA	
leveledUpResponse  . . . . . . .	Byte	 000002B6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mainMenuTitle  . . . . . . . . .	Byte	 000006A4 _DATA	
mindAttribute  . . . . . . . . .	Byte	 000002F6 _DATA	
mindTitle  . . . . . . . . . . .	Byte	 0000011D _DATA	
nameTitle  . . . . . . . . . . .	Byte	 000000CC _DATA	
notEnoughGoldTitle . . . . . . .	Byte	 00000692 _DATA	
notEnoughResponse  . . . . . . .	Byte	 0000029E _DATA	
playerDefeatedEvent  . . . . . .	Byte	 0000022D _DATA	
playerDefeated . . . . . . . . .	Byte	 000001BA _DATA	
primaryAttributesTitle . . . . .	Byte	 000000F0 _DATA	
quitTitle  . . . . . . . . . . .	Byte	 000006B0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
s10  . . . . . . . . . . . . . .	item	 000004E1 _DATA	
s1 . . . . . . . . . . . . . . .	item	 000005DD _DATA	
s2 . . . . . . . . . . . . . . .	item	 000005C1 _DATA	
s3 . . . . . . . . . . . . . . .	item	 000005A5 _DATA	
s4 . . . . . . . . . . . . . . .	item	 00000589 _DATA	
s5 . . . . . . . . . . . . . . .	item	 0000056D _DATA	
s6 . . . . . . . . . . . . . . .	item	 00000551 _DATA	
s7 . . . . . . . . . . . . . . .	item	 00000535 _DATA	
s8 . . . . . . . . . . . . . . .	item	 00000519 _DATA	
s9 . . . . . . . . . . . . . . .	item	 000004FD _DATA	
selectItemTitle  . . . . . . . .	Byte	 00000447 _DATA	
sellModeTitle  . . . . . . . . .	Byte	 00000604 _DATA	
sellTitle  . . . . . . . . . . .	Byte	 0000063E _DATA	
shopMenuTitle  . . . . . . . . .	Byte	 000005F9 _DATA	
shopPrompt1  . . . . . . . . . .	Byte	 00000648 _DATA	
shopPrompt2  . . . . . . . . . .	Byte	 00000665 _DATA	
shopTitle  . . . . . . . . . . .	Byte	 00000700 _DATA	
t1 . . . . . . . . . . . . . . .	item	 00000423 _DATA	
tempString . . . . . . . . . . .	Byte	 0000043F _DATA	
travelTitle  . . . . . . . . . .	Byte	 00000709 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPosTitle  . . . . . . . . . . .	Byte	 000000BA _DATA	
yPosTitle  . . . . . . . . . . .	Byte	 000000C3 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
youDealtTitle  . . . . . . . . .	Byte	 00000291 _DATA	
youGotTitle  . . . . . . . . . .	Byte	 0000025A _DATA	
youTookTitle . . . . . . . . . .	Byte	 0000027B _DATA	

	   1 Warnings
	   0 Errors
